/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 20:44:12 GMT 2024
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.chrono.HijrahEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolvedRecursiveType_ESTest extends ResolvedRecursiveType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.toString();
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      resolvedRecursiveType0.getContentValueHandler();
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      resolvedRecursiveType0.setReference(collectionType1);
      resolvedRecursiveType0.isReferenceType();
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withContentTypeHandler((Object) null);
      MapLikeType mapLikeType0 = new MapLikeType(resolvedRecursiveType1, resolvedRecursiveType0, resolvedRecursiveType1);
      Integer integer0 = new Integer(914);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(integer0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      StringBuilder stringBuilder0 = new StringBuilder("[recursive type; UNRESOLVED");
      StringBuilder stringBuilder1 = simpleType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = mapLikeType1.getErasedSignature(stringBuilder1);
      resolvedRecursiveType1.getErasedSignature(stringBuilder2);
      resolvedRecursiveType0.getErasedSignature();
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.isTypeOrSubTypeOf(class0);
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0.withContentType((JavaType) null);
      Class<Object> class1 = Object.class;
      resolvedRecursiveType0._narrow(class1);
      resolvedRecursiveType0.toString();
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1974L);
      Class<HijrahEra> class0 = HijrahEra.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      resolvedRecursiveType0.setReference(javaType0);
      JavaType javaType1 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      assertFalse(boolean0);
      
      resolvedRecursiveType0.withValueHandler(javaType1);
      JavaType javaType2 = resolvedRecursiveType0.withContentType(javaType0);
      resolvedRecursiveType0.withTypeHandler(javaType2);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      Class<JavaType> class1 = JavaType.class;
      Class<String> class2 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      Class<HijrahEra> class3 = HijrahEra.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      simpleType0.withValueHandler(resolvedRecursiveType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, javaTypeArray0[4]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) mapType1);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings1);
      typeBindings1.withUnboundVariable("");
      resolvedRecursiveType1.refine(class0, typeBindings1, javaTypeArray0[2], javaTypeArray0);
      resolvedRecursiveType1.getSelfReferencedType();
      resolvedRecursiveType1.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      resolvedRecursiveType1.getSuperClass();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      Class<Object> class4 = Object.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class2, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[3]);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder(716);
      StringBuilder stringBuilder1 = collectionLikeType1.getErasedSignature(stringBuilder0);
      resolvedRecursiveType0.withStaticTyping();
      StringBuilder stringBuilder2 = TypeBase._classSignature(class4, stringBuilder1, true);
      // Undeclared exception!
      try { 
        resolvedRecursiveType1.getGenericSignature(stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      String string0 = resolvedRecursiveType0.toString();
      assertEquals("[recursive type; UNRESOLVED", string0);
      
      resolvedRecursiveType0.getContentValueHandler();
      resolvedRecursiveType0.isReferenceType();
      resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.getSuperClass();
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.setReference(javaType0);
      resolvedRecursiveType0.toString();
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertNotNull(javaType1);
      
      resolvedRecursiveType0.withContentType((JavaType) null);
      Class<Object> class1 = Object.class;
      resolvedRecursiveType0._narrow(class1);
      String string1 = resolvedRecursiveType0.toString();
      assertEquals("[recursive type; int", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<Map> class0 = Map.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.toString();
      Class<Stack> class1 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) collectionType1;
      javaTypeArray0[2] = (JavaType) collectionType0;
      javaTypeArray0[3] = (JavaType) collectionType0;
      javaTypeArray0[4] = (JavaType) collectionType0;
      javaTypeArray0[5] = (JavaType) collectionType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      resolvedRecursiveType0.refine(class0, typeBindings0, collectionType1, javaTypeArray0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<JavaType> class1 = JavaType.class;
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class1, typeBindings0);
      boolean boolean0 = resolvedRecursiveType0.equals(resolvedRecursiveType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler("q G4[I0RxFN&^bG4");
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Object> class1 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = resolvedRecursiveType0.equals(class1);
      resolvedRecursiveType0.getSelfReferencedType();
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      boolean boolean1 = resolvedRecursiveType0.isContainerType();
      assertTrue(boolean1 == boolean0);
      
      resolvedRecursiveType0.setReference(javaType0);
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertNotNull(javaType1);
      
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      resolvedRecursiveType0.refine(class1, typeBindings0, (JavaType) null, javaTypeArray0);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[recursive type; ");
      Object object0 = new Object();
      Class<HijrahEra> class0 = HijrahEra.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      resolvedRecursiveType0.withTypeHandler(simpleType0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      Class<Object> class1 = Object.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      int int0 = 72;
      typeBindings0.getBoundType(72);
      resolvedRecursiveType0.withContentType((JavaType) null);
      resolvedRecursiveType0.buildCanonicalName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      resolvedRecursiveType0.withContentType((JavaType) null);
      resolvedRecursiveType0.getValueHandler();
      resolvedRecursiveType0.withValueHandler((Object) null);
      resolvedRecursiveType0.isContainerType();
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      TypeBase._bogusSuperClass(class1);
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.toString();
      typeBindings0.equals(class1);
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      resolvedRecursiveType0.findTypeParameters(class3);
      JavaType javaType0 = resolvedRecursiveType0._narrow(class2);
      JavaType javaType1 = resolvedRecursiveType0.withContentTypeHandler(javaType0);
      assertTrue(javaType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      Class<Map> class1 = Map.class;
      typeFactory0.constructMapType(class1, class0, class1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Integer integer0 = new Integer(0);
      resolvedRecursiveType0.withTypeHandler(integer0);
      resolvedRecursiveType0.withContentType(javaType0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.withTypeHandler(resolvedRecursiveType1);
      Integer integer1 = new Integer(469);
      JavaType javaType1 = resolvedRecursiveType1.withContentTypeHandler(integer1);
      assertFalse(javaType1.isContainerType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      typeBindings0.asKey(class0);
      typeBindings0.asKey(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeBase._bogusSuperClass(class1);
      resolvedRecursiveType0.getSuperClass();
      Object object0 = new Object();
      JavaType javaType1 = resolvedRecursiveType0.withContentValueHandler(object0);
      JavaType javaType2 = resolvedRecursiveType0.withContentType((JavaType) null);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.isContainerType();
      resolvedRecursiveType0.getValueHandler();
      boolean boolean0 = resolvedRecursiveType0.equals((Object) null);
      resolvedRecursiveType0.hasGenericTypes();
      resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      resolvedRecursiveType0.withContentType(javaType1);
      boolean boolean1 = resolvedRecursiveType0.equals(object0);
      assertFalse(boolean1);
      
      resolvedRecursiveType0._narrow(class0);
      resolvedRecursiveType0.getInterfaces();
      String string0 = resolvedRecursiveType0.toString();
      assertEquals("[recursive type; UNRESOLVED", string0);
      
      Class<Object> class2 = Object.class;
      resolvedRecursiveType0._narrow(class2);
      resolvedRecursiveType0.withContentType(javaType1);
      boolean boolean2 = resolvedRecursiveType0.isContainerType();
      assertTrue(boolean2 == boolean0);
      
      resolvedRecursiveType0.setReference(javaType0);
      JavaType javaType3 = resolvedRecursiveType0.withStaticTyping();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class3 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class3, javaType3, (JavaType) resolvedRecursiveType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = mapLikeType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType0.getGenericSignature(stringBuilder1);
      javaType2.getGenericSignature(stringBuilder2);
      Integer integer0 = new Integer(12300);
      javaType2.withContentValueHandler(integer0);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class1 = String.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      Class<Integer> class4 = Integer.class;
      Class<Object> class5 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class3, class4, class5);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      lRUMap0.clear();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) arrayType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(arrayType0);
      JavaType javaType1 = resolvedRecursiveType0.withContentType(mapLikeType0);
      Class<Integer> class6 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType1;
      resolvedRecursiveType0.refine(class6, typeBindings0, mapLikeType0, javaTypeArray0);
      resolvedRecursiveType0.withTypeHandler(javaTypeArray0[1]);
      javaType1.isContainerType();
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<JavaType> class0 = JavaType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler((Object) null);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.buildCanonicalName();
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.getSelfReferencedType();
      System.setCurrentTimeMillis(4L);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = javaType0;
      Class<Object> class1 = Object.class;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, javaType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapType mapType1 = mapType0.withTypeHandler(typeBindings0);
      javaTypeArray0[5] = (JavaType) mapType1;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      JavaType javaType1 = resolvedRecursiveType0.refine(class0, typeBindings0, javaType0, javaTypeArray0);
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.toString();
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      resolvedRecursiveType0.getContentValueHandler();
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      resolvedRecursiveType0.setReference(collectionType1);
      resolvedRecursiveType0.isReferenceType();
      resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.getErasedSignature();
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.getSuperClass();
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.setReference(javaType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to re-set self reference; old value = [collection type; class int, contains [recursive type; int], new = [recursive type; int
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      String string0 = "";
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
      ResolvedRecursiveType resolvedRecursiveType0 = null;
      try {
        resolvedRecursiveType0 = new ResolvedRecursiveType((Class<?>) null, typeBindings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0._narrow(class0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.toString();
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      resolvedRecursiveType0.getContentValueHandler();
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      resolvedRecursiveType0.setReference(collectionType1);
      Object object0 = null;
      resolvedRecursiveType0.isReferenceType();
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(simpleType0);
      resolvedRecursiveType0.getContentTypeHandler();
      javaType0.withTypeHandler((Object) null);
      System.setCurrentTimeMillis(12345678901244L);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[recursive type; UNRESOLVED");
      StringBuilder stringBuilder1 = collectionType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType2.getErasedSignature(stringBuilder1);
      // Undeclared exception!
      javaType0.getGenericSignature(stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeBindings typeBindings0 = null;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.withContentValueHandler(class0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getTypeHandler();
      typeBindings0.equals((Object) null);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType1.withContentTypeHandler((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      MapType mapType0 = new MapType(resolvedRecursiveType0, (JavaType) null, (JavaType) null);
      mapType0.findSuperType(class0);
      resolvedRecursiveType1.equals(mapType0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'GB-f*");
      Class<JavaType> class0 = JavaType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      assertFalse(boolean0);
      
      resolvedRecursiveType0.withStaticTyping();
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 40;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(248, 40);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(resolvedRecursiveType0);
      JavaType javaType1 = resolvedRecursiveType0.withContentType(javaType0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType1;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType1;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      // Undeclared exception!
      try { 
        typeFactory0._constructSimple(class0, (TypeBindings) null, simpleType0, javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      simpleType0.isReferenceType();
      Class<Object> class1 = Object.class;
      SimpleType.constructUnsafe(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      resolvedRecursiveType0.withContentType(simpleType0);
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.getSelfReferencedType();
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getInterfaces();
      resolvedRecursiveType0.toString();
      JavaType javaType0 = resolvedRecursiveType0.getSelfReferencedType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = null;
      resolvedRecursiveType0.setReference((JavaType) null);
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      JavaType javaType1 = resolvedRecursiveType0.containedTypeOrUnknown(50);
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = null;
      resolvedRecursiveType0.refine(class0, (TypeBindings) null, (JavaType) null, javaTypeArray0);
      Class<String> class1 = String.class;
      resolvedRecursiveType0.findSuperType(class1);
      resolvedRecursiveType0.withValueHandler("&qOI");
      resolvedRecursiveType0.withTypeHandler(javaType0);
      resolvedRecursiveType0.setReference(javaTypeArray0[3]);
      resolvedRecursiveType0.withTypeHandler(class0);
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0.equals(javaTypeArray0[1]);
      JavaType javaType2 = resolvedRecursiveType0.withTypeHandler(javaType1);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.withValueHandler("[recursive type; UNRESOLVED");
      resolvedRecursiveType0._narrow(class0);
      resolvedRecursiveType0.withStaticTyping();
      resolvedRecursiveType0.withContentType(javaType2);
      resolvedRecursiveType0.withStaticTyping();
      resolvedRecursiveType0.isContainerType();
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.setReference(javaTypeArray0[3]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to re-set self reference; old value = [recursive type; java.lang.Object, new = [recursive type; java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.buildCanonicalName();
      resolvedRecursiveType0.getSuperClass();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class2 = Object.class;
      typeBindings0.asKey(class2);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 2066);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<Stack> class3 = Stack.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType((Class<? extends Collection>) class3, (JavaType) resolvedRecursiveType0);
      collectionType0.withContentTypeHandler(typeBindings0);
      ArrayType.construct((JavaType) collectionType0, typeBindings0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-128));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable((String) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(typeBindings0);
      resolvedRecursiveType0.getTypeHandler();
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler((Object) null);
      resolvedRecursiveType0.getTypeHandler();
      MapLikeType mapLikeType3 = mapLikeType2.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.withHandlersFrom(mapLikeType3);
      boolean boolean1 = resolvedRecursiveType0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      resolvedRecursiveType0.getSelfReferencedType();
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = new ReferenceType(resolvedRecursiveType0, resolvedRecursiveType0);
      Object object0 = new Object();
      ArrayType arrayType0 = new ArrayType(referenceType0, (TypeBindings) null, class0, object0, class0, false);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType1.getValueHandler();
      ArrayType arrayType1 = arrayType0.withContentValueHandler((Object) null);
      ArrayType arrayType2 = arrayType1.withValueHandler((Object) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(arrayType2);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.withStaticTyping();
      resolvedRecursiveType0.getSuperClass();
      JavaType javaType0 = resolvedRecursiveType0.getSelfReferencedType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      typeBindings0.withUnboundVariable("Sh");
      ReferenceType referenceType0 = new ReferenceType(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(referenceType0);
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class1);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(collectionLikeType0);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      assertFalse(boolean0);
      
      resolvedRecursiveType0.hasGenericTypes();
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler("$G");
      resolvedRecursiveType0.withContentTypeHandler(javaType0);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.withContentValueHandler((Object) null);
      resolvedRecursiveType0.getTypeName();
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler((Object) null);
      assertFalse(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getTypeHandler();
      resolvedRecursiveType0.withTypeHandler((Object) null);
      resolvedRecursiveType0.withContentTypeHandler(class1);
      Integer integer0 = new Integer((-32768));
      boolean boolean0 = resolvedRecursiveType0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.toString();
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      resolvedRecursiveType0.getContentValueHandler();
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      resolvedRecursiveType0.setReference(collectionType1);
      resolvedRecursiveType0.isReferenceType();
      resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.getErasedSignature();
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.getSuperClass();
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.setReference(javaType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to re-set self reference; old value = [collection type; class java.lang.Integer, contains [recursive type; java.lang.Integer], new = [recursive type; java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.isThrowable();
      String string0 = resolvedRecursiveType0.toString();
      assertEquals("[recursive type; UNRESOLVED", string0);
      
      resolvedRecursiveType0.isThrowable();
      resolvedRecursiveType0.findTypeParameters(class0);
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeBase._bogusSuperClass(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      Object object0 = new Object();
      collectionLikeType0.withContentValueHandler(object0);
      Integer integer0 = new Integer(5269);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(integer0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withValueHandler(resolvedRecursiveType0);
      resolvedRecursiveType0.withHandlersFrom(collectionLikeType2);
      resolvedRecursiveType0.withValueHandler(class0);
      resolvedRecursiveType0.setReference(collectionLikeType1);
      resolvedRecursiveType0.isContainerType();
      resolvedRecursiveType0.withTypeHandler(", new = ");
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      assertFalse(boolean0);
      
      resolvedRecursiveType0.withValueHandler(", new = ");
      resolvedRecursiveType0._narrow(class1);
      String string1 = resolvedRecursiveType0.toString();
      assertEquals("[recursive type; java.lang.Object", string1);
      
      Class<Integer> class2 = Integer.class;
      resolvedRecursiveType0.refine(class2, (TypeBindings) null, collectionLikeType1, (JavaType[]) null);
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertNotNull(javaType1);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.containedTypeOrUnknown((-1618));
      Class<Object> class1 = Object.class;
      JavaType javaType0 = resolvedRecursiveType0._narrow(class1);
      assertFalse(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      typeBindings0.equals(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Object> class1 = Object.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) resolvedRecursiveType0);
      resolvedRecursiveType0._canonicalName = null;
      resolvedRecursiveType0.withStaticTyping();
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      resolvedRecursiveType0.setReference(javaType0);
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertFalse(javaType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<String> class1 = String.class;
      Class<Object> class2 = Object.class;
      resolvedRecursiveType0.findSuperType(class2);
      resolvedRecursiveType0.getTypeName();
      resolvedRecursiveType0._narrow(class1);
      resolvedRecursiveType0.withValueHandler("'GB-f*");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'GB-f*");
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.withContentValueHandler("");
      StringBuilder stringBuilder0 = new StringBuilder(1965);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      typeBindings0.equals("org.springframework.beans.factory.ObjectFactory");
      typeBindings0.withUnboundVariable((String) null);
      simpleType0.findSuperType(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler("org.springframework.beans.factory.ObjectFactory");
      resolvedRecursiveType0.getInterfaces();
      resolvedRecursiveType0.setReference(simpleType1);
      resolvedRecursiveType0.equals("org.springframework.beans.factory.ObjectFactory");
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.setReference(simpleType1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to re-set self reference; old value = [simple type, class java.lang.String], new = [simple type, class java.lang.String]
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = new ReferenceType(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(resolvedRecursiveType0);
      referenceType1.withValueHandler(resolvedRecursiveType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(charBuffer0);
      // Undeclared exception!
      try { 
        referenceType1.getGenericSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable(")27al,tIor\"");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      boolean boolean0 = resolvedRecursiveType0.isContainerType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.toString();
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler((Object) null);
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      JavaType javaType1 = resolvedRecursiveType0.refine(class1, typeBindings0, javaType0, javaTypeArray0);
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.toString();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      JavaType javaType0 = resolvedRecursiveType0.getSelfReferencedType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(list0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Integer integer0 = new Integer(0);
      resolvedRecursiveType0.withTypeHandler(integer0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      resolvedRecursiveType0.equals(integer0);
      resolvedRecursiveType0.getTypeHandler();
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler((Object) null);
      assertSame(javaType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      resolvedRecursiveType0.setReference(arrayType1);
      resolvedRecursiveType0.withStaticTyping();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.setReference((JavaType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to re-set self reference; old value = [array type, component type: [recursive type; [Ljava.lang.String;], new = null
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      SimpleType simpleType1 = simpleType0.withValueHandler(typeBindings0);
      resolvedRecursiveType0.setReference(simpleType1);
      assertTrue(resolvedRecursiveType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.equals((Object) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.toString();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = resolvedRecursiveType0._narrow(class1);
      assertFalse(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0._narrow(class0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class1 = String.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      Class<Integer> class4 = Integer.class;
      Class<Object> class5 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class3, class4, class5);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      lRUMap0.clear();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) arrayType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(arrayType0);
      JavaType javaType1 = resolvedRecursiveType0.withContentType(mapLikeType0);
      Class<Integer> class6 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      resolvedRecursiveType0.refine(class6, typeBindings0, mapLikeType0, javaTypeArray0);
      resolvedRecursiveType0.withTypeHandler(javaTypeArray0[1]);
      resolvedRecursiveType0.equals(javaType1);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      // Undeclared exception!
      try { 
        HijrahEra.of(240);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: 240
         //
         verifyException("java.time.chrono.HijrahEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      typeBindings0.asKey(class0);
      typeBindings0.asKey(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeBase._bogusSuperClass(class0);
      resolvedRecursiveType0.getSuperClass();
      Object object0 = new Object();
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(object0);
      resolvedRecursiveType0.withContentType((JavaType) null);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.getValueHandler();
      resolvedRecursiveType0.equals((Object) null);
      resolvedRecursiveType0.hasGenericTypes();
      resolvedRecursiveType0.withContentType(javaType0);
      resolvedRecursiveType0.equals(object0);
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0._narrow(class0);
      resolvedRecursiveType0.toString();
      Class<Object> class1 = Object.class;
      resolvedRecursiveType0._narrow(class1);
      resolvedRecursiveType0.withContentType(javaType0);
      resolvedRecursiveType0.setReference((JavaType) null);
      JavaType javaType1 = resolvedRecursiveType0.withStaticTyping();
      assertSame(javaType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = resolvedRecursiveType0.equals(class1);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(resolvedRecursiveType0);
      boolean boolean1 = resolvedRecursiveType0.isContainerType();
      assertTrue(boolean1 == boolean0);
      
      resolvedRecursiveType0.setReference(javaType0);
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertNotNull(javaType1);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      int int0 = (-1);
      resolvedRecursiveType0.hasGenericTypes();
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }
}
