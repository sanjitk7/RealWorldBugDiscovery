/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 19:39:27 GMT 2024
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BaseMapTest;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest1288;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.ByteArrayInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapSerializer_ESTest extends MapSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, simpleType0, mapLikeType0, true, (TypeSerializer) null, (JsonSerializer<?>) null, (JsonSerializer<?>) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      // Undeclared exception!
      try { 
        mapSerializer0._writeNullKeyedEntry(filteringGeneratorDelegate0, (SerializerProvider) null, sequenceInputStream0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (Annotations) null, (AnnotatedMember) null, propertyMetadata0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "ZP?6gy");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(hashSet0, (JavaType) null, (JavaType) null, true, asPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0);
      PropertySerializerMap propertySerializerMap0 = mapSerializer0._dynamicValueSerializers;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        mapSerializer0._findAndAddDynamic(propertySerializerMap0, (JavaType) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TypeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapSerializer> class0 = MapSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<ChronoField> jsonSerializer0 = (JsonSerializer<ChronoField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, mapLikeType0, false, asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0);
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        mapSerializer0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeMap> class0 = TreeMap.class;
      Class<JavaType> class1 = JavaType.class;
      Class<NamedType> class2 = NamedType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) mapType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) class0);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<MapSerializer> class0 = MapSerializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, referenceType0, referenceType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (TypeSerializer) null, class1);
      NamedType namedType0 = new NamedType(class0, "");
      MapSerializer mapSerializer2 = mapSerializer1.withContentInclusion(namedType0);
      assertNotSame(mapSerializer2, mapSerializer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) null, false, (TypeSerializer) asWrapperTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) asWrapperTypeSerializer0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      MapSerializer mapSerializer1 = mapSerializer0.withFilterId(bigIntegerNode0);
      assertNotSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = mapSerializer0.withResolved(beanProperty_Std0, mapSerializer0, mapSerializer0, treeSet0, false);
      assertNotSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[3] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], (JavaType) simpleType0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "xsT5*{b={naO@h'\"f.");
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) mapType0, true, (TypeSerializer) asPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0, (Object) simpleObjectIdResolver0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, simpleObjectIdResolver0, true);
      assertFalse(mapSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      BaseMapTest.UpperCasingSerializer baseMapTest_UpperCasingSerializer0 = new BaseMapTest.UpperCasingSerializer();
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, false, asExternalTypeSerializer0, baseMapTest_UpperCasingSerializer0, baseMapTest_UpperCasingSerializer0);
      mapSerializer0._ensureOverride();
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, (JavaType) null, (JavaType) null, true, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, jsonSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        mapSerializer0.serialize((Map<?, ?>) null, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) resolvedRecursiveType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) bigIntegerNode0);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) null, false, (TypeSerializer) asWrapperTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) asWrapperTypeSerializer0);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeMap> class0 = TreeMap.class;
      Class<JavaType> class1 = JavaType.class;
      Class<NamedType> class2 = NamedType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) mapType0, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) class0);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertTrue(javaType0.isFinal());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<NamedType> class0 = NamedType.class;
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0, (JavaType) mapLikeType0);
      JsonSerializer<ChronoLocalDate> jsonSerializer0 = (JsonSerializer<ChronoLocalDate>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, mapType0, mapType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      TreeMap<ObjectIdResolver, NamedType> treeMap0 = new TreeMap<ObjectIdResolver, NamedType>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, linkedHashSet0, true);
      File file0 = MockFile.createTempFile("Lcom/fasterxml/jackson/databind/jsontype/NamedType;", "Lcom/fasterxml/jackson/databind/jsontype/NamedType;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        mapSerializer0.serializeWithType((Map<?, ?>) treeMap0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "com.fasterxml.jackson.databind.ser.std.MapSerializer");
      JsonSerializer<JavaType> jsonSerializer0 = (JsonSerializer<JavaType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, resolvedRecursiveType0, resolvedRecursiveType0, true, asExistingPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ser.std.MapSerializer", "com.fasterxml.jackson.databind.ser.std.MapSerializer");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        mapSerializer0.serializeTypedFields((Map<?, ?>) null, jsonGenerator0, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "");
      JsonSerializer<JavaType> jsonSerializer0 = (JsonSerializer<JavaType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, arrayType0, arrayType0, false, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      // Undeclared exception!
      try { 
        mapSerializer0.serializeOptionalFields((Map<?, ?>) null, jsonGenerator0, (SerializerProvider) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<MapSerializer> class0 = MapSerializer.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) linkedHashSet0, (JavaType) resolvedRecursiveType0, false, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TreeMap<BigIntegerNode, ObjectIdGenerators.IntSequenceGenerator> treeMap0 = new TreeMap<BigIntegerNode, ObjectIdGenerators.IntSequenceGenerator>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapSerializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAll();
      // Undeclared exception!
      try { 
        mapSerializer0.serializeFilteredFields((Map<?, ?>) treeMap0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0, (PropertyFilter) simpleBeanPropertyFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, (JavaType) null, (JavaType) null, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      HashMap<BigIntegerNode, NamedType> hashMap0 = new HashMap<BigIntegerNode, NamedType>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, hashMap0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, (OutputStream) null, byteArray0, (byte) (-13), true);
      // Undeclared exception!
      try { 
        mapSerializer0.serialize((Map<?, ?>) hashMap0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<MapSerializer> class0 = MapSerializer.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)84, (byte) (-121));
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) resolvedRecursiveType0, false, (TypeSerializer) null, (JsonSerializer<Object>) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        mapSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      // Undeclared exception!
      try { 
        MapSerializer.construct((String[]) null, (JavaType) simpleType0, true, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) chronoField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("tML3[R(nu,F", "tML3[R(nu,F");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, creatorProperty0, "foobar");
      MapSerializer mapSerializer0 = MapSerializer.construct((String[]) null, javaType0, false, (TypeSerializer) asPropertyTypeSerializer0, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) javaType0);
      // Undeclared exception!
      try { 
        MapSerializer.construct((Set<String>) linkedHashSet0, javaType0, true, (TypeSerializer) asPropertyTypeSerializer0, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) mapSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<MapSerializer> class0 = MapSerializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, referenceType0, referenceType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      // Undeclared exception!
      try { 
        mapSerializer0._findAndAddDynamic(propertySerializerMap0, javaType0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (TypeSerializer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (BeanProperty) null, jsonSerializer0, jsonSerializer0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<MapSerializer> class0 = MapSerializer.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) linkedHashSet0, (JavaType) resolvedRecursiveType0, false, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TreeMap<BigIntegerNode, ObjectIdGenerators.IntSequenceGenerator> treeMap0 = new TreeMap<BigIntegerNode, ObjectIdGenerators.IntSequenceGenerator>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapSerializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      mapSerializer0.serializeTypedFields(treeMap0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0, tokenFilter0);
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, (BeanProperty) null);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) hashSet0, (JavaType) referenceType0, true, (TypeSerializer) asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0, (Object) asWrapperTypeSerializer0);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      Class<MapSerializer> class0 = MapSerializer.class;
      NamedType namedType0 = new NamedType(class0);
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) namedType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      mapSerializer0._writeNullKeyedEntry((JsonGenerator) null, defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0, (Object) null);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<MapSerializer> class0 = MapSerializer.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) linkedHashSet0, (JavaType) resolvedRecursiveType0, false, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        mapSerializer0._writeNullKeyedEntry((JsonGenerator) null, defaultSerializerProvider_Impl0, locale0, "HKfhi)h[|4I_x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapSerializer> class0 = MapSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<ChronoField> jsonSerializer0 = (JsonSerializer<ChronoField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, mapLikeType0, false, asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0);
      TreeMap<MapSerializer, BigIntegerNode> treeMap0 = new TreeMap<MapSerializer, BigIntegerNode>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_NAME_COPY_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("Missing override in class ", "object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockFileOutputStream0, byteArray0, 4, true);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Map<?, ?> map0 = mapSerializer0._orderEntries(treeMap0, uTF8JsonGenerator0, serializerProvider0, (Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[3] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], (JavaType) simpleType0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "xsT5*{b={naO@h'\"f.");
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) mapType0, true, (TypeSerializer) asPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0, (Object) simpleObjectIdResolver0);
      HashMap<Integer, ChronoLocalDate> hashMap0 = new HashMap<Integer, ChronoLocalDate>();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Map<?, ?> map0 = mapSerializer0._orderEntries(hashMap0, jsonGenerator0, serializerProvider0, objectMapper0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
      mapSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) null, false, (TypeSerializer) asWrapperTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) asWrapperTypeSerializer0);
      HashMap<String, ObjectIdResolver> hashMap0 = new HashMap<String, ObjectIdResolver>();
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.filterOutAllExcept((Set<String>) null);
      mapSerializer0.serializeFilteredFields((Map<?, ?>) hashMap0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0, (PropertyFilter) simpleBeanPropertyFilter0, (Object) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "9Yy'EykBpQ%@/g");
      TreeMap<InputStream, MapSerializer> treeMap0 = new TreeMap<InputStream, MapSerializer>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      mapSerializer0.serializeFieldsUsing(treeMap0, (JsonGenerator) null, defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapSerializer> class0 = MapSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<ChronoField> jsonSerializer0 = (JsonSerializer<ChronoField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, mapLikeType0, false, asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0);
      TreeMap<ObjectIdResolver, Integer> treeMap0 = new TreeMap<ObjectIdResolver, Integer>();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      mapSerializer0.serializeOptionalFields(treeMap0, jsonGenerator0, (SerializerProvider) null, jsonFactory0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      HashMap<String, MapSerializer> hashMap0 = new HashMap<String, MapSerializer>();
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      mapSerializer0.serializeFields(hashMap0, jsonGenerator0, (SerializerProvider) null);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      Class<MapSerializer> class0 = MapSerializer.class;
      NamedType namedType0 = new NamedType(class0);
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) namedType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TreeMap<NamedType, InputStream> treeMap0 = new TreeMap<NamedType, InputStream>();
      mapSerializer0.serializeFields(treeMap0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      HashMap<String, MapSerializer> hashMap0 = new HashMap<String, MapSerializer>();
      hashMap0.put("object", mapSerializer0);
      boolean boolean0 = mapSerializer0.hasSingleElement((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      HashMap<String, MapSerializer> hashMap0 = new HashMap<String, MapSerializer>();
      boolean boolean0 = mapSerializer0.hasSingleElement((Map<?, ?>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<MapSerializer> class0 = MapSerializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, referenceType0, referenceType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<ObjectIdGenerators.IntSequenceGenerator, ArrayType> hashMap0 = new HashMap<ObjectIdGenerators.IntSequenceGenerator, ArrayType>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      boolean boolean0 = mapSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Map<?, ?>) hashMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      String[] stringArray0 = new String[0];
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2346, annotationMap0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, creatorProperty0, "}f-xX^/c6");
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Integer integer0 = new Integer((-4));
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) asExternalTypeSerializer0, jsonSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) integer0);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapSerializer> class0 = MapSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<ChronoField> jsonSerializer0 = (JsonSerializer<ChronoField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, mapLikeType0, false, asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = mapSerializer0.withContentInclusion((Object) null);
      assertSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<MapSerializer> class0 = MapSerializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, referenceType0, referenceType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<JavaType> jsonSerializer1 = (JsonSerializer<JavaType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer1 = mapSerializer0.withResolved((BeanProperty) null, jsonSerializer1, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, set0, true);
      assertNotSame(mapSerializer0, mapSerializer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, (JavaType) null, (JavaType) null, true, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, jsonSerializer0);
      MapSerializer mapSerializer1 = mapSerializer0._withValueTypeSerializer((TypeSerializer) null);
      assertSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "");
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = new MapSerializer(set0, javaType0, javaType0, true, asPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (BeanProperty) null, mapSerializer0, mapSerializer0, set0);
      assertFalse(mapSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeMap> class0 = TreeMap.class;
      Class<JavaType> class1 = JavaType.class;
      Class<NamedType> class2 = NamedType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) mapType0, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) class0);
      JsonSerializer<?> jsonSerializer1 = mapSerializer0.getKeySerializer();
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) asArrayTypeSerializer0, jsonSerializer0, jsonSerializer0, (Object) "");
      JsonSerializer<?> jsonSerializer1 = mapSerializer0.getContentSerializer();
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "com.fasterxml.jackson.databind.ser.std.MapSerializer");
      JsonSerializer<JavaType> jsonSerializer0 = (JsonSerializer<JavaType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, resolvedRecursiveType0, resolvedRecursiveType0, true, asExistingPropertyTypeSerializer0, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, asExistingPropertyTypeSerializer0);
      assertFalse(mapSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      PropertyName propertyName0 = new PropertyName("~1]YyCH", "~1]YyCH");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<MapSerializer> class0 = MapSerializer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "~1]YyCH", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, virtualAnnotatedMember0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, beanProperty_Std0, "~1]YyCH");
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(treeSet0, (JavaType) null, (JavaType) null, true, asExternalTypeSerializer0, jsonSerializer0, jsonSerializer0);
      JsonNode jsonNode0 = mapSerializer0.getSchema((SerializerProvider) null, (Type) null);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapSerializer> class0 = MapSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<ChronoField> jsonSerializer0 = (JsonSerializer<ChronoField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, mapLikeType0, false, asWrapperTypeSerializer0, jsonSerializer0, jsonSerializer0);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertTrue(javaType0.isConcrete());
  }
}
