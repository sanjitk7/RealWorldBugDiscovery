/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 19:46:51 GMT 2024
 */

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest1288;
import com.fasterxml.jackson.databind.jsontype.impl.*;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.type.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import java.time.ZoneId;
import java.util.*;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteMapSerializer_ESTest extends MapSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "com.fasterxml.jackson.databind.MapperFeature");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) collectionType0, false, (TypeSerializer) asPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) asPropertyTypeSerializer0);
      PropertySerializerMap propertySerializerMap0 = mapSerializer0._dynamicValueSerializers;
      PropertySerializerMap propertySerializerMap1 = propertySerializerMap0.newWith(class0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        mapSerializer0._findAndAddDynamic(propertySerializerMap1, collectionType0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      Class<JsonToken> class0 = JsonToken.class;
      // Undeclared exception!
      try { 
        mapSerializer0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      MapSerializer mapSerializer1 = mapSerializer0.withContentInclusion(mapSerializer0);
      assertNotSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<MapSerializer> jsonSerializer0 = (JsonSerializer<MapSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, javaType0, javaType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, set0, false);
      HashMap<Integer, MapSerializer> hashMap0 = new HashMap<Integer, MapSerializer>();
      MapSerializer mapSerializer2 = mapSerializer1.withFilterId(hashMap0);
      assertNotSame(mapSerializer2, mapSerializer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonSerializer<MapSerializer> jsonSerializer0 = (JsonSerializer<MapSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, (JavaType) null, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (Object) null, false);
      assertFalse(mapSerializer1.equals((Object)mapSerializer0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "#l?j4");
      Class<MapSerializer> class0 = MapSerializer.class;
      NamedType namedType0 = new NamedType(class0);
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (TypeSerializer) null, namedType0);
      assertFalse(mapSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "#l?j4");
      mapSerializer0._ensureOverride();
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0]);
      BaseMapTest.UpperCasingSerializer baseMapTest_UpperCasingSerializer0 = new BaseMapTest.UpperCasingSerializer();
      JsonSerializer<ReferenceType> jsonSerializer0 = (JsonSerializer<ReferenceType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, referenceType0, javaType0, false, (TypeSerializer) null, baseMapTest_UpperCasingSerializer0, jsonSerializer0);
      JsonSerializer<?> jsonSerializer1 = mapSerializer0.getKeySerializer();
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, referenceType0, referenceType0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, "");
      JsonSerializer<JsonToken> jsonSerializer0 = (JsonSerializer<JsonToken>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Integer> jsonSerializer1 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, mapLikeType0, referenceType0, true, asExistingPropertyTypeSerializer0, jsonSerializer0, jsonSerializer1);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      Class<JsonToken> class1 = JsonToken.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) collectionLikeType0, false, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) stack0);
      JavaType javaType0 = mapSerializer0.getContentType();
      assertNotNull(javaType0);
      assertTrue(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0]);
      BaseMapTest.UpperCasingSerializer baseMapTest_UpperCasingSerializer0 = new BaseMapTest.UpperCasingSerializer();
      JsonSerializer<ReferenceType> jsonSerializer0 = (JsonSerializer<ReferenceType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, referenceType0, javaType0, false, (TypeSerializer) null, baseMapTest_UpperCasingSerializer0, jsonSerializer0);
      HashMap<NamedType, ClassNameIdResolver> hashMap0 = new HashMap<NamedType, ClassNameIdResolver>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      // Undeclared exception!
      try { 
        mapSerializer0.serializeWithType((Map<?, ?>) hashMap0, (JsonGenerator) filteringGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("", "", "");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, javaType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) jsonSerializer0);
      HashMap<MapSerializer, String> hashMap0 = new HashMap<MapSerializer, String>();
      // Undeclared exception!
      try { 
        mapSerializer0.serializeTypedFields((Map<?, ?>) hashMap0, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Class<String> class0 = String.class;
      Class<JsonToken> class1 = JsonToken.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      HashMap<Integer, MapSerializer> hashMap0 = new HashMap<Integer, MapSerializer>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = new MapSerializer(set0, resolvedRecursiveType0, resolvedRecursiveType0, true, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        mapSerializer0.serialize((Map<?, ?>) hashMap0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      JsonSerializer<JavaType> jsonSerializer0 = (JsonSerializer<JavaType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(set0, simpleType0, simpleType0, false, asArrayTypeSerializer0, jsonSerializer0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        mapSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NamedType> class0 = NamedType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      // Undeclared exception!
      try { 
        MapSerializer.construct(set0, (JavaType) collectionLikeType0, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (TypeSerializer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapSerializer mapSerializer0 = null;
      try {
        mapSerializer0 = new MapSerializer((MapSerializer) null, (BeanProperty) null, (JsonSerializer<?>) null, (JsonSerializer<?>) null, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0]);
      BaseMapTest.UpperCasingSerializer baseMapTest_UpperCasingSerializer0 = new BaseMapTest.UpperCasingSerializer();
      JsonSerializer<ReferenceType> jsonSerializer0 = (JsonSerializer<ReferenceType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, referenceType0, javaType0, false, (TypeSerializer) null, baseMapTest_UpperCasingSerializer0, jsonSerializer0);
      HashMap<NamedType, ClassNameIdResolver> hashMap0 = new HashMap<NamedType, ClassNameIdResolver>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      POJONode pOJONode0 = new POJONode(mapSerializer0);
      mapSerializer0.serializeTypedFields(hashMap0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0, pOJONode0);
      assertFalse(pOJONode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Double> class0 = Double.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, javaType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) null);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "#l?j4");
      JsonSerializer<?> jsonSerializer1 = mapSerializer0.getContentSerializer();
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, beanProperty_Std0, "fkL%{Y N5mJ");
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) treeSet0, (JavaType) null, true, (TypeSerializer) asPropertyTypeSerializer0, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) "bZ5&_y+UW7~!-LoH");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ?!^1,mlf|I;?w2]");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mapSerializer0._writeNullKeyedEntry(uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) hashSet0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      TreeMap<MapSerializer, String> treeMap0 = new TreeMap<MapSerializer, String>();
      boolean boolean0 = mapSerializer0._hasNullKey(treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0]);
      BaseMapTest.UpperCasingSerializer baseMapTest_UpperCasingSerializer0 = new BaseMapTest.UpperCasingSerializer();
      JsonSerializer<ReferenceType> jsonSerializer0 = (JsonSerializer<ReferenceType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, referenceType0, javaType0, false, (TypeSerializer) null, baseMapTest_UpperCasingSerializer0, jsonSerializer0);
      HashMap<NamedType, ClassNameIdResolver> hashMap0 = new HashMap<NamedType, ClassNameIdResolver>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      Map<?, ?> map0 = mapSerializer0._orderEntries(hashMap0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0, externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, ":KM (qBUKkG");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      String[] stringArray0 = new String[0];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (JsonSerializer<Object>) null, (Object) defaultSerializerProvider_Impl0);
      mapSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      Object object0 = new Object();
      JsonSerializer<JsonToken> jsonSerializer0 = (JsonSerializer<JsonToken>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, mapType0, mapType0, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      HashMap<NamedType, JsonDeserializer<NamedType>> hashMap0 = new HashMap<NamedType, JsonDeserializer<NamedType>>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String[] stringArray0 = new String[5];
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAllExcept(stringArray0);
      mapSerializer0.serializeFilteredFields((Map<?, ?>) hashMap0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0, (PropertyFilter) simpleBeanPropertyFilter0, object0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, ":KM (qBUKkG");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JsonFactory jsonFactory0 = new JsonFactory();
      String[] stringArray0 = new String[0];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (JsonSerializer<Object>) null, (Object) defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, mockPrintStream0);
      mapSerializer0.serializeFieldsUsing(hashMap0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (JsonSerializer<Object>) null);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, ":KM (qBUKkG");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JsonFactory jsonFactory0 = new JsonFactory();
      String[] stringArray0 = new String[0];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (JsonSerializer<Object>) null, (Object) defaultSerializerProvider_Impl0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      mapSerializer0.serializeOptionalFields(hashMap0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, jsonFactory0);
      assertFalse(mapSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[0]);
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) treeSet0, (JavaType) collectionLikeType0, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) referenceType0);
      HashMap<JsonToken, Object> hashMap0 = new HashMap<JsonToken, Object>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaTypeArray0[1], false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      mapSerializer0.serializeOptionalFields(hashMap0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, javaTypeArray0[3]);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      Class<JsonToken> class1 = JsonToken.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) collectionLikeType0, false, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) stack0);
      TreeMap<ReferenceType, TypeIdResolver> treeMap0 = new TreeMap<ReferenceType, TypeIdResolver>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-115));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1610, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 269, false);
      mapSerializer0.serializeFields(treeMap0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(mapSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) mapType0, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) mapType0);
      HashMap<TypeIdResolver, ReferenceType> hashMap0 = new HashMap<TypeIdResolver, ReferenceType>();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("?A9kW\" Zk+");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      mapSerializer0.serializeFields(hashMap0, uTF8JsonGenerator0, (SerializerProvider) null);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) "bZ5&_y+UW7~!-LoH");
      TreeMap<Object, ReferenceType> treeMap0 = new TreeMap<Object, ReferenceType>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ?!^1,mlf|I;?w2]");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      mapSerializer0.serialize((Map<?, ?>) treeMap0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      TreeMap<MapSerializer, String> treeMap0 = new TreeMap<MapSerializer, String>();
      boolean boolean0 = mapSerializer0.hasSingleElement((Map<?, ?>) treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TreeMap<MapSerializer, String> treeMap0 = new TreeMap<MapSerializer, String>();
      boolean boolean0 = mapSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Map<?, ?>) treeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      // Undeclared exception!
      try { 
        MapSerializer.construct((String[]) null, (JavaType) simpleType0, true, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonSerializer<ReferenceType> jsonSerializer0 = (JsonSerializer<ReferenceType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer(linkedHashSet0, (JavaType) null, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = mapSerializer0.withContentInclusion((Object) null);
      assertSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonSerializer<MapSerializer> jsonSerializer0 = (JsonSerializer<MapSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer0 = new MapSerializer((Set<String>) null, (JavaType) null, (JavaType) null, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0);
      MapSerializer mapSerializer1 = mapSerializer0.withFilterId((Object) null);
      assertSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      MapSerializer mapSerializer1 = mapSerializer0.withResolved((BeanProperty) null, mapSerializer0, mapSerializer0, set0, true);
      assertFalse(mapSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, false, (TypeSerializer) asWrapperTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) null);
      Locale locale0 = new Locale("7,2E)}5|X`l^oa@\"`-E");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JsonSerializer<TypeIdResolver> jsonSerializer0 = (JsonSerializer<TypeIdResolver>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MapSerializer mapSerializer1 = mapSerializer0.withResolved((BeanProperty) null, jsonSerializer0, mapSerializer0, set0, false);
      assertNotSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct(set0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      MapSerializer mapSerializer1 = mapSerializer0._withValueTypeSerializer((TypeSerializer) null);
      assertSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<JsonToken> class0 = JsonToken.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, (BeanProperty) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) null, (JavaType) simpleType0, false, (TypeSerializer) asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (Object) externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0);
      MapSerializer mapSerializer1 = mapSerializer0._withValueTypeSerializer((TypeSerializer) null);
      assertNotSame(mapSerializer1, mapSerializer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) hashSet0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      hashSet0.add("");
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (BeanProperty) null, jsonSerializer0, jsonSerializer0, hashSet0);
      assertFalse(mapSerializer1.equals((Object)mapSerializer0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) "bZ5&_y+UW7~!-LoH");
      JsonSerializer<?> jsonSerializer0 = mapSerializer0.getKeySerializer();
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) mapType0, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) mapType0);
      JsonSerializer<?> jsonSerializer0 = mapSerializer0.getContentSerializer();
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) hashSet0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      MapSerializer mapSerializer1 = new MapSerializer(mapSerializer0, (TypeSerializer) null);
      assertFalse(mapSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MapSerializer mapSerializer0 = MapSerializer.construct(stringArray0, (JavaType) null, true, (TypeSerializer) null, (JsonSerializer<Object>) null, (JsonSerializer<Object>) null, (Object) "bZ5&_y+UW7~!-LoH");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = mapSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      MapSerializer mapSerializer0 = MapSerializer.construct((Set<String>) hashSet0, (JavaType) simpleType0, false, (TypeSerializer) null, jsonSerializer0, jsonSerializer0, (Object) "~$bg|");
      JavaType javaType0 = mapSerializer0.getContentType();
      assertNull(javaType0);
  }
}
