/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 18:48:25 GMT 2024
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.evosuite.shaded.org.mockito.stubbing.Answer;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.BaseMapTest;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest1288;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.PipedInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<CreatorProperty> vector0 = new Vector<CreatorProperty>(0, 0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(vector0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-1221), "", propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      beanPropertyMap0.init(arrayDeque0);
      assertEquals(0, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      Stack<String> stack0 = new Stack<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      int int0 = beanPropertyMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      PropertyName propertyName0 = new PropertyName("Properties=[]", ";lm+YE\"565qAS-");
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Module> class1 = Module.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[0], resolvedRecursiveType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) collectionLikeType0);
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[0], (TypeBindings) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionType0, externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, ";lm+YE\"565qAS-", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";lm+YE\"565qAS-", ";lm+YE\"565qAS-");
      MockError mockError0 = new MockError("Properties=[]", sQLTransientConnectionException0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1000, mockError0, propertyMetadata0);
      String string0 = beanPropertyMap0.getPropertyName(creatorProperty0);
      assertEquals("properties=[]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<CreatorProperty> vector0 = new Vector<CreatorProperty>(0, 0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(vector0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      String string0 = beanPropertyMap0.getPropertyName(creatorProperty0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(1, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, priorityQueue0);
      PropertyName propertyName0 = PropertyName.construct("Nd,KLWr Sj`n5@%j'bX");
      Class<JsonToken> class0 = JsonToken.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ShortNode shortNode0 = ShortNode.valueOf((short) (-3144));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4270), shortNode0, propertyMetadata0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer((String) null, "");
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithBuilder.PaymentDetailsTypeIdResolver();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, externalTypeIdTest1288_ClassesWithBuilder_PaymentDetailsTypeIdResolver0, "", true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLSyntaxErrorException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("d/h5", sQLTransientException0);
      Integer integer0 = new Integer(2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 2, mockRuntimeException0, propertyMetadata0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer_Chained0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, hashSet0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow((Throwable) null, jsonMappingException0, (String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, false);
      // Undeclared exception!
      try { 
        beanPropertyMap0.withoutProperties((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<CreatorProperty> hashSet0 = new HashSet<CreatorProperty>();
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>(hashSet0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, false);
      // Undeclared exception!
      try { 
        beanPropertyMap0.withProperty((SettableBeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace((SettableBeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove((SettableBeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>(23);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.init((Collection<SettableBeanProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.getPropertyName((SettableBeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanPropertyMap.construct((Collection<SettableBeanProperty>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanPropertyMap beanPropertyMap0 = null;
      try {
        beanPropertyMap0 = new BeanPropertyMap(true, (Collection<SettableBeanProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanPropertyMap beanPropertyMap0 = null;
      try {
        beanPropertyMap0 = new BeanPropertyMap((BeanPropertyMap) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      Iterator<SettableBeanProperty> iterator0 = beanPropertyMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Integer integer0 = new Integer((short) (-1035));
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockRuntimeException0, integer0, "'nl:naw", defaultDeserializationContext_Impl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(hashSet0, false);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow((Throwable) null, beanPropertyMap0, "", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("`s9^@@,W[>'n3", class0, "0QPFykqHp!C-6V");
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, jsonToken0, "`s9^@@,W[>'n3", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize value of type java.lang.reflect.InvocationTargetException from String \"`s9^@@,W[>'n3\": 0QPFykqHp!C-6V
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      MockError mockError0 = new MockError();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      ShortNode shortNode0 = ShortNode.valueOf((short)11);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, shortNode0, "org.evosuite.runtime.mock.java.lang.MockError", defaultDeserializationContext_Impl0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      MockError mockError0 = new MockError();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockError0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLRecoverableException0);
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonToken jsonToken0 = missingNode0.asToken();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, jsonToken0, "' missing from _propsInOrder", deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable (through reference chain: com.fasterxml.jackson.core.JsonToken[\"' missing from _propsInOrder\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<CreatorProperty> vector0 = new Vector<CreatorProperty>(0, 0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(vector0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      BaseMapTest.LowerCasingDeserializer baseMapTest_LowerCasingDeserializer0 = new BaseMapTest.LowerCasingDeserializer();
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(baseMapTest_LowerCasingDeserializer0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
      assertSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<IOException> class0 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, "com.fasterxml.jackson.databind.ObjectMapperTest$CustomMapper", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, annotationMap0, (-683));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-683), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<ShortNode> jsonDeserializer0 = (JsonDeserializer<ShortNode>) mock(JsonDeserializer.class, (Answer) new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(jsonDeserializer0).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("'A_JO0NN11,+._W]<M", "'A_JO0NN11,+._W]<M");
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeSet<CreatorProperty> treeSet0 = new TreeSet<CreatorProperty>();
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>((SortedSet<? extends SettableBeanProperty>) treeSet0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, true);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, (NameTransformer) null);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      Object object0 = new Object();
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, object0, "{\"name\":\"bob\", \"x\":\"y\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(" (one known property: \"");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeSet<CreatorProperty> treeSet0 = new TreeSet<CreatorProperty>();
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>((SortedSet<? extends SettableBeanProperty>) treeSet0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("KPI> uP?AC", "");
      MockError mockError0 = new MockError("", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.findDeserializeAndSet(filteringParserDelegate0, defaultDeserializationContext_Impl0, mockError0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-656));
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<CreatorProperty> vector0 = new Vector<CreatorProperty>(0, 0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(vector0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0 = new ExternalTypeIdTest1288.ClassesWithoutBuilder.PaymentDetailsTypeIdResolver();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, externalTypeIdTest1288_ClassesWithoutBuilder_PaymentDetailsTypeIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      Stack<String> stack0 = new Stack<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSet1.add("be{~v5.d*CX");
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(linkedHashSet1);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, (Answer) new ViolatedAssumptionAnswer());
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>(57343, comparator0);
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 57343);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 57343, pipedInputStream0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-4056), annotationMap0, propertyMetadata0);
      linkedList0.add((SettableBeanProperty) creatorProperty0);
      linkedList0.add((SettableBeanProperty) creatorProperty0);
      linkedList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      assertEquals(3, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      linkedList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer((String) null, "or");
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = new BeanPropertyMap(beanPropertyMap0, true);
      assertFalse(beanPropertyMap1.equals((Object)beanPropertyMap0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      String string0 = beanPropertyMap0.toString();
      assertEquals("Properties=[]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, false);
      MockIOException mockIOException0 = new MockIOException("]].YJ=E");
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, mockIOException0, "", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
