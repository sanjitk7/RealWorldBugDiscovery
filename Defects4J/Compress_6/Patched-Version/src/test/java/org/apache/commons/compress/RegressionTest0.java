package org.apache.commons.compress.archivers.zip;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: entry");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        java.lang.Class<?> wildcardClass6 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry3 = zipArchiveEntry1.setLastModifiedTime(fileTime2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: lastModifiedTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtraFields(zipExtraFieldArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtra(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) 100, (byte) 0, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtra(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: data starting at 0 is in unknown format");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0, 1, 100, 0, 1]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort6);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        int int0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_FAT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        int int0 = java.util.zip.ZipEntry.STORED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry5 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.lang.String str8 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExtra();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExtra();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCrc((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry crc-32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        byte[] byteArray10 = zipArchiveEntry1.getLocalFileDataExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry7 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort2);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipEntry38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        int int0 = java.util.zip.ZipEntry.DEFLATED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField40 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        java.lang.String str5 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry12.setComment("hi!");
        long long18 = zipArchiveEntry12.getExternalAttributes();
        zipArchiveEntry12.setTime((long) (short) -1);
        boolean boolean21 = zipArchiveEntry12.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry12.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry23 = zipArchiveEntry1.setCreationTime(fileTime22);
        long long24 = zipEntry23.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry23);
        org.junit.Assert.assertEquals(zipEntry23.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        java.lang.String str39 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        zipArchiveEntry0.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField3 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry0.addExtraField(zipExtraField3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getCrc();
        java.lang.String str8 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setInternalAttributes(0);
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.util.zip.ZipEntry zipEntry0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipEntry0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: entry");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField39 = zipArchiveEntry1.getExtraField(zipShort38);
        java.nio.file.attribute.FileTime fileTime40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry41 = zipArchiveEntry1.setLastAccessTime(fileTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: lastAccessTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField39);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.nio.file.attribute.FileTime fileTime9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry10 = zipArchiveEntry1.setCreationTime(fileTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: creationTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        java.lang.Object obj7 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "hi!");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.lang.String str5 = zipArchiveEntry1.getComment();
        long long6 = zipArchiveEntry1.getSize();
        java.lang.String str7 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort4);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        int int18 = zipArchiveEntry10.getUnixMode();
        java.lang.String str19 = zipArchiveEntry10.getComment();
        long long20 = zipArchiveEntry10.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        zipArchiveEntry23.setCrc((long) 0);
        long long31 = zipArchiveEntry23.getSize();
        java.nio.file.attribute.FileTime fileTime32 = zipArchiveEntry23.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        long long40 = zipArchiveEntry34.getExternalAttributes();
        zipArchiveEntry34.setTime((long) (short) -1);
        boolean boolean43 = zipArchiveEntry34.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry34.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry23.setCreationTime(fileTime44);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry21.setLastAccessTime(fileTime44);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry10.setLastModifiedTime(fileTime44);
        byte[] byteArray48 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray48);
        byte[] byteArray50 = zipArchiveEntry1.getLocalFileDataExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry51 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(fileTime32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setSize((long) (byte) 0);
        org.junit.Assert.assertNull(fileTime4);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        int int12 = zipArchiveEntry1.getUnixMode();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        zipArchiveEntry1.setUnixMode(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setSize((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry size");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        boolean boolean12 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setExternalAttributes(100L);
        java.lang.String str7 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setTime((long) (short) 100);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.String str41 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean8 = zipArchiveEntry1.isDirectory();
        byte[] byteArray9 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort7);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        int int9 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime3 = zipArchiveEntry1.getCreationTime();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(fileTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        zipArchiveEntry42.setTime((long) (-1));
        boolean boolean47 = zipArchiveEntry42.isDirectory();
        boolean boolean48 = zipArchiveEntry42.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry50 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry50.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray53 = zipArchiveEntry50.getExtraFields();
        zipArchiveEntry50.setComment("hi!");
        long long56 = zipArchiveEntry50.getSize();
        java.lang.String str57 = zipArchiveEntry50.getName();
        int int58 = zipArchiveEntry50.getMethod();
        byte[] byteArray59 = zipArchiveEntry50.getLocalFileDataExtra();
        zipArchiveEntry42.setCentralDirectoryExtra(byteArray59);
        java.lang.String str61 = zipArchiveEntry42.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray62);
        java.nio.file.attribute.FileTime fileTime64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry65 = zipArchiveEntry1.setLastAccessTime(fileTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: lastAccessTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        long long10 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime9);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        java.nio.file.attribute.FileTime fileTime7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry8 = zipArchiveEntry1.setLastModifiedTime(fileTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: lastModifiedTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        java.lang.Object obj10 = zipArchiveEntry1.clone();
        long long11 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        long long12 = zipArchiveEntry6.getSize();
        java.lang.String str13 = zipArchiveEntry6.getName();
        int int14 = zipArchiveEntry6.getMethod();
        byte[] byteArray15 = zipArchiveEntry6.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray15);
        java.lang.String str17 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        java.lang.Class<?> wildcardClass10 = zipExtraFieldArray9.getClass();
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setSize((long) (byte) 1);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        long long9 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCentralDirectoryExtra(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        java.lang.Object obj9 = zipArchiveEntry1.clone();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "hi!");
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        long long16 = zipArchiveEntry10.getSize();
        java.lang.String str17 = zipArchiveEntry10.getName();
        int int18 = zipArchiveEntry10.getMethod();
        byte[] byteArray19 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray19);
        byte[] byteArray21 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        long long8 = zipArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry19.getExtraFields();
        zipArchiveEntry19.setComment("hi!");
        zipArchiveEntry19.setInternalAttributes((int) (byte) 10);
        int int27 = zipArchiveEntry19.getUnixMode();
        java.lang.String str28 = zipArchiveEntry19.getComment();
        long long29 = zipArchiveEntry19.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry30 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry32.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray35 = zipArchiveEntry32.getExtraFields();
        zipArchiveEntry32.setComment("hi!");
        zipArchiveEntry32.setCrc((long) 0);
        long long40 = zipArchiveEntry32.getSize();
        java.nio.file.attribute.FileTime fileTime41 = zipArchiveEntry32.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry43 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry43.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray46 = zipArchiveEntry43.getExtraFields();
        zipArchiveEntry43.setComment("hi!");
        long long49 = zipArchiveEntry43.getExternalAttributes();
        zipArchiveEntry43.setTime((long) (short) -1);
        boolean boolean52 = zipArchiveEntry43.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime53 = zipArchiveEntry43.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry54 = zipArchiveEntry32.setCreationTime(fileTime53);
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry30.setLastAccessTime(fileTime53);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry19.setLastModifiedTime(fileTime53);
        byte[] byteArray57 = zipArchiveEntry19.getLocalFileDataExtra();
        zipArchiveEntry10.setExtra(byteArray57);
        zipArchiveEntry1.setExtra(byteArray57);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNull(fileTime41);
        org.junit.Assert.assertNotNull(zipExtraFieldArray46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(zipEntry54);
        org.junit.Assert.assertEquals(zipEntry54.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        zipEntry38.setComment("hi!");
        byte[] byteArray41 = zipEntry38.getExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNull(byteArray41);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCrc((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry crc-32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry4 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean5 = zipArchiveEntry4.isDirectory();
        int int6 = zipArchiveEntry4.getUnixMode();
        java.lang.String str7 = zipArchiveEntry4.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        zipArchiveEntry9.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setInternalAttributes((int) (byte) 10);
        int int26 = zipArchiveEntry18.getUnixMode();
        java.lang.String str27 = zipArchiveEntry18.getComment();
        long long28 = zipArchiveEntry18.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry31.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray34 = zipArchiveEntry31.getExtraFields();
        zipArchiveEntry31.setComment("hi!");
        zipArchiveEntry31.setCrc((long) 0);
        long long39 = zipArchiveEntry31.getSize();
        java.nio.file.attribute.FileTime fileTime40 = zipArchiveEntry31.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry42.setComment("hi!");
        long long48 = zipArchiveEntry42.getExternalAttributes();
        zipArchiveEntry42.setTime((long) (short) -1);
        boolean boolean51 = zipArchiveEntry42.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime52 = zipArchiveEntry42.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry53 = zipArchiveEntry31.setCreationTime(fileTime52);
        java.util.zip.ZipEntry zipEntry54 = zipArchiveEntry29.setLastAccessTime(fileTime52);
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry18.setLastModifiedTime(fileTime52);
        byte[] byteArray56 = zipArchiveEntry18.getLocalFileDataExtra();
        zipArchiveEntry9.setExtra(byteArray56);
        zipArchiveEntry4.setCentralDirectoryExtra(byteArray56);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray56);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNull(fileTime40);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fileTime52);
        org.junit.Assert.assertNotNull(zipEntry53);
        org.junit.Assert.assertEquals(zipEntry53.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry54);
        org.junit.Assert.assertEquals(zipEntry54.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(fileTime9);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setTime(0L);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort7);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        java.lang.String str14 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.util.Date date11 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setCompressedSize((long) 8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry1.getLastAccessTime();
        java.lang.Class<?> wildcardClass14 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setInternalAttributes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort6);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        long long3 = zipArchiveEntry1.getSize();
        long long4 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getTime();
        zipArchiveEntry0.setCrc((long) (byte) 1);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str5 = zipArchiveEntry1.getName();
        int int6 = zipArchiveEntry1.getUnixMode();
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(fileTime7);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.lang.String str5 = zipArchiveEntry1.getComment();
        java.lang.Class<?> wildcardClass6 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        byte[] byteArray7 = zipArchiveEntry1.getCentralDirectoryExtra();
        byte[] byteArray8 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.Class<?> wildcardClass9 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setExternalAttributes((long) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getExternalAttributes();
        int int27 = zipArchiveEntry0.getMethod();
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        int int3 = zipArchiveEntry1.getMethod();
        long long4 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setPlatform(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField24 = zipArchiveEntry1.getExtraField(zipShort23);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(zipExtraField24);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        java.lang.Object obj7 = zipArchiveEntry1.clone();
        long long8 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExtra();
        long long11 = zipArchiveEntry1.getSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry6 = zipArchiveEntry1.setCreationTime(fileTime5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: creationTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        boolean boolean8 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        int int9 = zipArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setMethod((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        java.lang.Class<?> wildcardClass9 = zipExtraFieldArray8.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        java.nio.file.attribute.FileTime fileTime15 = zipArchiveEntry12.getLastAccessTime();
        long long16 = zipArchiveEntry12.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry12.getCreationTime();
        byte[] byteArray18 = zipArchiveEntry12.getCentralDirectoryExtra();
        zipArchiveEntry1.setExtra(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.String str41 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setCrc((long) (short) 100);
        zipArchiveEntry1.setName("hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        boolean boolean17 = zipArchiveEntry12.isDirectory();
        boolean boolean18 = zipArchiveEntry12.isDirectory();
        java.nio.file.attribute.FileTime fileTime19 = zipArchiveEntry12.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry20 = zipArchiveEntry1.setLastAccessTime(fileTime19);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(zipEntry20);
        org.junit.Assert.assertEquals(zipEntry20.toString(), "hi!");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        zipArchiveEntry1.setExternalAttributes(0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        java.lang.String str15 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setMethod(0);
        long long58 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        int int7 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        zipArchiveEntry42.setTime((long) (-1));
        boolean boolean47 = zipArchiveEntry42.isDirectory();
        boolean boolean48 = zipArchiveEntry42.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry50 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry50.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray53 = zipArchiveEntry50.getExtraFields();
        zipArchiveEntry50.setComment("hi!");
        long long56 = zipArchiveEntry50.getSize();
        java.lang.String str57 = zipArchiveEntry50.getName();
        int int58 = zipArchiveEntry50.getMethod();
        byte[] byteArray59 = zipArchiveEntry50.getLocalFileDataExtra();
        zipArchiveEntry42.setCentralDirectoryExtra(byteArray59);
        java.lang.String str61 = zipArchiveEntry42.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray62);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry65 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry65.setName("hi!");
        zipArchiveEntry65.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray70 = zipArchiveEntry65.getExtraFields();
        java.nio.file.attribute.FileTime fileTime71 = zipArchiveEntry65.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry72 = zipArchiveEntry1.setCreationTime(fileTime71);
        java.lang.String str73 = zipEntry72.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
        org.junit.Assert.assertNotNull(zipExtraFieldArray70);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(zipEntry72);
        org.junit.Assert.assertEquals(zipEntry72.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        java.nio.file.attribute.FileTime fileTime5 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str6 = zipArchiveEntry1.getName();
        java.lang.String str7 = zipArchiveEntry1.getComment();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry57 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        zipArchiveEntry42.setTime((long) (-1));
        boolean boolean47 = zipArchiveEntry42.isDirectory();
        boolean boolean48 = zipArchiveEntry42.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry50 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry50.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray53 = zipArchiveEntry50.getExtraFields();
        zipArchiveEntry50.setComment("hi!");
        long long56 = zipArchiveEntry50.getSize();
        java.lang.String str57 = zipArchiveEntry50.getName();
        int int58 = zipArchiveEntry50.getMethod();
        byte[] byteArray59 = zipArchiveEntry50.getLocalFileDataExtra();
        zipArchiveEntry42.setCentralDirectoryExtra(byteArray59);
        java.lang.String str61 = zipArchiveEntry42.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray62);
        long long64 = zipArchiveEntry1.getCrc();
        java.lang.Object obj65 = null;
        boolean boolean66 = zipArchiveEntry1.equals(obj65);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry12.setComment("hi!");
        long long18 = zipArchiveEntry12.getExternalAttributes();
        zipArchiveEntry12.setTime((long) (short) -1);
        boolean boolean21 = zipArchiveEntry12.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry12.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry23 = zipArchiveEntry1.setCreationTime(fileTime22);
        zipEntry23.setTime((long) '4');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry23);
        org.junit.Assert.assertEquals(zipEntry23.toString(), "hi!");
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNull(fileTime8);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        int int7 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        zipArchiveEntry9.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        zipArchiveEntry42.setTime((long) (-1));
        boolean boolean47 = zipArchiveEntry42.isDirectory();
        boolean boolean48 = zipArchiveEntry42.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry50 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry50.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray53 = zipArchiveEntry50.getExtraFields();
        zipArchiveEntry50.setComment("hi!");
        long long56 = zipArchiveEntry50.getSize();
        java.lang.String str57 = zipArchiveEntry50.getName();
        int int58 = zipArchiveEntry50.getMethod();
        byte[] byteArray59 = zipArchiveEntry50.getLocalFileDataExtra();
        zipArchiveEntry42.setCentralDirectoryExtra(byteArray59);
        java.lang.String str61 = zipArchiveEntry42.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray62);
        long long64 = zipArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort65 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField66 = zipArchiveEntry1.getExtraField(zipShort65);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNull(zipExtraField66);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        long long7 = zipArchiveEntry1.getCrc();
        long long8 = zipArchiveEntry1.getSize();
        java.lang.String str9 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setMethod(0);
        java.lang.Object obj58 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setTime((long) (byte) 10);
        zipArchiveEntry1.setCompressedSize((long) '4');
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField63 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry40 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry40.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray43 = zipArchiveEntry40.getExtraFields();
        zipArchiveEntry40.setComment("hi!");
        zipArchiveEntry40.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry49 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry49.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray52 = zipArchiveEntry49.getExtraFields();
        zipArchiveEntry49.setComment("hi!");
        zipArchiveEntry49.setInternalAttributes((int) (byte) 10);
        int int57 = zipArchiveEntry49.getUnixMode();
        java.lang.String str58 = zipArchiveEntry49.getComment();
        long long59 = zipArchiveEntry49.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry60 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry62 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry62.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray65 = zipArchiveEntry62.getExtraFields();
        zipArchiveEntry62.setComment("hi!");
        zipArchiveEntry62.setCrc((long) 0);
        long long70 = zipArchiveEntry62.getSize();
        java.nio.file.attribute.FileTime fileTime71 = zipArchiveEntry62.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry73 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry73.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray76 = zipArchiveEntry73.getExtraFields();
        zipArchiveEntry73.setComment("hi!");
        long long79 = zipArchiveEntry73.getExternalAttributes();
        zipArchiveEntry73.setTime((long) (short) -1);
        boolean boolean82 = zipArchiveEntry73.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime83 = zipArchiveEntry73.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry84 = zipArchiveEntry62.setCreationTime(fileTime83);
        java.util.zip.ZipEntry zipEntry85 = zipArchiveEntry60.setLastAccessTime(fileTime83);
        java.util.zip.ZipEntry zipEntry86 = zipArchiveEntry49.setLastModifiedTime(fileTime83);
        byte[] byteArray87 = zipArchiveEntry49.getLocalFileDataExtra();
        zipArchiveEntry40.setExtra(byteArray87);
        byte[] byteArray89 = zipArchiveEntry40.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry91 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray43);
        org.junit.Assert.assertNotNull(zipExtraFieldArray52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNull(fileTime71);
        org.junit.Assert.assertNotNull(zipExtraFieldArray76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(fileTime83);
        org.junit.Assert.assertNotNull(zipEntry84);
        org.junit.Assert.assertEquals(zipEntry84.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry85);
        org.junit.Assert.assertEquals(zipEntry85.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry86);
        org.junit.Assert.assertEquals(zipEntry86.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        boolean boolean10 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        long long12 = zipArchiveEntry6.getSize();
        java.lang.String str13 = zipArchiveEntry6.getName();
        int int14 = zipArchiveEntry6.getMethod();
        byte[] byteArray15 = zipArchiveEntry6.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray15);
        long long17 = zipArchiveEntry1.getCompressedSize();
        java.nio.file.attribute.FileTime fileTime18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.ZipEntry zipEntry19 = zipArchiveEntry1.setLastAccessTime(fileTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: lastAccessTime");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        long long20 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int5 = zipArchiveEntry1.getUnixMode();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort6);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertNotNull(fileTime7);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.Object obj4 = zipArchiveEntry1.clone();
        long long5 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort14);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.lang.String str5 = zipArchiveEntry1.getComment();
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        long long16 = zipArchiveEntry10.getSize();
        java.lang.String str17 = zipArchiveEntry10.getName();
        int int18 = zipArchiveEntry10.getMethod();
        byte[] byteArray19 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray19);
        boolean boolean21 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int22 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        long long19 = zipArchiveEntry1.getExternalAttributes();
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6553601L + "'", long19 == 6553601L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        java.util.Date date5 = zipArchiveEntry1.getLastModifiedDate();
        boolean boolean6 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        byte[] byteArray8 = zipArchiveEntry1.getLocalFileDataExtra();
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        zipArchiveEntry1.setInternalAttributes((int) '#');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("hi!");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setMethod((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        long long12 = zipArchiveEntry6.getSize();
        java.lang.String str13 = zipArchiveEntry6.getName();
        int int14 = zipArchiveEntry6.getMethod();
        byte[] byteArray15 = zipArchiveEntry6.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray15);
        long long17 = zipArchiveEntry1.getCompressedSize();
        java.lang.String str18 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        java.util.Date date10 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        long long9 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.lang.String str5 = zipArchiveEntry1.getComment();
        long long6 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        zipArchiveEntry1.setTime((long) (byte) 10);
        java.lang.String str10 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setCrc((long) '#');
        boolean boolean8 = zipArchiveEntry1.equals((java.lang.Object) 1.0d);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort9);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime3 = zipArchiveEntry1.getCreationTime();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        long long6 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(fileTime3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        int int56 = zipArchiveEntry1.getUnixMode();
        long long57 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField58 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        java.nio.file.attribute.FileTime fileTime40 = zipArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(fileTime40);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(fileTime8);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        byte[] byteArray10 = zipArchiveEntry1.getExtra();
        zipArchiveEntry1.setExternalAttributes((long) (short) 100);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime9);
        org.junit.Assert.assertNull(byteArray10);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean7 = zipArchiveEntry6.isDirectory();
        java.util.Date date8 = zipArchiveEntry6.getLastModifiedDate();
        byte[] byteArray9 = zipArchiveEntry6.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry11.setComment("hi!");
        zipArchiveEntry11.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setInternalAttributes((int) (byte) 10);
        int int28 = zipArchiveEntry20.getUnixMode();
        java.lang.String str29 = zipArchiveEntry20.getComment();
        long long30 = zipArchiveEntry20.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        zipArchiveEntry33.setCrc((long) 0);
        long long41 = zipArchiveEntry33.getSize();
        java.nio.file.attribute.FileTime fileTime42 = zipArchiveEntry33.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry44 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry44.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray47 = zipArchiveEntry44.getExtraFields();
        zipArchiveEntry44.setComment("hi!");
        long long50 = zipArchiveEntry44.getExternalAttributes();
        zipArchiveEntry44.setTime((long) (short) -1);
        boolean boolean53 = zipArchiveEntry44.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime54 = zipArchiveEntry44.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry33.setCreationTime(fileTime54);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry31.setLastAccessTime(fileTime54);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry20.setLastModifiedTime(fileTime54);
        byte[] byteArray58 = zipArchiveEntry20.getLocalFileDataExtra();
        zipArchiveEntry11.setExtra(byteArray58);
        zipArchiveEntry6.setExtra(byteArray58);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray58);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField62 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(fileTime42);
        org.junit.Assert.assertNotNull(zipExtraFieldArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        int int7 = zipArchiveEntry1.getUnixMode();
        int int8 = zipArchiveEntry1.getMethod();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField39 = zipArchiveEntry1.getExtraField(zipShort38);
        zipArchiveEntry1.setCrc((long) (byte) 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort42 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort42);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField39);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = zipArchiveEntry1.getExtraField(zipShort4);
        long long6 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        zipArchiveEntry1.setCrc((long) (short) 100);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        boolean boolean20 = zipArchiveEntry1.isDirectory();
        java.lang.String str21 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str5 = zipArchiveEntry1.getName();
        int int6 = zipArchiveEntry1.getUnixMode();
        long long7 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setCrc((long) (byte) 10);
        zipArchiveEntry1.setPlatform((int) (short) -1);
        java.nio.file.attribute.FileTime fileTime14 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(fileTime14);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        long long19 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setExternalAttributes((long) ' ');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6553601L + "'", long19 == 6553601L);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        int int41 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry1.getExtraFields();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry43 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getTime();
        zipArchiveEntry0.setExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        long long10 = zipArchiveEntry1.getCrc();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.lang.String str5 = zipArchiveEntry1.getComment();
        long long6 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        zipArchiveEntry8.setTime((long) (-1));
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry8.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry14 = zipArchiveEntry1.setLastAccessTime(fileTime13);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(zipEntry14);
        org.junit.Assert.assertEquals(zipEntry14.toString(), "");
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        int int41 = zipArchiveEntry1.getPlatform();
        java.lang.String str42 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray9);
        boolean boolean11 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        java.lang.String str6 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        zipArchiveEntry1.setPlatform((int) ' ');
        java.lang.Object obj11 = null;
        boolean boolean12 = zipArchiveEntry1.equals(obj11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        zipArchiveEntry1.setTime((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getSize();
        int int14 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setName("hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        java.util.Date date10 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        java.nio.file.attribute.FileTime fileTime15 = zipArchiveEntry12.getLastAccessTime();
        long long16 = zipArchiveEntry12.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry12.getCreationTime();
        byte[] byteArray18 = zipArchiveEntry12.getCentralDirectoryExtra();
        zipArchiveEntry1.setExtra(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setMethod((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (short) 1);
        java.lang.String str11 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setSize((long) 3);
        java.lang.Object obj8 = zipArchiveEntry1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "");
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        byte[] byteArray4 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = zipArchiveEntry1.getExtraField(zipShort8);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNull(byteArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        java.lang.Object obj7 = zipArchiveEntry1.clone();
        java.lang.Class<?> wildcardClass8 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        byte[] byteArray8 = zipArchiveEntry1.getLocalFileDataExtra();
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        long long10 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort11);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        zipArchiveEntry1.setPlatform((int) ' ');
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.lang.String str9 = zipArchiveEntry1.getName();
        int int10 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.Object obj4 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setExtra();
        long long6 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setCrc((long) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        java.lang.String str7 = zipArchiveEntry1.getName();
        byte[] byteArray8 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(byteArray8);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        long long12 = zipArchiveEntry6.getExternalAttributes();
        zipArchiveEntry6.setTime((long) (short) -1);
        boolean boolean15 = zipArchiveEntry6.isSupportedCompressionMethod();
        byte[] byteArray16 = zipArchiveEntry6.getExtra();
        long long17 = zipArchiveEntry6.getSize();
        long long18 = zipArchiveEntry6.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setCrc((long) 0);
        long long28 = zipArchiveEntry20.getSize();
        java.nio.file.attribute.FileTime fileTime29 = zipArchiveEntry20.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry31.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray34 = zipArchiveEntry31.getExtraFields();
        zipArchiveEntry31.setComment("hi!");
        long long37 = zipArchiveEntry31.getExternalAttributes();
        zipArchiveEntry31.setTime((long) (short) -1);
        boolean boolean40 = zipArchiveEntry31.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime41 = zipArchiveEntry31.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry42 = zipArchiveEntry20.setCreationTime(fileTime41);
        java.util.zip.ZipEntry zipEntry43 = zipArchiveEntry6.setLastModifiedTime(fileTime41);
        java.util.zip.ZipEntry zipEntry44 = zipArchiveEntry1.setCreationTime(fileTime41);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(fileTime29);
        org.junit.Assert.assertNotNull(zipExtraFieldArray34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(zipEntry42);
        org.junit.Assert.assertEquals(zipEntry42.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry43);
        org.junit.Assert.assertEquals(zipEntry43.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        java.lang.String str7 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        zipArchiveEntry25.setInternalAttributes((int) (byte) 10);
        int int33 = zipArchiveEntry25.getUnixMode();
        java.lang.String str34 = zipArchiveEntry25.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        zipArchiveEntry37.setCrc((long) 0);
        long long45 = zipArchiveEntry37.getSize();
        java.nio.file.attribute.FileTime fileTime46 = zipArchiveEntry37.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry48 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry48.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray51 = zipArchiveEntry48.getExtraFields();
        zipArchiveEntry48.setComment("hi!");
        long long54 = zipArchiveEntry48.getExternalAttributes();
        zipArchiveEntry48.setTime((long) (short) -1);
        boolean boolean57 = zipArchiveEntry48.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime58 = zipArchiveEntry48.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry37.setCreationTime(fileTime58);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry35.setLastAccessTime(fileTime58);
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry25.setLastModifiedTime(fileTime58);
        java.util.zip.ZipEntry zipEntry62 = zipArchiveEntry1.setLastAccessTime(fileTime58);
        int int63 = zipArchiveEntry1.getMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(fileTime46);
        org.junit.Assert.assertNotNull(zipExtraFieldArray51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fileTime58);
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry7 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry7.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry7.getExtraFields();
        zipArchiveEntry7.setComment("hi!");
        zipArchiveEntry7.setInternalAttributes((int) (byte) 10);
        byte[] byteArray15 = zipArchiveEntry7.getCentralDirectoryExtra();
        zipArchiveEntry7.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        zipArchiveEntry19.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = zipArchiveEntry19.getExtraFields();
        java.nio.file.attribute.FileTime fileTime25 = zipArchiveEntry19.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = zipArchiveEntry7.setLastAccessTime(fileTime25);
        java.util.zip.ZipEntry zipEntry27 = zipArchiveEntry1.setLastAccessTime(fileTime25);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        long long35 = zipArchiveEntry29.getSize();
        java.lang.String str36 = zipArchiveEntry29.getName();
        int int37 = zipArchiveEntry29.getMethod();
        byte[] byteArray38 = zipArchiveEntry29.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray38);
        zipArchiveEntry1.setCompressedSize((long) (byte) 100);
        long long42 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry27);
        org.junit.Assert.assertEquals(zipEntry27.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setComment("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setUnixMode((int) (short) -1);
        long long10 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray11 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        byte[] byteArray19 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField39 = zipArchiveEntry1.getExtraField(zipShort38);
        zipArchiveEntry1.setCrc((long) (short) 10);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField39);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setSize((long) 'a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        int int10 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry16.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray19 = zipArchiveEntry16.getExtraFields();
        zipArchiveEntry16.setComment("hi!");
        zipArchiveEntry16.setCrc((long) 0);
        long long24 = zipArchiveEntry16.getSize();
        java.nio.file.attribute.FileTime fileTime25 = zipArchiveEntry16.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry27 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry27.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = zipArchiveEntry27.getExtraFields();
        zipArchiveEntry27.setComment("hi!");
        long long33 = zipArchiveEntry27.getExternalAttributes();
        zipArchiveEntry27.setTime((long) (short) -1);
        boolean boolean36 = zipArchiveEntry27.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry27.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry16.setCreationTime(fileTime37);
        java.util.zip.ZipEntry zipEntry39 = zipArchiveEntry1.setLastAccessTime(fileTime37);
        zipEntry39.setComment("");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNull(fileTime25);
        org.junit.Assert.assertNotNull(zipExtraFieldArray30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry39);
        org.junit.Assert.assertEquals(zipEntry39.toString(), "hi!");
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        java.lang.String str9 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        long long38 = zipEntry37.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        zipArchiveEntry9.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry9.getExtraFields();
        java.nio.file.attribute.FileTime fileTime15 = zipArchiveEntry9.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry16 = zipArchiveEntry1.setCreationTime(fileTime15);
        long long17 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertNotNull(zipEntry16);
        org.junit.Assert.assertEquals(zipEntry16.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry58 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry58.setName("hi!");
        zipArchiveEntry58.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry64 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry64.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray67 = zipArchiveEntry64.getExtraFields();
        zipArchiveEntry64.setComment("hi!");
        zipArchiveEntry64.setInternalAttributes((int) (byte) 10);
        byte[] byteArray72 = zipArchiveEntry64.getCentralDirectoryExtra();
        zipArchiveEntry64.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry76 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry76.setName("hi!");
        zipArchiveEntry76.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray81 = zipArchiveEntry76.getExtraFields();
        java.nio.file.attribute.FileTime fileTime82 = zipArchiveEntry76.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry83 = zipArchiveEntry64.setLastAccessTime(fileTime82);
        java.util.zip.ZipEntry zipEntry84 = zipArchiveEntry58.setLastAccessTime(fileTime82);
        java.util.zip.ZipEntry zipEntry85 = zipArchiveEntry1.setLastModifiedTime(fileTime82);
        boolean boolean86 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray67);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray81);
        org.junit.Assert.assertNotNull(fileTime82);
        org.junit.Assert.assertNotNull(zipEntry83);
        org.junit.Assert.assertEquals(zipEntry83.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry84);
        org.junit.Assert.assertEquals(zipEntry84.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry85);
        org.junit.Assert.assertEquals(zipEntry85.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        int int9 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setComment("hi!");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean7 = zipArchiveEntry6.isDirectory();
        java.util.Date date8 = zipArchiveEntry6.getLastModifiedDate();
        byte[] byteArray9 = zipArchiveEntry6.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry11.setComment("hi!");
        zipArchiveEntry11.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setInternalAttributes((int) (byte) 10);
        int int28 = zipArchiveEntry20.getUnixMode();
        java.lang.String str29 = zipArchiveEntry20.getComment();
        long long30 = zipArchiveEntry20.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        zipArchiveEntry33.setCrc((long) 0);
        long long41 = zipArchiveEntry33.getSize();
        java.nio.file.attribute.FileTime fileTime42 = zipArchiveEntry33.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry44 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry44.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray47 = zipArchiveEntry44.getExtraFields();
        zipArchiveEntry44.setComment("hi!");
        long long50 = zipArchiveEntry44.getExternalAttributes();
        zipArchiveEntry44.setTime((long) (short) -1);
        boolean boolean53 = zipArchiveEntry44.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime54 = zipArchiveEntry44.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry33.setCreationTime(fileTime54);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry31.setLastAccessTime(fileTime54);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry20.setLastModifiedTime(fileTime54);
        byte[] byteArray58 = zipArchiveEntry20.getLocalFileDataExtra();
        zipArchiveEntry11.setExtra(byteArray58);
        zipArchiveEntry6.setExtra(byteArray58);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray58);
        java.nio.file.attribute.FileTime fileTime62 = zipArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(fileTime42);
        org.junit.Assert.assertNotNull(zipExtraFieldArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNull(fileTime62);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setExternalAttributes((long) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime9);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry5 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        int int9 = zipArchiveEntry1.getPlatform();
        byte[] byteArray10 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(byteArray10);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        java.util.Date date4 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setTime(1L);
        int int7 = zipArchiveEntry1.getInternalAttributes();
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 16:00:00 PST 1969");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setExternalAttributes((long) (short) 10);
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray8 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        int int9 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str5 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str3 = zipArchiveEntry1.getName();
        int int4 = zipArchiveEntry1.getInternalAttributes();
        long long5 = zipArchiveEntry1.getSize();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry7 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry7.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry7.getExtraFields();
        zipArchiveEntry7.setComment("hi!");
        zipArchiveEntry7.setInternalAttributes((int) (byte) 10);
        byte[] byteArray15 = zipArchiveEntry7.getCentralDirectoryExtra();
        zipArchiveEntry7.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        zipArchiveEntry19.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = zipArchiveEntry19.getExtraFields();
        java.nio.file.attribute.FileTime fileTime25 = zipArchiveEntry19.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = zipArchiveEntry7.setLastAccessTime(fileTime25);
        java.util.zip.ZipEntry zipEntry27 = zipArchiveEntry1.setLastAccessTime(fileTime25);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        long long35 = zipArchiveEntry29.getSize();
        java.lang.String str36 = zipArchiveEntry29.getName();
        int int37 = zipArchiveEntry29.getMethod();
        byte[] byteArray38 = zipArchiveEntry29.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray38);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort40 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort40);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry27);
        org.junit.Assert.assertEquals(zipEntry27.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        java.lang.Class<?> wildcardClass9 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        long long19 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime(0L);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort22);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6553601L + "'", long19 == 6553601L);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        long long9 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setComment("");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setInternalAttributes((int) (byte) 10);
        int int21 = zipArchiveEntry13.getUnixMode();
        java.lang.String str22 = zipArchiveEntry13.getComment();
        long long23 = zipArchiveEntry13.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry26.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = zipArchiveEntry26.getExtraFields();
        zipArchiveEntry26.setComment("hi!");
        zipArchiveEntry26.setCrc((long) 0);
        long long34 = zipArchiveEntry26.getSize();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry26.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        long long43 = zipArchiveEntry37.getExternalAttributes();
        zipArchiveEntry37.setTime((long) (short) -1);
        boolean boolean46 = zipArchiveEntry37.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime47 = zipArchiveEntry37.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry48 = zipArchiveEntry26.setCreationTime(fileTime47);
        java.util.zip.ZipEntry zipEntry49 = zipArchiveEntry24.setLastAccessTime(fileTime47);
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry13.setLastModifiedTime(fileTime47);
        byte[] byteArray51 = zipArchiveEntry13.getLocalFileDataExtra();
        byte[] byteArray52 = zipArchiveEntry13.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry54 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry54.setName("hi!");
        zipArchiveEntry54.setTime((long) (-1));
        boolean boolean59 = zipArchiveEntry54.isDirectory();
        boolean boolean60 = zipArchiveEntry54.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry62 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry62.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray65 = zipArchiveEntry62.getExtraFields();
        zipArchiveEntry62.setComment("hi!");
        long long68 = zipArchiveEntry62.getSize();
        java.lang.String str69 = zipArchiveEntry62.getName();
        int int70 = zipArchiveEntry62.getMethod();
        byte[] byteArray71 = zipArchiveEntry62.getLocalFileDataExtra();
        zipArchiveEntry54.setCentralDirectoryExtra(byteArray71);
        java.lang.String str73 = zipArchiveEntry54.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray74 = zipArchiveEntry54.getExtraFields();
        zipArchiveEntry13.setExtraFields(zipExtraFieldArray74);
        java.lang.String str76 = zipArchiveEntry13.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry78 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry78.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray81 = zipArchiveEntry78.getExtraFields();
        zipArchiveEntry78.setComment("hi!");
        zipArchiveEntry78.setInternalAttributes((int) (byte) 10);
        byte[] byteArray86 = zipArchiveEntry78.getCentralDirectoryExtra();
        zipArchiveEntry78.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry90 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry90.setName("hi!");
        zipArchiveEntry90.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray95 = zipArchiveEntry90.getExtraFields();
        java.nio.file.attribute.FileTime fileTime96 = zipArchiveEntry90.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry97 = zipArchiveEntry78.setLastAccessTime(fileTime96);
        java.util.zip.ZipEntry zipEntry98 = zipArchiveEntry13.setLastModifiedTime(fileTime96);
        java.util.zip.ZipEntry zipEntry99 = zipArchiveEntry1.setLastAccessTime(fileTime96);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(fileTime35);
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileTime47);
        org.junit.Assert.assertNotNull(zipEntry48);
        org.junit.Assert.assertEquals(zipEntry48.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry49);
        org.junit.Assert.assertEquals(zipEntry49.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray81);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray95);
        org.junit.Assert.assertNotNull(fileTime96);
        org.junit.Assert.assertNotNull(zipEntry97);
        org.junit.Assert.assertEquals(zipEntry97.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry98);
        org.junit.Assert.assertEquals(zipEntry98.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry99);
        org.junit.Assert.assertEquals(zipEntry99.toString(), "");
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        java.util.Date date17 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        int int10 = zipArchiveEntry1.getPlatform();
        long long11 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setName("hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean21 = zipArchiveEntry1.isDirectory();
        boolean boolean22 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        java.util.Date date24 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = zipArchiveEntry1.getExtraField(zipShort12);
        java.lang.String str14 = zipArchiveEntry1.getName();
        java.lang.Class<?> wildcardClass15 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(zipExtraField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        boolean boolean22 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setUnixMode((int) '4');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(fileTime8);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        boolean boolean24 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        long long13 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        zipArchiveEntry1.setCrc((long) 'a');
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCentralDirectoryExtra(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(zipExtraField6);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean14 = zipArchiveEntry13.isDirectory();
        java.util.Date date15 = zipArchiveEntry13.getLastModifiedDate();
        byte[] byteArray16 = zipArchiveEntry13.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry27 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry27.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = zipArchiveEntry27.getExtraFields();
        zipArchiveEntry27.setComment("hi!");
        zipArchiveEntry27.setInternalAttributes((int) (byte) 10);
        int int35 = zipArchiveEntry27.getUnixMode();
        java.lang.String str36 = zipArchiveEntry27.getComment();
        long long37 = zipArchiveEntry27.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry38 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry40 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry40.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray43 = zipArchiveEntry40.getExtraFields();
        zipArchiveEntry40.setComment("hi!");
        zipArchiveEntry40.setCrc((long) 0);
        long long48 = zipArchiveEntry40.getSize();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry40.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry51 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry51.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray54 = zipArchiveEntry51.getExtraFields();
        zipArchiveEntry51.setComment("hi!");
        long long57 = zipArchiveEntry51.getExternalAttributes();
        zipArchiveEntry51.setTime((long) (short) -1);
        boolean boolean60 = zipArchiveEntry51.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime61 = zipArchiveEntry51.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry62 = zipArchiveEntry40.setCreationTime(fileTime61);
        java.util.zip.ZipEntry zipEntry63 = zipArchiveEntry38.setLastAccessTime(fileTime61);
        java.util.zip.ZipEntry zipEntry64 = zipArchiveEntry27.setLastModifiedTime(fileTime61);
        byte[] byteArray65 = zipArchiveEntry27.getLocalFileDataExtra();
        zipArchiveEntry18.setExtra(byteArray65);
        zipArchiveEntry13.setExtra(byteArray65);
        zipArchiveEntry1.setExtra(byteArray65);
        zipArchiveEntry1.setSize((long) 8);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(zipExtraFieldArray30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNull(fileTime49);
        org.junit.Assert.assertNotNull(zipExtraFieldArray54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fileTime61);
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry63);
        org.junit.Assert.assertEquals(zipEntry63.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry64);
        org.junit.Assert.assertEquals(zipEntry64.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        java.lang.String str7 = zipArchiveEntry1.getName();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.lang.Class<?> wildcardClass9 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        long long12 = zipArchiveEntry6.getSize();
        java.lang.String str13 = zipArchiveEntry6.getName();
        int int14 = zipArchiveEntry6.getMethod();
        byte[] byteArray15 = zipArchiveEntry6.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray15);
        byte[] byteArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtra(byteArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        byte[] byteArray10 = zipArchiveEntry1.getLocalFileDataExtra();
        long long11 = zipArchiveEntry1.getExternalAttributes();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setSize((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry size");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        java.lang.String str13 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        byte[] byteArray12 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry8.getExtraFields();
        zipArchiveEntry8.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime14 = zipArchiveEntry8.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry16.setName("hi!");
        zipArchiveEntry16.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry16.getExtraFields();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry16.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry23 = zipArchiveEntry8.setCreationTime(fileTime22);
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry1.setLastModifiedTime(fileTime22);
        zipEntry24.setCrc((long) 3);
        java.nio.file.attribute.FileTime fileTime27 = zipEntry24.getLastAccessTime();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNull(fileTime14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry23);
        org.junit.Assert.assertEquals(zipEntry23.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNull(fileTime27);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        zipArchiveEntry1.setComment("");
        zipArchiveEntry1.setInternalAttributes(0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        int int6 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        int int7 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        zipArchiveEntry9.setInternalAttributes((int) (byte) 10);
        int int17 = zipArchiveEntry9.getUnixMode();
        java.lang.String str18 = zipArchiveEntry9.getComment();
        long long19 = zipArchiveEntry9.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = zipArchiveEntry22.getExtraFields();
        zipArchiveEntry22.setComment("hi!");
        zipArchiveEntry22.setCrc((long) 0);
        long long30 = zipArchiveEntry22.getSize();
        java.nio.file.attribute.FileTime fileTime31 = zipArchiveEntry22.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        long long39 = zipArchiveEntry33.getExternalAttributes();
        zipArchiveEntry33.setTime((long) (short) -1);
        boolean boolean42 = zipArchiveEntry33.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime43 = zipArchiveEntry33.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry44 = zipArchiveEntry22.setCreationTime(fileTime43);
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry20.setLastAccessTime(fileTime43);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry9.setLastModifiedTime(fileTime43);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry1.setLastAccessTime(fileTime43);
        zipArchiveEntry1.setSize((long) (short) 1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort50 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField51 = zipArchiveEntry1.getExtraField(zipShort50);
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(fileTime31);
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime43);
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField51);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry1.getExtraFields();
        java.lang.Object obj14 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "hi!");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean21 = zipArchiveEntry1.isDirectory();
        boolean boolean22 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        java.lang.String str24 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = zipArchiveEntry1.getExtraField(zipShort12);
        java.lang.String str14 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setSize((long) (short) 0);
        int int17 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(zipExtraField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = zipArchiveEntry1.getExtraField(zipShort7);
        long long9 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        java.util.Date date5 = zipArchiveEntry1.getLastModifiedDate();
        java.util.Date date6 = zipArchiveEntry1.getLastModifiedDate();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setMethod((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExternalAttributes(10L);
        zipArchiveEntry1.setCrc((long) (short) 100);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        java.nio.file.attribute.FileTime fileTime12 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(fileTime12);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        long long17 = zipArchiveEntry1.getExternalAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        java.lang.Class<?> wildcardClass13 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        boolean boolean16 = zipArchiveEntry1.equals((java.lang.Object) long15);
        zipArchiveEntry1.setCompressedSize((long) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        int int10 = zipArchiveEntry1.getUnixMode();
        long long11 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        zipArchiveEntry13.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry13.getExtraFields();
        java.nio.file.attribute.FileTime fileTime19 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry20 = zipArchiveEntry1.setLastAccessTime(fileTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipEntry20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(zipEntry20);
        org.junit.Assert.assertEquals(zipEntry20.toString(), "hi!");
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        java.lang.Object obj7 = zipArchiveEntry1.clone();
        byte[] byteArray8 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "hi!");
        org.junit.Assert.assertNull(byteArray8);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = zipArchiveEntry1.getExtraField(zipShort12);
        java.lang.String str14 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(zipExtraField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        boolean boolean26 = zipArchiveEntry0.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime27 = zipArchiveEntry0.getCreationTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(fileTime27);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = zipArchiveEntry1.getExtraField(zipShort18);
        zipArchiveEntry1.setComment("");
        zipArchiveEntry1.setPlatform((int) (byte) 100);
        int int24 = zipArchiveEntry1.getInternalAttributes();
        java.nio.file.attribute.FileTime fileTime25 = zipArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(fileTime25);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        boolean boolean13 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int14 = zipArchiveEntry1.getUnixMode();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry58 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry58.setName("hi!");
        zipArchiveEntry58.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry64 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry64.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray67 = zipArchiveEntry64.getExtraFields();
        zipArchiveEntry64.setComment("hi!");
        zipArchiveEntry64.setInternalAttributes((int) (byte) 10);
        byte[] byteArray72 = zipArchiveEntry64.getCentralDirectoryExtra();
        zipArchiveEntry64.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry76 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry76.setName("hi!");
        zipArchiveEntry76.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray81 = zipArchiveEntry76.getExtraFields();
        java.nio.file.attribute.FileTime fileTime82 = zipArchiveEntry76.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry83 = zipArchiveEntry64.setLastAccessTime(fileTime82);
        java.util.zip.ZipEntry zipEntry84 = zipArchiveEntry58.setLastAccessTime(fileTime82);
        java.util.zip.ZipEntry zipEntry85 = zipArchiveEntry1.setLastModifiedTime(fileTime82);
        zipArchiveEntry1.setUnixMode((int) '4');
        java.lang.String str88 = zipArchiveEntry1.getComment();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray67);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray81);
        org.junit.Assert.assertNotNull(fileTime82);
        org.junit.Assert.assertNotNull(zipEntry83);
        org.junit.Assert.assertEquals(zipEntry83.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry84);
        org.junit.Assert.assertEquals(zipEntry84.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry85);
        org.junit.Assert.assertEquals(zipEntry85.toString(), "");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getTime();
        zipArchiveEntry0.setSize((long) 0);
        zipArchiveEntry0.setPlatform(10);
        java.lang.String str31 = zipArchiveEntry0.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField39 = zipArchiveEntry1.getExtraField(zipShort38);
        zipArchiveEntry1.setCrc((long) (byte) 0);
        java.lang.String str42 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry44 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry44.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray47 = zipArchiveEntry44.getExtraFields();
        zipArchiveEntry44.setComment("hi!");
        long long50 = zipArchiveEntry44.getExternalAttributes();
        zipArchiveEntry44.setTime((long) (short) -1);
        boolean boolean53 = zipArchiveEntry44.isSupportedCompressionMethod();
        byte[] byteArray54 = zipArchiveEntry44.getExtra();
        long long55 = zipArchiveEntry44.getSize();
        long long56 = zipArchiveEntry44.getExternalAttributes();
        java.lang.String str57 = zipArchiveEntry44.getComment();
        java.lang.String str58 = zipArchiveEntry44.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry60 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean61 = zipArchiveEntry60.isDirectory();
        int int62 = zipArchiveEntry60.getUnixMode();
        boolean boolean63 = zipArchiveEntry60.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry65 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry65.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray68 = zipArchiveEntry65.getExtraFields();
        zipArchiveEntry60.setExtraFields(zipExtraFieldArray68);
        zipArchiveEntry44.setExtraFields(zipExtraFieldArray68);
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray68);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray68);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        long long39 = zipEntry38.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setSize(10L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str3 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setMethod(0);
        int int6 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setTime((long) (short) 10);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setComment("");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = zipArchiveEntry1.getExtraField(zipShort8);
        byte[] byteArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtra(byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNull(zipExtraField9);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        zipArchiveEntry10.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray15);
        long long17 = zipArchiveEntry1.getSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
        java.lang.Class<?> wildcardClass11 = zipArchiveEntry10.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        long long10 = zipArchiveEntry1.getCrc();
        int int11 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setComment("");
        zipArchiveEntry1.setTime((long) (-1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setTime(0L);
        int int13 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry8.getLastAccessTime();
        long long12 = zipArchiveEntry8.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry8.getCreationTime();
        byte[] byteArray14 = zipArchiveEntry8.getCentralDirectoryExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        int int9 = zipArchiveEntry1.getPlatform();
        byte[] byteArray10 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        java.lang.Object obj10 = zipArchiveEntry1.clone();
        long long11 = zipArchiveEntry1.getCrc();
        byte[] byteArray12 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(byteArray12);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        long long12 = zipArchiveEntry1.getSize();
        long long13 = zipArchiveEntry1.getExternalAttributes();
        java.lang.String str14 = zipArchiveEntry1.getComment();
        java.lang.String str15 = zipArchiveEntry1.getName();
        long long16 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCompressedSize(0L);
        java.lang.String str19 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        java.lang.String str11 = zipArchiveEntry1.getComment();
        long long12 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        java.lang.Object obj9 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setTime((long) 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "hi!");
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        boolean boolean9 = zipArchiveEntry1.isDirectory();
        java.lang.Class<?> wildcardClass10 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        java.nio.file.attribute.FileTime fileTime15 = zipArchiveEntry12.getLastAccessTime();
        long long16 = zipArchiveEntry12.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry12.getCreationTime();
        byte[] byteArray18 = zipArchiveEntry12.getCentralDirectoryExtra();
        zipArchiveEntry1.setExtra(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean22 = zipArchiveEntry21.isDirectory();
        int int23 = zipArchiveEntry21.getUnixMode();
        java.lang.Object obj24 = zipArchiveEntry21.clone();
        zipArchiveEntry21.setExtra();
        long long26 = zipArchiveEntry21.getSize();
        boolean boolean27 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry21);
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setMethod((int) ' ');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setComment("hi!");
        long long12 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        java.lang.String str12 = zipArchiveEntry1.getComment();
        zipArchiveEntry1.setTime((long) '#');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setExternalAttributes(100L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry8.getLastAccessTime();
        long long12 = zipArchiveEntry8.getExternalAttributes();
        long long13 = zipArchiveEntry8.getCrc();
        boolean boolean14 = zipArchiveEntry8.isDirectory();
        java.lang.Object obj15 = zipArchiveEntry8.clone();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setCrc((long) 0);
        long long26 = zipArchiveEntry18.getSize();
        java.nio.file.attribute.FileTime fileTime27 = zipArchiveEntry18.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        long long35 = zipArchiveEntry29.getExternalAttributes();
        zipArchiveEntry29.setTime((long) (short) -1);
        boolean boolean38 = zipArchiveEntry29.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime39 = zipArchiveEntry29.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry40 = zipArchiveEntry18.setCreationTime(fileTime39);
        java.util.zip.ZipEntry zipEntry41 = zipArchiveEntry16.setLastAccessTime(fileTime39);
        boolean boolean42 = zipArchiveEntry16.isSupportedCompressionMethod();
        zipArchiveEntry16.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry45 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry47 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry47.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray50 = zipArchiveEntry47.getExtraFields();
        zipArchiveEntry47.setComment("hi!");
        zipArchiveEntry47.setCrc((long) 0);
        long long55 = zipArchiveEntry47.getSize();
        java.nio.file.attribute.FileTime fileTime56 = zipArchiveEntry47.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry58 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry58.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray61 = zipArchiveEntry58.getExtraFields();
        zipArchiveEntry58.setComment("hi!");
        long long64 = zipArchiveEntry58.getExternalAttributes();
        zipArchiveEntry58.setTime((long) (short) -1);
        boolean boolean67 = zipArchiveEntry58.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime68 = zipArchiveEntry58.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry69 = zipArchiveEntry47.setCreationTime(fileTime68);
        java.util.zip.ZipEntry zipEntry70 = zipArchiveEntry45.setLastAccessTime(fileTime68);
        java.util.zip.ZipEntry zipEntry71 = zipArchiveEntry16.setCreationTime(fileTime68);
        java.util.zip.ZipEntry zipEntry72 = zipArchiveEntry8.setCreationTime(fileTime68);
        java.util.zip.ZipEntry zipEntry73 = zipArchiveEntry1.setCreationTime(fileTime68);
        zipEntry73.setCompressedSize(0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(fileTime27);
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileTime39);
        org.junit.Assert.assertNotNull(zipEntry40);
        org.junit.Assert.assertEquals(zipEntry40.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry41);
        org.junit.Assert.assertEquals(zipEntry41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNull(fileTime56);
        org.junit.Assert.assertNotNull(zipExtraFieldArray61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertNotNull(zipEntry69);
        org.junit.Assert.assertEquals(zipEntry69.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry70);
        org.junit.Assert.assertEquals(zipEntry70.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry71);
        org.junit.Assert.assertEquals(zipEntry71.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry72);
        org.junit.Assert.assertEquals(zipEntry72.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry73);
        org.junit.Assert.assertEquals(zipEntry73.toString(), "");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = zipArchiveEntry1.getExtraField(zipShort7);
        byte[] byteArray9 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        long long3 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setCompressedSize((long) (byte) 100);
        int int6 = zipArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        int int9 = zipArchiveEntry1.getUnixMode();
        zipArchiveEntry1.setUnixMode((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = zipArchiveEntry1.getExtraField(zipShort12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(zipExtraField13);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setCrc((long) (short) 10);
        boolean boolean8 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        java.lang.String str6 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastAccessTime();
        int int9 = zipArchiveEntry1.getPlatform();
        long long10 = zipArchiveEntry1.getCompressedSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setCompressedSize((long) (byte) 0);
        long long15 = zipArchiveEntry12.getTime();
        zipArchiveEntry12.setExternalAttributes(100L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry19.getLastAccessTime();
        long long23 = zipArchiveEntry19.getExternalAttributes();
        long long24 = zipArchiveEntry19.getCrc();
        boolean boolean25 = zipArchiveEntry19.isDirectory();
        java.lang.Object obj26 = zipArchiveEntry19.clone();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry27 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        zipArchiveEntry29.setCrc((long) 0);
        long long37 = zipArchiveEntry29.getSize();
        java.nio.file.attribute.FileTime fileTime38 = zipArchiveEntry29.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry40 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry40.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray43 = zipArchiveEntry40.getExtraFields();
        zipArchiveEntry40.setComment("hi!");
        long long46 = zipArchiveEntry40.getExternalAttributes();
        zipArchiveEntry40.setTime((long) (short) -1);
        boolean boolean49 = zipArchiveEntry40.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime50 = zipArchiveEntry40.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry29.setCreationTime(fileTime50);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry27.setLastAccessTime(fileTime50);
        boolean boolean53 = zipArchiveEntry27.isSupportedCompressionMethod();
        zipArchiveEntry27.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry56 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry58 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry58.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray61 = zipArchiveEntry58.getExtraFields();
        zipArchiveEntry58.setComment("hi!");
        zipArchiveEntry58.setCrc((long) 0);
        long long66 = zipArchiveEntry58.getSize();
        java.nio.file.attribute.FileTime fileTime67 = zipArchiveEntry58.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry69 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry69.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray72 = zipArchiveEntry69.getExtraFields();
        zipArchiveEntry69.setComment("hi!");
        long long75 = zipArchiveEntry69.getExternalAttributes();
        zipArchiveEntry69.setTime((long) (short) -1);
        boolean boolean78 = zipArchiveEntry69.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime79 = zipArchiveEntry69.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry80 = zipArchiveEntry58.setCreationTime(fileTime79);
        java.util.zip.ZipEntry zipEntry81 = zipArchiveEntry56.setLastAccessTime(fileTime79);
        java.util.zip.ZipEntry zipEntry82 = zipArchiveEntry27.setCreationTime(fileTime79);
        java.util.zip.ZipEntry zipEntry83 = zipArchiveEntry19.setCreationTime(fileTime79);
        java.util.zip.ZipEntry zipEntry84 = zipArchiveEntry12.setCreationTime(fileTime79);
        java.util.zip.ZipEntry zipEntry85 = zipArchiveEntry1.setLastAccessTime(fileTime79);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort86 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort86);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNull(fileTime38);
        org.junit.Assert.assertNotNull(zipExtraFieldArray43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(fileTime50);
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNull(fileTime67);
        org.junit.Assert.assertNotNull(zipExtraFieldArray72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(fileTime79);
        org.junit.Assert.assertNotNull(zipEntry80);
        org.junit.Assert.assertEquals(zipEntry80.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry81);
        org.junit.Assert.assertEquals(zipEntry81.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry82);
        org.junit.Assert.assertEquals(zipEntry82.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry83);
        org.junit.Assert.assertEquals(zipEntry83.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry84);
        org.junit.Assert.assertEquals(zipEntry84.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry85);
        org.junit.Assert.assertEquals(zipEntry85.toString(), "hi!");
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getTime();
        long long27 = zipArchiveEntry0.getSize();
        zipArchiveEntry0.setCrc((long) 3);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry0.setExtraFields(zipExtraFieldArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setExtra();
        java.lang.Class<?> wildcardClass11 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        java.util.Date date7 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setCrc(10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setInternalAttributes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addAsFirstExtraField(zipExtraField6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        long long3 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setInternalAttributes((int) 'a');
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry1.getExtraFields();
        java.lang.String str14 = zipArchiveEntry1.getComment();
        long long15 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExternalAttributes(10L);
        java.lang.String str10 = zipArchiveEntry1.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.lang.String str9 = zipArchiveEntry1.getName();
        java.lang.Class<?> wildcardClass10 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        long long12 = zipArchiveEntry1.getSize();
        long long13 = zipArchiveEntry1.getExternalAttributes();
        java.lang.String str14 = zipArchiveEntry1.getComment();
        java.lang.String str15 = zipArchiveEntry1.getName();
        int int16 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry1.getCreationTime();
        long long14 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 100);
        long long17 = zipArchiveEntry1.getExternalAttributes();
        long long18 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(fileTime17);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        boolean boolean6 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        zipArchiveEntry1.setComment("");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        long long11 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setComment("");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int5 = zipArchiveEntry1.getPlatform();
        java.lang.Object obj6 = zipArchiveEntry1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setSize(97L);
        java.util.Date date11 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setTime((long) 3);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = zipArchiveEntry1.getExtraField(zipShort9);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = zipArchiveEntry1.getExtraField(zipShort11);
        zipArchiveEntry1.setMethod((int) (short) 100);
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(zipExtraField10);
        org.junit.Assert.assertNull(zipExtraField12);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        boolean boolean1 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.setMethod((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry5 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry5.setName("hi!");
        zipArchiveEntry5.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry5.getExtraFields();
        int int11 = zipArchiveEntry5.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setInternalAttributes((int) (byte) 10);
        int int21 = zipArchiveEntry13.getUnixMode();
        java.lang.String str22 = zipArchiveEntry13.getComment();
        long long23 = zipArchiveEntry13.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry26.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = zipArchiveEntry26.getExtraFields();
        zipArchiveEntry26.setComment("hi!");
        zipArchiveEntry26.setCrc((long) 0);
        long long34 = zipArchiveEntry26.getSize();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry26.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        long long43 = zipArchiveEntry37.getExternalAttributes();
        zipArchiveEntry37.setTime((long) (short) -1);
        boolean boolean46 = zipArchiveEntry37.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime47 = zipArchiveEntry37.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry48 = zipArchiveEntry26.setCreationTime(fileTime47);
        java.util.zip.ZipEntry zipEntry49 = zipArchiveEntry24.setLastAccessTime(fileTime47);
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry13.setLastModifiedTime(fileTime47);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry5.setLastAccessTime(fileTime47);
        zipArchiveEntry5.setSize((long) (short) 1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry55 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry55.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray58 = zipArchiveEntry55.getExtraFields();
        zipArchiveEntry55.setComment("hi!");
        long long61 = zipArchiveEntry55.getExternalAttributes();
        zipArchiveEntry55.setTime((long) (short) -1);
        boolean boolean64 = zipArchiveEntry55.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime65 = zipArchiveEntry55.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry66 = zipArchiveEntry5.setCreationTime(fileTime65);
        java.util.zip.ZipEntry zipEntry67 = zipArchiveEntry0.setCreationTime(fileTime65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(fileTime35);
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileTime47);
        org.junit.Assert.assertNotNull(zipEntry48);
        org.junit.Assert.assertEquals(zipEntry48.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry49);
        org.junit.Assert.assertEquals(zipEntry49.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(fileTime65);
        org.junit.Assert.assertNotNull(zipEntry66);
        org.junit.Assert.assertEquals(zipEntry66.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry67);
        org.junit.Assert.assertEquals(zipEntry67.toString(), "");
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        long long19 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime(0L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray26);
        java.util.Date date28 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6553601L + "'", long19 == 6553601L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 16:00:00 PST 1969");
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        java.util.Date date7 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setCrc(0L);
        java.util.Date date10 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setMethod(0);
        java.lang.Object obj58 = zipArchiveEntry1.clone();
        java.lang.String str59 = zipArchiveEntry1.getComment();
        zipArchiveEntry1.setCrc((long) (short) 0);
        zipArchiveEntry1.setTime(0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int5 = zipArchiveEntry1.getPlatform();
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        byte[] byteArray8 = zipArchiveEntry1.getLocalFileDataExtra();
        int int9 = zipArchiveEntry1.getMethod();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        boolean boolean16 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setInternalAttributes((int) (byte) 10);
        int int26 = zipArchiveEntry18.getUnixMode();
        java.lang.String str27 = zipArchiveEntry18.getComment();
        long long28 = zipArchiveEntry18.getSize();
        boolean boolean29 = zipArchiveEntry18.isSupportedCompressionMethod();
        java.lang.String str30 = zipArchiveEntry18.getComment();
        zipArchiveEntry18.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime33 = zipArchiveEntry18.getLastAccessTime();
        byte[] byteArray34 = zipArchiveEntry18.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setSize((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry size");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(fileTime33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        java.lang.String str21 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setExtra();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField24 = zipArchiveEntry1.getExtraField(zipShort23);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(zipExtraField24);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        long long5 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        java.util.Date date7 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setCrc(0L);
        java.lang.Object obj10 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry7 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry7.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry7.getExtraFields();
        zipArchiveEntry7.setComment("hi!");
        zipArchiveEntry7.setInternalAttributes((int) (byte) 10);
        int int15 = zipArchiveEntry7.getUnixMode();
        java.lang.String str16 = zipArchiveEntry7.getComment();
        long long17 = zipArchiveEntry7.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setCrc((long) 0);
        long long28 = zipArchiveEntry20.getSize();
        java.nio.file.attribute.FileTime fileTime29 = zipArchiveEntry20.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry31.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray34 = zipArchiveEntry31.getExtraFields();
        zipArchiveEntry31.setComment("hi!");
        long long37 = zipArchiveEntry31.getExternalAttributes();
        zipArchiveEntry31.setTime((long) (short) -1);
        boolean boolean40 = zipArchiveEntry31.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime41 = zipArchiveEntry31.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry42 = zipArchiveEntry20.setCreationTime(fileTime41);
        java.util.zip.ZipEntry zipEntry43 = zipArchiveEntry18.setLastAccessTime(fileTime41);
        java.util.zip.ZipEntry zipEntry44 = zipArchiveEntry7.setLastModifiedTime(fileTime41);
        byte[] byteArray45 = zipArchiveEntry7.getLocalFileDataExtra();
        byte[] byteArray46 = zipArchiveEntry7.getLocalFileDataExtra();
        int int47 = zipArchiveEntry7.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray48 = zipArchiveEntry7.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray48);
        java.lang.Class<?> wildcardClass50 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(fileTime29);
        org.junit.Assert.assertNotNull(zipExtraFieldArray34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(zipEntry42);
        org.junit.Assert.assertEquals(zipEntry42.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry43);
        org.junit.Assert.assertEquals(zipEntry43.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setCrc((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime16 = zipArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = zipArchiveEntry1.getExtraField(zipShort17);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNull(zipExtraField18);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExtra();
        zipArchiveEntry1.setMethod((int) '#');
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        int int18 = zipArchiveEntry10.getUnixMode();
        java.lang.String str19 = zipArchiveEntry10.getComment();
        long long20 = zipArchiveEntry10.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        zipArchiveEntry23.setCrc((long) 0);
        long long31 = zipArchiveEntry23.getSize();
        java.nio.file.attribute.FileTime fileTime32 = zipArchiveEntry23.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        long long40 = zipArchiveEntry34.getExternalAttributes();
        zipArchiveEntry34.setTime((long) (short) -1);
        boolean boolean43 = zipArchiveEntry34.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry34.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry23.setCreationTime(fileTime44);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry21.setLastAccessTime(fileTime44);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry10.setLastModifiedTime(fileTime44);
        byte[] byteArray48 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray48);
        byte[] byteArray50 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.String str51 = zipArchiveEntry1.getName();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCrc((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid entry crc-32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(fileTime32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = zipArchiveEntry1.getExtraField(zipShort4);
        java.lang.Class<?> wildcardClass6 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        byte[] byteArray39 = zipArchiveEntry1.getLocalFileDataExtra();
        byte[] byteArray40 = zipArchiveEntry1.getLocalFileDataExtra();
        int int41 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime14 = zipArchiveEntry1.getLastAccessTime();
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setCentralDirectoryExtra(byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(fileTime14);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setName("hi!");
        java.lang.String str12 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setInternalAttributes((int) (byte) 10);
        byte[] byteArray21 = zipArchiveEntry13.getCentralDirectoryExtra();
        zipArchiveEntry13.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        zipArchiveEntry25.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = zipArchiveEntry25.getExtraFields();
        java.nio.file.attribute.FileTime fileTime31 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry32 = zipArchiveEntry13.setLastAccessTime(fileTime31);
        java.util.zip.ZipEntry zipEntry33 = zipArchiveEntry1.setLastModifiedTime(fileTime31);
        int int34 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray30);
        org.junit.Assert.assertNotNull(fileTime31);
        org.junit.Assert.assertNotNull(zipEntry32);
        org.junit.Assert.assertEquals(zipEntry32.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry33);
        org.junit.Assert.assertEquals(zipEntry33.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        boolean boolean26 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry31.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray34 = zipArchiveEntry31.getExtraFields();
        zipArchiveEntry31.setComment("hi!");
        zipArchiveEntry31.setCrc((long) 0);
        long long39 = zipArchiveEntry31.getSize();
        java.nio.file.attribute.FileTime fileTime40 = zipArchiveEntry31.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry42.setComment("hi!");
        long long48 = zipArchiveEntry42.getExternalAttributes();
        zipArchiveEntry42.setTime((long) (short) -1);
        boolean boolean51 = zipArchiveEntry42.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime52 = zipArchiveEntry42.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry53 = zipArchiveEntry31.setCreationTime(fileTime52);
        java.util.zip.ZipEntry zipEntry54 = zipArchiveEntry29.setLastAccessTime(fileTime52);
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry0.setCreationTime(fileTime52);
        zipArchiveEntry0.setComment("hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNull(fileTime40);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fileTime52);
        org.junit.Assert.assertNotNull(zipEntry53);
        org.junit.Assert.assertEquals(zipEntry53.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry54);
        org.junit.Assert.assertEquals(zipEntry54.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "");
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        byte[] byteArray10 = zipArchiveEntry1.getLocalFileDataExtra();
        int int11 = zipArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setInternalAttributes((int) (byte) 10);
        int int21 = zipArchiveEntry13.getUnixMode();
        java.lang.String str22 = zipArchiveEntry13.getComment();
        long long23 = zipArchiveEntry13.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry26.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = zipArchiveEntry26.getExtraFields();
        zipArchiveEntry26.setComment("hi!");
        zipArchiveEntry26.setCrc((long) 0);
        long long34 = zipArchiveEntry26.getSize();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry26.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        long long43 = zipArchiveEntry37.getExternalAttributes();
        zipArchiveEntry37.setTime((long) (short) -1);
        boolean boolean46 = zipArchiveEntry37.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime47 = zipArchiveEntry37.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry48 = zipArchiveEntry26.setCreationTime(fileTime47);
        java.util.zip.ZipEntry zipEntry49 = zipArchiveEntry24.setLastAccessTime(fileTime47);
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry13.setLastModifiedTime(fileTime47);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry1.setLastAccessTime(fileTime47);
        zipArchiveEntry1.setName("");
        byte[] byteArray54 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setCompressedSize(100L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(fileTime35);
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileTime47);
        org.junit.Assert.assertNotNull(zipEntry48);
        org.junit.Assert.assertEquals(zipEntry48.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry49);
        org.junit.Assert.assertEquals(zipEntry49.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.Object obj4 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setCrc(100L);
        zipArchiveEntry1.setPlatform((int) (byte) 0);
        int int9 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str3 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setSize((long) (byte) 100);
        zipArchiveEntry1.setTime(1L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        long long12 = zipArchiveEntry9.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField14 = zipArchiveEntry9.getExtraField(zipShort13);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry16.setName("hi!");
        zipArchiveEntry16.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry16.getExtraFields();
        int int22 = zipArchiveEntry16.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        zipArchiveEntry24.setInternalAttributes((int) (byte) 10);
        int int32 = zipArchiveEntry24.getUnixMode();
        java.lang.String str33 = zipArchiveEntry24.getComment();
        long long34 = zipArchiveEntry24.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        zipArchiveEntry37.setCrc((long) 0);
        long long45 = zipArchiveEntry37.getSize();
        java.nio.file.attribute.FileTime fileTime46 = zipArchiveEntry37.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry48 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry48.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray51 = zipArchiveEntry48.getExtraFields();
        zipArchiveEntry48.setComment("hi!");
        long long54 = zipArchiveEntry48.getExternalAttributes();
        zipArchiveEntry48.setTime((long) (short) -1);
        boolean boolean57 = zipArchiveEntry48.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime58 = zipArchiveEntry48.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry37.setCreationTime(fileTime58);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry35.setLastAccessTime(fileTime58);
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry24.setLastModifiedTime(fileTime58);
        java.util.zip.ZipEntry zipEntry62 = zipArchiveEntry16.setLastAccessTime(fileTime58);
        zipArchiveEntry16.setSize((long) (short) 1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry66 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry66.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray69 = zipArchiveEntry66.getExtraFields();
        zipArchiveEntry66.setComment("hi!");
        long long72 = zipArchiveEntry66.getExternalAttributes();
        zipArchiveEntry66.setTime((long) (short) -1);
        boolean boolean75 = zipArchiveEntry66.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime76 = zipArchiveEntry66.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry77 = zipArchiveEntry16.setCreationTime(fileTime76);
        java.util.zip.ZipEntry zipEntry78 = zipArchiveEntry9.setCreationTime(fileTime76);
        java.util.zip.ZipEntry zipEntry79 = zipArchiveEntry1.setLastAccessTime(fileTime76);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry81 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry81.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray84 = zipArchiveEntry81.getExtraFields();
        zipArchiveEntry81.setComment("hi!");
        zipArchiveEntry81.setInternalAttributes((int) (byte) 10);
        int int89 = zipArchiveEntry81.getUnixMode();
        java.lang.String str90 = zipArchiveEntry81.getComment();
        long long91 = zipArchiveEntry81.getSize();
        boolean boolean92 = zipArchiveEntry81.isSupportedCompressionMethod();
        java.lang.String str93 = zipArchiveEntry81.getComment();
        long long94 = zipArchiveEntry81.getExternalAttributes();
        boolean boolean95 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry81);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(zipExtraField14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(fileTime46);
        org.junit.Assert.assertNotNull(zipExtraFieldArray51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fileTime58);
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(fileTime76);
        org.junit.Assert.assertNotNull(zipEntry77);
        org.junit.Assert.assertEquals(zipEntry77.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry78);
        org.junit.Assert.assertEquals(zipEntry78.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry79);
        org.junit.Assert.assertEquals(zipEntry79.toString(), "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        java.lang.String str21 = zipArchiveEntry1.getName();
        boolean boolean22 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        zipArchiveEntry1.setExtra();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        int int8 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = zipArchiveEntry1.getExtraField(zipShort9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(zipExtraField10);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        long long9 = zipArchiveEntry1.getCrc();
        long long10 = zipArchiveEntry1.getTime();
        java.lang.String str11 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setName("hi!");
        long long15 = zipArchiveEntry1.getTime();
        int int16 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry1.getLastAccessTime();
        int int14 = zipArchiveEntry1.getUnixMode();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setSize((long) (byte) 1);
        zipArchiveEntry1.setName("hi!");
        java.util.Date date30 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 16:00:00 PST 1969");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setSize((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        java.nio.file.attribute.FileTime fileTime5 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str6 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setPlatform((int) 'a');
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getCreationTime();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(fileTime9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = zipArchiveEntry1.getExtraField(zipShort18);
        zipArchiveEntry1.setComment("");
        zipArchiveEntry1.setPlatform((int) (byte) 100);
        int int24 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry26.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = zipArchiveEntry26.getExtraFields();
        zipArchiveEntry26.setComment("hi!");
        zipArchiveEntry26.setInternalAttributes((int) (byte) 10);
        int int34 = zipArchiveEntry26.getUnixMode();
        java.lang.String str35 = zipArchiveEntry26.getComment();
        long long36 = zipArchiveEntry26.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        zipArchiveEntry39.setCrc((long) 0);
        long long47 = zipArchiveEntry39.getSize();
        java.nio.file.attribute.FileTime fileTime48 = zipArchiveEntry39.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry50 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry50.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray53 = zipArchiveEntry50.getExtraFields();
        zipArchiveEntry50.setComment("hi!");
        long long56 = zipArchiveEntry50.getExternalAttributes();
        zipArchiveEntry50.setTime((long) (short) -1);
        boolean boolean59 = zipArchiveEntry50.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime60 = zipArchiveEntry50.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry39.setCreationTime(fileTime60);
        java.util.zip.ZipEntry zipEntry62 = zipArchiveEntry37.setLastAccessTime(fileTime60);
        java.util.zip.ZipEntry zipEntry63 = zipArchiveEntry26.setLastModifiedTime(fileTime60);
        boolean boolean64 = zipArchiveEntry26.isDirectory();
        boolean boolean65 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry26);
        java.lang.String str66 = zipArchiveEntry1.getName();
        int int67 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(fileTime48);
        org.junit.Assert.assertNotNull(zipExtraFieldArray53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fileTime60);
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry63);
        org.junit.Assert.assertEquals(zipEntry63.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        int int26 = zipArchiveEntry1.getUnixMode();
        boolean boolean27 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setCrc((long) '#');
        boolean boolean8 = zipArchiveEntry1.equals((java.lang.Object) 1.0d);
        long long9 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode(100);
        zipArchiveEntry1.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray17);
        long long19 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime(0L);
        zipArchiveEntry1.setCompressedSize((long) 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6553601L + "'", long19 == 6553601L);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setName("hi!");
        long long12 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.Object obj8 = null;
        boolean boolean9 = zipArchiveEntry1.equals(obj8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        java.util.Date date5 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setCrc(1L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        int int9 = zipArchiveEntry1.getUnixMode();
        long long10 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setSize((long) (byte) 1);
        boolean boolean28 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry8.getExtraFields();
        zipArchiveEntry8.setComment("hi!");
        zipArchiveEntry8.setCrc((long) 0);
        long long16 = zipArchiveEntry8.getSize();
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry8.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry19.getExtraFields();
        zipArchiveEntry19.setComment("hi!");
        long long25 = zipArchiveEntry19.getExternalAttributes();
        zipArchiveEntry19.setTime((long) (short) -1);
        boolean boolean28 = zipArchiveEntry19.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime29 = zipArchiveEntry19.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry30 = zipArchiveEntry8.setCreationTime(fileTime29);
        java.util.zip.ZipEntry zipEntry31 = zipArchiveEntry6.setLastAccessTime(fileTime29);
        java.util.zip.ZipEntry zipEntry32 = zipArchiveEntry1.setLastAccessTime(fileTime29);
        zipArchiveEntry1.setCompressedSize((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileTime29);
        org.junit.Assert.assertNotNull(zipEntry30);
        org.junit.Assert.assertEquals(zipEntry30.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry31);
        org.junit.Assert.assertEquals(zipEntry31.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry32);
        org.junit.Assert.assertEquals(zipEntry32.toString(), "");
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        boolean boolean9 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setCrc((long) (byte) 10);
        java.nio.file.attribute.FileTime fileTime12 = zipArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(fileTime12);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.util.Date date13 = zipArchiveEntry1.getLastModifiedDate();
        java.util.Date date14 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        boolean boolean10 = zipArchiveEntry1.isSupportedCompressionMethod();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        long long12 = zipArchiveEntry1.getSize();
        long long13 = zipArchiveEntry1.getExternalAttributes();
        java.lang.String str14 = zipArchiveEntry1.getComment();
        java.lang.String str15 = zipArchiveEntry1.getName();
        long long16 = zipArchiveEntry1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry17 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        byte[] byteArray7 = zipArchiveEntry1.getCentralDirectoryExtra();
        java.lang.String str8 = zipArchiveEntry1.toString();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean21 = zipArchiveEntry1.isDirectory();
        boolean boolean22 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.Object obj23 = zipArchiveEntry1.clone();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "hi!");
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        int int10 = zipArchiveEntry1.getPlatform();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry12.setComment("hi!");
        long long18 = zipArchiveEntry12.getExternalAttributes();
        zipArchiveEntry12.setTime((long) (short) -1);
        boolean boolean21 = zipArchiveEntry12.isSupportedCompressionMethod();
        byte[] byteArray22 = zipArchiveEntry12.getExtra();
        long long23 = zipArchiveEntry12.getSize();
        long long24 = zipArchiveEntry12.getExternalAttributes();
        java.lang.String str25 = zipArchiveEntry12.getComment();
        java.lang.String str26 = zipArchiveEntry12.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setCompressedSize((long) (byte) 0);
        zipArchiveEntry28.setCompressedSize(1L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry35.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray38 = zipArchiveEntry35.getExtraFields();
        zipArchiveEntry35.setComment("hi!");
        zipArchiveEntry35.setCrc((long) 0);
        long long43 = zipArchiveEntry35.getSize();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry35.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry46 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry46.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray49 = zipArchiveEntry46.getExtraFields();
        zipArchiveEntry46.setComment("hi!");
        long long52 = zipArchiveEntry46.getExternalAttributes();
        zipArchiveEntry46.setTime((long) (short) -1);
        boolean boolean55 = zipArchiveEntry46.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime56 = zipArchiveEntry46.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry35.setCreationTime(fileTime56);
        java.util.zip.ZipEntry zipEntry58 = zipArchiveEntry33.setLastAccessTime(fileTime56);
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry28.setLastAccessTime(fileTime56);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry12.setCreationTime(fileTime56);
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry1.setLastModifiedTime(fileTime56);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNull(fileTime44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(fileTime56);
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry58);
        org.junit.Assert.assertEquals(zipEntry58.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        int int7 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        zipArchiveEntry9.setInternalAttributes((int) (byte) 10);
        int int17 = zipArchiveEntry9.getUnixMode();
        java.lang.String str18 = zipArchiveEntry9.getComment();
        long long19 = zipArchiveEntry9.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = zipArchiveEntry22.getExtraFields();
        zipArchiveEntry22.setComment("hi!");
        zipArchiveEntry22.setCrc((long) 0);
        long long30 = zipArchiveEntry22.getSize();
        java.nio.file.attribute.FileTime fileTime31 = zipArchiveEntry22.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        long long39 = zipArchiveEntry33.getExternalAttributes();
        zipArchiveEntry33.setTime((long) (short) -1);
        boolean boolean42 = zipArchiveEntry33.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime43 = zipArchiveEntry33.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry44 = zipArchiveEntry22.setCreationTime(fileTime43);
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry20.setLastAccessTime(fileTime43);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry9.setLastModifiedTime(fileTime43);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry1.setLastAccessTime(fileTime43);
        java.lang.Object obj48 = zipArchiveEntry1.clone();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort49 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField50 = zipArchiveEntry1.getExtraField(zipShort49);
        zipArchiveEntry1.setExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(fileTime31);
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime43);
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "hi!");
        org.junit.Assert.assertNull(zipExtraField50);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort20);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        int int5 = zipArchiveEntry1.getUnixMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        zipArchiveEntry25.setInternalAttributes((int) (byte) 10);
        int int33 = zipArchiveEntry25.getUnixMode();
        java.lang.String str34 = zipArchiveEntry25.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        zipArchiveEntry37.setCrc((long) 0);
        long long45 = zipArchiveEntry37.getSize();
        java.nio.file.attribute.FileTime fileTime46 = zipArchiveEntry37.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry48 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry48.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray51 = zipArchiveEntry48.getExtraFields();
        zipArchiveEntry48.setComment("hi!");
        long long54 = zipArchiveEntry48.getExternalAttributes();
        zipArchiveEntry48.setTime((long) (short) -1);
        boolean boolean57 = zipArchiveEntry48.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime58 = zipArchiveEntry48.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry37.setCreationTime(fileTime58);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry35.setLastAccessTime(fileTime58);
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry25.setLastModifiedTime(fileTime58);
        java.util.zip.ZipEntry zipEntry62 = zipArchiveEntry1.setLastAccessTime(fileTime58);
        zipEntry62.setCrc(0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(fileTime46);
        org.junit.Assert.assertNotNull(zipExtraFieldArray51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fileTime58);
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "hi!");
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        long long8 = zipArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        long long16 = zipArchiveEntry10.getExternalAttributes();
        zipArchiveEntry10.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry10.setExtraFields(zipExtraFieldArray23);
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        zipArchiveEntry1.setName("");
        java.lang.String str16 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setSize((long) (byte) 1);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry1.getExtraFields();
        long long29 = zipArchiveEntry1.getTime();
        byte[] byteArray30 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        boolean boolean6 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray7 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray7);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setInternalAttributes((int) 'a');
        long long11 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime12 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(fileTime12);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        long long11 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        zipArchiveEntry11.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry11.getExtraFields();
        int int17 = zipArchiveEntry11.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry19.getExtraFields();
        zipArchiveEntry19.setComment("hi!");
        zipArchiveEntry19.setInternalAttributes((int) (byte) 10);
        int int27 = zipArchiveEntry19.getUnixMode();
        java.lang.String str28 = zipArchiveEntry19.getComment();
        long long29 = zipArchiveEntry19.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry30 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry32.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray35 = zipArchiveEntry32.getExtraFields();
        zipArchiveEntry32.setComment("hi!");
        zipArchiveEntry32.setCrc((long) 0);
        long long40 = zipArchiveEntry32.getSize();
        java.nio.file.attribute.FileTime fileTime41 = zipArchiveEntry32.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry43 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry43.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray46 = zipArchiveEntry43.getExtraFields();
        zipArchiveEntry43.setComment("hi!");
        long long49 = zipArchiveEntry43.getExternalAttributes();
        zipArchiveEntry43.setTime((long) (short) -1);
        boolean boolean52 = zipArchiveEntry43.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime53 = zipArchiveEntry43.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry54 = zipArchiveEntry32.setCreationTime(fileTime53);
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry30.setLastAccessTime(fileTime53);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry19.setLastModifiedTime(fileTime53);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry11.setLastAccessTime(fileTime53);
        java.util.zip.ZipEntry zipEntry58 = zipArchiveEntry1.setLastAccessTime(fileTime53);
        java.nio.file.attribute.FileTime fileTime59 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNull(fileTime41);
        org.junit.Assert.assertNotNull(zipExtraFieldArray46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(zipEntry54);
        org.junit.Assert.assertEquals(zipEntry54.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry58);
        org.junit.Assert.assertEquals(zipEntry58.toString(), "hi!");
        org.junit.Assert.assertNull(fileTime59);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        int int9 = zipArchiveEntry1.getUnixMode();
        zipArchiveEntry1.setUnixMode((int) '4');
        zipArchiveEntry1.setPlatform((int) (short) 1);
        zipArchiveEntry1.setCompressedSize(100L);
        zipArchiveEntry1.setTime(0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        int int11 = zipArchiveEntry1.getInternalAttributes();
        java.lang.Object obj12 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "hi!");
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        boolean boolean20 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean23 = zipArchiveEntry22.isDirectory();
        java.util.Date date24 = zipArchiveEntry22.getLastModifiedDate();
        byte[] byteArray25 = zipArchiveEntry22.getCentralDirectoryExtra();
        boolean boolean26 = zipArchiveEntry22.isDirectory();
        zipArchiveEntry22.setCrc((long) (short) 10);
        boolean boolean29 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry22);
        zipArchiveEntry22.setSize((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        zipArchiveEntry1.setMethod(0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getLastModifiedTime();
        java.lang.Object obj7 = zipArchiveEntry1.clone();
        java.lang.Object obj8 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "hi!");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "hi!");
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = zipArchiveEntry1.getExtraField(zipShort12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(zipExtraField13);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry58 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry58.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray61 = zipArchiveEntry58.getExtraFields();
        zipArchiveEntry58.setComment("hi!");
        long long64 = zipArchiveEntry58.getExternalAttributes();
        zipArchiveEntry58.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry68 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry68.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray71 = zipArchiveEntry68.getExtraFields();
        zipArchiveEntry58.setExtraFields(zipExtraFieldArray71);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry74 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry74.setName("hi!");
        zipArchiveEntry74.setTime((long) (-1));
        boolean boolean79 = zipArchiveEntry74.isDirectory();
        zipArchiveEntry74.setUnixMode(100);
        zipArchiveEntry74.setPlatform(1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry85 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry85.setName("hi!");
        zipArchiveEntry85.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray90 = zipArchiveEntry85.getExtraFields();
        zipArchiveEntry74.setExtraFields(zipExtraFieldArray90);
        zipArchiveEntry58.setExtraFields(zipExtraFieldArray90);
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray90);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort94 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort94);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray90);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        long long4 = zipArchiveEntry1.getTime();
        java.util.Date date5 = zipArchiveEntry1.getLastModifiedDate();
        java.util.Date date6 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setMethod((int) 'a');
        zipArchiveEntry1.setExternalAttributes((long) (byte) 1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = zipArchiveEntry1.getExtraField(zipShort18);
        zipArchiveEntry1.setComment("");
        byte[] byteArray22 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = zipArchiveEntry1.getExtraField(zipShort18);
        long long20 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc((long) 'a');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry8.getExtraFields();
        zipArchiveEntry8.setComment("hi!");
        zipArchiveEntry8.setCrc((long) 0);
        long long16 = zipArchiveEntry8.getSize();
        java.nio.file.attribute.FileTime fileTime17 = zipArchiveEntry8.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry19.getExtraFields();
        zipArchiveEntry19.setComment("hi!");
        long long25 = zipArchiveEntry19.getExternalAttributes();
        zipArchiveEntry19.setTime((long) (short) -1);
        boolean boolean28 = zipArchiveEntry19.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime29 = zipArchiveEntry19.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry30 = zipArchiveEntry8.setCreationTime(fileTime29);
        java.util.zip.ZipEntry zipEntry31 = zipArchiveEntry6.setLastAccessTime(fileTime29);
        java.util.zip.ZipEntry zipEntry32 = zipArchiveEntry1.setLastAccessTime(fileTime29);
        java.lang.String str33 = zipArchiveEntry1.getComment();
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileTime29);
        org.junit.Assert.assertNotNull(zipEntry30);
        org.junit.Assert.assertEquals(zipEntry30.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry31);
        org.junit.Assert.assertEquals(zipEntry31.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry32);
        org.junit.Assert.assertEquals(zipEntry32.toString(), "");
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        zipArchiveEntry0.setComment("hi!");
        zipArchiveEntry0.setInternalAttributes(10);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setComment("hi!");
        java.lang.String str12 = zipArchiveEntry1.getComment();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setTime(0L);
        zipArchiveEntry1.setExternalAttributes((long) 0);
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime3 = zipArchiveEntry1.getCreationTime();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        zipArchiveEntry1.setExternalAttributes((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        java.nio.file.attribute.FileTime fileTime12 = zipArchiveEntry9.getLastAccessTime();
        long long13 = zipArchiveEntry9.getExternalAttributes();
        long long14 = zipArchiveEntry9.getCrc();
        boolean boolean15 = zipArchiveEntry9.isDirectory();
        java.lang.Object obj16 = zipArchiveEntry9.clone();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry17 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry19 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry19.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry19.getExtraFields();
        zipArchiveEntry19.setComment("hi!");
        zipArchiveEntry19.setCrc((long) 0);
        long long27 = zipArchiveEntry19.getSize();
        java.nio.file.attribute.FileTime fileTime28 = zipArchiveEntry19.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry30 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry30.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray33 = zipArchiveEntry30.getExtraFields();
        zipArchiveEntry30.setComment("hi!");
        long long36 = zipArchiveEntry30.getExternalAttributes();
        zipArchiveEntry30.setTime((long) (short) -1);
        boolean boolean39 = zipArchiveEntry30.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime40 = zipArchiveEntry30.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry41 = zipArchiveEntry19.setCreationTime(fileTime40);
        java.util.zip.ZipEntry zipEntry42 = zipArchiveEntry17.setLastAccessTime(fileTime40);
        boolean boolean43 = zipArchiveEntry17.isSupportedCompressionMethod();
        zipArchiveEntry17.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry46 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry48 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry48.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray51 = zipArchiveEntry48.getExtraFields();
        zipArchiveEntry48.setComment("hi!");
        zipArchiveEntry48.setCrc((long) 0);
        long long56 = zipArchiveEntry48.getSize();
        java.nio.file.attribute.FileTime fileTime57 = zipArchiveEntry48.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry59 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry59.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry59.getExtraFields();
        zipArchiveEntry59.setComment("hi!");
        long long65 = zipArchiveEntry59.getExternalAttributes();
        zipArchiveEntry59.setTime((long) (short) -1);
        boolean boolean68 = zipArchiveEntry59.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime69 = zipArchiveEntry59.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry70 = zipArchiveEntry48.setCreationTime(fileTime69);
        java.util.zip.ZipEntry zipEntry71 = zipArchiveEntry46.setLastAccessTime(fileTime69);
        java.util.zip.ZipEntry zipEntry72 = zipArchiveEntry17.setCreationTime(fileTime69);
        java.util.zip.ZipEntry zipEntry73 = zipArchiveEntry9.setCreationTime(fileTime69);
        java.util.zip.ZipEntry zipEntry74 = zipArchiveEntry1.setLastAccessTime(fileTime69);
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(fileTime3);
        org.junit.Assert.assertNull(fileTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(fileTime28);
        org.junit.Assert.assertNotNull(zipExtraFieldArray33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fileTime40);
        org.junit.Assert.assertNotNull(zipEntry41);
        org.junit.Assert.assertEquals(zipEntry41.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry42);
        org.junit.Assert.assertEquals(zipEntry42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNull(fileTime57);
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileTime69);
        org.junit.Assert.assertNotNull(zipEntry70);
        org.junit.Assert.assertEquals(zipEntry70.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry71);
        org.junit.Assert.assertEquals(zipEntry71.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry72);
        org.junit.Assert.assertEquals(zipEntry72.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry73);
        org.junit.Assert.assertEquals(zipEntry73.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry74);
        org.junit.Assert.assertEquals(zipEntry74.toString(), "");
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setCrc((long) 0);
        long long21 = zipArchiveEntry13.getSize();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry13.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry24.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = zipArchiveEntry24.getExtraFields();
        zipArchiveEntry24.setComment("hi!");
        long long30 = zipArchiveEntry24.getExternalAttributes();
        zipArchiveEntry24.setTime((long) (short) -1);
        boolean boolean33 = zipArchiveEntry24.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry24.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry13.setCreationTime(fileTime34);
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry11.setLastAccessTime(fileTime34);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry1.setLastModifiedTime(fileTime34);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField39 = zipArchiveEntry1.getExtraField(zipShort38);
        zipArchiveEntry1.setCrc((long) (byte) 0);
        int int42 = zipArchiveEntry1.getUnixMode();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "hi!");
        org.junit.Assert.assertNull(zipExtraField39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        java.util.Date date56 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort57 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField58 = zipArchiveEntry1.getExtraField(zipShort57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNull(zipExtraField58);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        java.lang.String str9 = zipArchiveEntry1.getName();
        boolean boolean10 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setExternalAttributes(0L);
        zipArchiveEntry1.setMethod(1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        zipArchiveEntry1.setName("");
        java.lang.Class<?> wildcardClass16 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        zipArchiveEntry1.setUnixMode(100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        java.util.Date date7 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNull(byteArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        java.lang.String str11 = zipArchiveEntry1.getComment();
        int int12 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        int int7 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        zipArchiveEntry9.setInternalAttributes((int) (byte) 10);
        int int17 = zipArchiveEntry9.getUnixMode();
        java.lang.String str18 = zipArchiveEntry9.getComment();
        long long19 = zipArchiveEntry9.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = zipArchiveEntry22.getExtraFields();
        zipArchiveEntry22.setComment("hi!");
        zipArchiveEntry22.setCrc((long) 0);
        long long30 = zipArchiveEntry22.getSize();
        java.nio.file.attribute.FileTime fileTime31 = zipArchiveEntry22.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        long long39 = zipArchiveEntry33.getExternalAttributes();
        zipArchiveEntry33.setTime((long) (short) -1);
        boolean boolean42 = zipArchiveEntry33.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime43 = zipArchiveEntry33.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry44 = zipArchiveEntry22.setCreationTime(fileTime43);
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry20.setLastAccessTime(fileTime43);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry9.setLastModifiedTime(fileTime43);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry1.setLastAccessTime(fileTime43);
        int int48 = zipArchiveEntry1.getUnixMode();
        byte[] byteArray49 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(fileTime31);
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime43);
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        boolean boolean5 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setTime((long) 'a');
        zipArchiveEntry1.setName("hi!");
        int int26 = zipArchiveEntry1.getUnixMode();
        zipArchiveEntry1.setSize((long) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        long long9 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setComment("");
        zipArchiveEntry1.setExternalAttributes(0L);
        zipArchiveEntry1.setComment("");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        int int7 = zipArchiveEntry1.getInternalAttributes();
        zipArchiveEntry1.setSize((long) '#');
        zipArchiveEntry1.setCompressedSize(0L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        zipArchiveEntry13.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry13.getExtraFields();
        int int19 = zipArchiveEntry13.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry21.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = zipArchiveEntry21.getExtraFields();
        zipArchiveEntry21.setComment("hi!");
        zipArchiveEntry21.setInternalAttributes((int) (byte) 10);
        int int29 = zipArchiveEntry21.getUnixMode();
        java.lang.String str30 = zipArchiveEntry21.getComment();
        long long31 = zipArchiveEntry21.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        zipArchiveEntry34.setCrc((long) 0);
        long long42 = zipArchiveEntry34.getSize();
        java.nio.file.attribute.FileTime fileTime43 = zipArchiveEntry34.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry45 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry45.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray48 = zipArchiveEntry45.getExtraFields();
        zipArchiveEntry45.setComment("hi!");
        long long51 = zipArchiveEntry45.getExternalAttributes();
        zipArchiveEntry45.setTime((long) (short) -1);
        boolean boolean54 = zipArchiveEntry45.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime55 = zipArchiveEntry45.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry34.setCreationTime(fileTime55);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry32.setLastAccessTime(fileTime55);
        java.util.zip.ZipEntry zipEntry58 = zipArchiveEntry21.setLastModifiedTime(fileTime55);
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry13.setLastAccessTime(fileTime55);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry1.setCreationTime(fileTime55);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNull(fileTime43);
        org.junit.Assert.assertNotNull(zipExtraFieldArray48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fileTime55);
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry58);
        org.junit.Assert.assertEquals(zipEntry58.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "hi!");
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        int int23 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray53);
        boolean boolean56 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setTime(97L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        zipArchiveEntry0.setTime((long) (short) -1);
        zipArchiveEntry0.setCompressedSize((long) (short) 0);
        zipArchiveEntry0.setName("");
        int int7 = zipArchiveEntry0.getUnixMode();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        zipArchiveEntry1.setCrc(0L);
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = zipArchiveEntry1.getExtraField(zipShort22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField23);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        byte[] byteArray1 = zipArchiveEntry0.getExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry4 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry4.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray7 = zipArchiveEntry4.getExtraFields();
        zipArchiveEntry4.setComment("hi!");
        zipArchiveEntry4.setCrc((long) 0);
        long long12 = zipArchiveEntry4.getSize();
        java.nio.file.attribute.FileTime fileTime13 = zipArchiveEntry4.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        long long21 = zipArchiveEntry15.getExternalAttributes();
        zipArchiveEntry15.setTime((long) (short) -1);
        boolean boolean24 = zipArchiveEntry15.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime25 = zipArchiveEntry15.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = zipArchiveEntry4.setCreationTime(fileTime25);
        java.util.zip.ZipEntry zipEntry27 = zipArchiveEntry2.setLastAccessTime(fileTime25);
        long long28 = zipArchiveEntry2.getExternalAttributes();
        boolean boolean29 = zipArchiveEntry0.equals((java.lang.Object) long28);
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(zipExtraFieldArray7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry27);
        org.junit.Assert.assertEquals(zipEntry27.toString(), "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        boolean boolean16 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setInternalAttributes((int) (byte) 10);
        int int26 = zipArchiveEntry18.getUnixMode();
        java.lang.String str27 = zipArchiveEntry18.getComment();
        long long28 = zipArchiveEntry18.getSize();
        boolean boolean29 = zipArchiveEntry18.isSupportedCompressionMethod();
        java.lang.String str30 = zipArchiveEntry18.getComment();
        zipArchiveEntry18.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime33 = zipArchiveEntry18.getLastAccessTime();
        byte[] byteArray34 = zipArchiveEntry18.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry36 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(fileTime33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry11.setComment("hi!");
        zipArchiveEntry11.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setInternalAttributes((int) (byte) 10);
        int int28 = zipArchiveEntry20.getUnixMode();
        java.lang.String str29 = zipArchiveEntry20.getComment();
        long long30 = zipArchiveEntry20.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        zipArchiveEntry33.setCrc((long) 0);
        long long41 = zipArchiveEntry33.getSize();
        java.nio.file.attribute.FileTime fileTime42 = zipArchiveEntry33.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry44 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry44.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray47 = zipArchiveEntry44.getExtraFields();
        zipArchiveEntry44.setComment("hi!");
        long long50 = zipArchiveEntry44.getExternalAttributes();
        zipArchiveEntry44.setTime((long) (short) -1);
        boolean boolean53 = zipArchiveEntry44.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime54 = zipArchiveEntry44.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry33.setCreationTime(fileTime54);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry31.setLastAccessTime(fileTime54);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry20.setLastModifiedTime(fileTime54);
        byte[] byteArray58 = zipArchiveEntry20.getLocalFileDataExtra();
        zipArchiveEntry11.setExtra(byteArray58);
        byte[] byteArray60 = zipArchiveEntry11.getLocalFileDataExtra();
        long long61 = zipArchiveEntry11.getSize();
        boolean boolean62 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(fileTime42);
        org.junit.Assert.assertNotNull(zipExtraFieldArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.util.Date date22 = zipArchiveEntry1.getLastModifiedDate();
        long long23 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = zipArchiveEntry1.getExtraFields();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setUnixMode((int) ' ');
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileTime10);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        zipArchiveEntry10.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray15);
        zipArchiveEntry1.setTime((long) (short) 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        zipArchiveEntry13.setInternalAttributes((int) (byte) 10);
        byte[] byteArray21 = zipArchiveEntry13.getCentralDirectoryExtra();
        zipArchiveEntry13.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        zipArchiveEntry25.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = zipArchiveEntry25.getExtraFields();
        java.nio.file.attribute.FileTime fileTime31 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry32 = zipArchiveEntry13.setLastAccessTime(fileTime31);
        java.util.zip.ZipEntry zipEntry33 = zipArchiveEntry1.setLastModifiedTime(fileTime31);
        zipArchiveEntry1.setUnixMode((int) (byte) 10);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray30);
        org.junit.Assert.assertNotNull(fileTime31);
        org.junit.Assert.assertNotNull(zipEntry32);
        org.junit.Assert.assertEquals(zipEntry32.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry33);
        org.junit.Assert.assertEquals(zipEntry33.toString(), "hi!");
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        boolean boolean7 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setMethod((int) (byte) 100);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str3 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setMethod(0);
        byte[] byteArray6 = zipArchiveEntry1.getExtra();
        zipArchiveEntry1.setCompressedSize((long) (short) 1);
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(byteArray6);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getMethod();
        byte[] byteArray10 = zipArchiveEntry1.getLocalFileDataExtra();
        int int11 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        zipArchiveEntry15.setTime((long) (-1));
        boolean boolean20 = zipArchiveEntry15.isDirectory();
        boolean boolean21 = zipArchiveEntry15.isDirectory();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry15.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry23 = zipArchiveEntry1.setLastModifiedTime(fileTime22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry23);
        org.junit.Assert.assertEquals(zipEntry23.toString(), "hi!");
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setExternalAttributes((long) (short) 0);
        java.lang.String str23 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setCrc(1L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        boolean boolean22 = zipArchiveEntry1.isDirectory();
        java.lang.String str23 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setMethod(0);
        java.lang.Object obj58 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setTime((long) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry62 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry62.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray65 = zipArchiveEntry62.getExtraFields();
        zipArchiveEntry62.setComment("hi!");
        long long68 = zipArchiveEntry62.getSize();
        java.lang.String str69 = zipArchiveEntry62.getName();
        int int70 = zipArchiveEntry62.getMethod();
        zipArchiveEntry62.setExtra();
        zipArchiveEntry62.setMethod((int) '#');
        java.lang.String str74 = zipArchiveEntry62.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry76 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray77 = zipArchiveEntry76.getExtraFields();
        zipArchiveEntry62.setExtraFields(zipExtraFieldArray77);
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray77);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray77);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        long long14 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) (byte) 0);
        long long17 = zipArchiveEntry1.getTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        int int9 = zipArchiveEntry1.getUnixMode();
        zipArchiveEntry1.setUnixMode((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort12);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.lang.String str8 = zipArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        byte[] byteArray7 = zipArchiveEntry1.getExtra();
        java.lang.String str8 = zipArchiveEntry1.getComment();
        java.util.Date date9 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort12);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        boolean boolean16 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setInternalAttributes((int) (byte) 10);
        int int26 = zipArchiveEntry18.getUnixMode();
        java.lang.String str27 = zipArchiveEntry18.getComment();
        long long28 = zipArchiveEntry18.getSize();
        boolean boolean29 = zipArchiveEntry18.isSupportedCompressionMethod();
        java.lang.String str30 = zipArchiveEntry18.getComment();
        zipArchiveEntry18.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime33 = zipArchiveEntry18.getLastAccessTime();
        byte[] byteArray34 = zipArchiveEntry18.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray34);
        boolean boolean36 = zipArchiveEntry1.isDirectory();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(fileTime33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort56 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField57 = zipArchiveEntry1.getExtraField(zipShort56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNull(zipExtraField57);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        int int9 = zipArchiveEntry1.getUnixMode();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = zipArchiveEntry12.getExtraFields();
        zipArchiveEntry12.setComment("hi!");
        zipArchiveEntry12.setCrc((long) 0);
        long long20 = zipArchiveEntry12.getSize();
        java.nio.file.attribute.FileTime fileTime21 = zipArchiveEntry12.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        long long29 = zipArchiveEntry23.getExternalAttributes();
        zipArchiveEntry23.setTime((long) (short) -1);
        boolean boolean32 = zipArchiveEntry23.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime33 = zipArchiveEntry23.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry34 = zipArchiveEntry12.setCreationTime(fileTime33);
        java.util.zip.ZipEntry zipEntry35 = zipArchiveEntry10.setLastAccessTime(fileTime33);
        boolean boolean36 = zipArchiveEntry10.isSupportedCompressionMethod();
        zipArchiveEntry10.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry41 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry41.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray44 = zipArchiveEntry41.getExtraFields();
        zipArchiveEntry41.setComment("hi!");
        zipArchiveEntry41.setCrc((long) 0);
        long long49 = zipArchiveEntry41.getSize();
        java.nio.file.attribute.FileTime fileTime50 = zipArchiveEntry41.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry52 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry52.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray55 = zipArchiveEntry52.getExtraFields();
        zipArchiveEntry52.setComment("hi!");
        long long58 = zipArchiveEntry52.getExternalAttributes();
        zipArchiveEntry52.setTime((long) (short) -1);
        boolean boolean61 = zipArchiveEntry52.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime62 = zipArchiveEntry52.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry63 = zipArchiveEntry41.setCreationTime(fileTime62);
        java.util.zip.ZipEntry zipEntry64 = zipArchiveEntry39.setLastAccessTime(fileTime62);
        java.util.zip.ZipEntry zipEntry65 = zipArchiveEntry10.setCreationTime(fileTime62);
        java.util.zip.ZipEntry zipEntry66 = zipArchiveEntry1.setCreationTime(fileTime62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(fileTime21);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileTime33);
        org.junit.Assert.assertNotNull(zipEntry34);
        org.junit.Assert.assertEquals(zipEntry34.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry35);
        org.junit.Assert.assertEquals(zipEntry35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(fileTime50);
        org.junit.Assert.assertNotNull(zipExtraFieldArray55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileTime62);
        org.junit.Assert.assertNotNull(zipEntry63);
        org.junit.Assert.assertEquals(zipEntry63.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry64);
        org.junit.Assert.assertEquals(zipEntry64.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry65);
        org.junit.Assert.assertEquals(zipEntry65.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry66);
        org.junit.Assert.assertEquals(zipEntry66.toString(), "");
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        boolean boolean13 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = zipArchiveEntry15.getExtraField(zipShort19);
        long long21 = zipArchiveEntry15.getCrc();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry15.getExtraFields();
        boolean boolean23 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry15);
        zipArchiveEntry1.setName("");
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertNull(zipExtraField20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        java.lang.String str9 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry1.getExtraFields();
        long long14 = zipArchiveEntry1.getCrc();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        long long9 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.setExtraFields(zipExtraFieldArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        boolean boolean4 = zipArchiveEntry1.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray9);
        java.util.Date date11 = zipArchiveEntry1.getLastModifiedDate();
        java.util.Date date12 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExternalAttributes(10L);
        java.lang.String str10 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = zipArchiveEntry1.getExtraField(zipShort11);
        java.lang.Object obj13 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(zipExtraField12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "hi!");
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        zipArchiveEntry14.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray19 = zipArchiveEntry14.getExtraFields();
        int int20 = zipArchiveEntry14.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = zipArchiveEntry22.getExtraFields();
        zipArchiveEntry22.setComment("hi!");
        zipArchiveEntry22.setInternalAttributes((int) (byte) 10);
        int int30 = zipArchiveEntry22.getUnixMode();
        java.lang.String str31 = zipArchiveEntry22.getComment();
        long long32 = zipArchiveEntry22.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry35 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry35.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray38 = zipArchiveEntry35.getExtraFields();
        zipArchiveEntry35.setComment("hi!");
        zipArchiveEntry35.setCrc((long) 0);
        long long43 = zipArchiveEntry35.getSize();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry35.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry46 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry46.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray49 = zipArchiveEntry46.getExtraFields();
        zipArchiveEntry46.setComment("hi!");
        long long52 = zipArchiveEntry46.getExternalAttributes();
        zipArchiveEntry46.setTime((long) (short) -1);
        boolean boolean55 = zipArchiveEntry46.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime56 = zipArchiveEntry46.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry35.setCreationTime(fileTime56);
        java.util.zip.ZipEntry zipEntry58 = zipArchiveEntry33.setLastAccessTime(fileTime56);
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry22.setLastModifiedTime(fileTime56);
        java.util.zip.ZipEntry zipEntry60 = zipArchiveEntry14.setLastAccessTime(fileTime56);
        java.util.zip.ZipEntry zipEntry61 = zipArchiveEntry1.setLastModifiedTime(fileTime56);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNull(fileTime44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(fileTime56);
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry58);
        org.junit.Assert.assertEquals(zipEntry58.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry60);
        org.junit.Assert.assertEquals(zipEntry60.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "hi!");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean21 = zipArchiveEntry1.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = zipArchiveEntry1.getExtraField(zipShort18);
        long long20 = zipArchiveEntry1.getTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        long long25 = zipArchiveEntry22.getExternalAttributes();
        boolean boolean26 = zipArchiveEntry22.isDirectory();
        zipArchiveEntry22.setCrc((long) ' ');
        zipArchiveEntry22.setInternalAttributes(3);
        byte[] byteArray31 = zipArchiveEntry22.getCentralDirectoryExtra();
        zipArchiveEntry1.setExtra(byteArray31);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime3 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setUnixMode((int) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(fileTime3);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        java.lang.String str11 = zipArchiveEntry1.getComment();
        long long12 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        zipArchiveEntry1.setExtra();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(fileTime11);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setSize(97L);
        zipArchiveEntry1.setTime((long) (short) -1);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        long long9 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = zipArchiveEntry1.getExtraField(zipShort10);
        zipArchiveEntry1.setExternalAttributes(0L);
        int int14 = zipArchiveEntry1.getMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(zipExtraField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        int int5 = zipArchiveEntry1.getInternalAttributes();
        java.lang.Object obj6 = zipArchiveEntry1.clone();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "");
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        zipArchiveEntry0.setTime((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExternalAttributes(10L);
        java.lang.String str10 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = zipArchiveEntry1.getExtraField(zipShort11);
        long long13 = zipArchiveEntry1.getTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean16 = zipArchiveEntry15.isDirectory();
        java.util.Date date17 = zipArchiveEntry15.getLastModifiedDate();
        byte[] byteArray18 = zipArchiveEntry15.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        zipArchiveEntry29.setInternalAttributes((int) (byte) 10);
        int int37 = zipArchiveEntry29.getUnixMode();
        java.lang.String str38 = zipArchiveEntry29.getComment();
        long long39 = zipArchiveEntry29.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry40 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry42 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry42.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = zipArchiveEntry42.getExtraFields();
        zipArchiveEntry42.setComment("hi!");
        zipArchiveEntry42.setCrc((long) 0);
        long long50 = zipArchiveEntry42.getSize();
        java.nio.file.attribute.FileTime fileTime51 = zipArchiveEntry42.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry53 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry53.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray56 = zipArchiveEntry53.getExtraFields();
        zipArchiveEntry53.setComment("hi!");
        long long59 = zipArchiveEntry53.getExternalAttributes();
        zipArchiveEntry53.setTime((long) (short) -1);
        boolean boolean62 = zipArchiveEntry53.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime63 = zipArchiveEntry53.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry64 = zipArchiveEntry42.setCreationTime(fileTime63);
        java.util.zip.ZipEntry zipEntry65 = zipArchiveEntry40.setLastAccessTime(fileTime63);
        java.util.zip.ZipEntry zipEntry66 = zipArchiveEntry29.setLastModifiedTime(fileTime63);
        byte[] byteArray67 = zipArchiveEntry29.getLocalFileDataExtra();
        zipArchiveEntry20.setExtra(byteArray67);
        zipArchiveEntry15.setExtra(byteArray67);
        zipArchiveEntry15.setMethod(0);
        java.lang.Object obj72 = zipArchiveEntry15.clone();
        zipArchiveEntry15.setTime((long) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry76 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry76.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray79 = zipArchiveEntry76.getExtraFields();
        zipArchiveEntry76.setComment("hi!");
        zipArchiveEntry76.setInternalAttributes((int) (byte) 10);
        int int84 = zipArchiveEntry76.getUnixMode();
        java.lang.String str85 = zipArchiveEntry76.getComment();
        long long86 = zipArchiveEntry76.getSize();
        boolean boolean87 = zipArchiveEntry76.isSupportedCompressionMethod();
        java.lang.String str88 = zipArchiveEntry76.getComment();
        zipArchiveEntry76.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime91 = zipArchiveEntry76.getLastAccessTime();
        byte[] byteArray92 = zipArchiveEntry76.getLocalFileDataExtra();
        zipArchiveEntry15.setExtra(byteArray92);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray92);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(zipExtraField12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNull(fileTime51);
        org.junit.Assert.assertNotNull(zipExtraFieldArray56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileTime63);
        org.junit.Assert.assertNotNull(zipEntry64);
        org.junit.Assert.assertEquals(zipEntry64.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry65);
        org.junit.Assert.assertEquals(zipEntry65.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry66);
        org.junit.Assert.assertEquals(zipEntry66.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNull(fileTime91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        byte[] byteArray7 = zipArchiveEntry1.getLocalFileDataExtra();
        int int8 = zipArchiveEntry1.getPlatform();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        boolean boolean7 = zipArchiveEntry1.isSupportedCompressionMethod();
        zipArchiveEntry1.setMethod((int) (byte) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean12 = zipArchiveEntry11.isDirectory();
        int int13 = zipArchiveEntry11.getUnixMode();
        java.lang.String str14 = zipArchiveEntry11.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry16.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray19 = zipArchiveEntry16.getExtraFields();
        zipArchiveEntry16.setComment("hi!");
        long long22 = zipArchiveEntry16.getSize();
        java.lang.String str23 = zipArchiveEntry16.getName();
        int int24 = zipArchiveEntry16.getMethod();
        byte[] byteArray25 = zipArchiveEntry16.getLocalFileDataExtra();
        zipArchiveEntry11.setExtra(byteArray25);
        zipArchiveEntry1.setExtra(byteArray25);
        zipArchiveEntry1.setUnixMode((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNull(fileTime9);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        long long7 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = zipArchiveEntry1.getExtraFields();
        long long9 = zipArchiveEntry1.getExternalAttributes();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        boolean boolean20 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime21 = zipArchiveEntry1.getCreationTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort22);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fileTime21);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) '4');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.Object obj4 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry7 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry7.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry7.getExtraFields();
        zipArchiveEntry7.setComment("hi!");
        zipArchiveEntry7.setCrc((long) 0);
        long long15 = zipArchiveEntry7.getSize();
        java.nio.file.attribute.FileTime fileTime16 = zipArchiveEntry7.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        long long24 = zipArchiveEntry18.getExternalAttributes();
        zipArchiveEntry18.setTime((long) (short) -1);
        boolean boolean27 = zipArchiveEntry18.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime28 = zipArchiveEntry18.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry29 = zipArchiveEntry7.setCreationTime(fileTime28);
        java.util.zip.ZipEntry zipEntry30 = zipArchiveEntry1.setLastModifiedTime(fileTime28);
        zipArchiveEntry1.setPlatform((int) (short) 100);
        byte[] byteArray33 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fileTime28);
        org.junit.Assert.assertNotNull(zipEntry29);
        org.junit.Assert.assertEquals(zipEntry29.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry30);
        org.junit.Assert.assertEquals(zipEntry30.toString(), "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        byte[] byteArray10 = zipArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = zipArchiveEntry1.getExtraField(zipShort11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNull(zipExtraField12);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.util.Date date22 = zipArchiveEntry1.getLastModifiedDate();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        byte[] byteArray24 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        java.nio.file.attribute.FileTime fileTime4 = zipArchiveEntry1.getLastAccessTime();
        long long5 = zipArchiveEntry1.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime6 = zipArchiveEntry1.getCreationTime();
        byte[] byteArray7 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        zipArchiveEntry9.setCrc((long) 0);
        java.lang.String str17 = zipArchiveEntry9.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray18);
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str9 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        byte[] byteArray20 = zipArchiveEntry1.getCentralDirectoryExtra();
        boolean boolean21 = zipArchiveEntry1.isDirectory();
        boolean boolean22 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort24 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = zipArchiveEntry1.getExtraField(zipShort24);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry27 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime28 = zipArchiveEntry27.getLastAccessTime();
        zipArchiveEntry27.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean33 = zipArchiveEntry32.isDirectory();
        java.util.Date date34 = zipArchiveEntry32.getLastModifiedDate();
        byte[] byteArray35 = zipArchiveEntry32.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry37 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry37.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = zipArchiveEntry37.getExtraFields();
        zipArchiveEntry37.setComment("hi!");
        zipArchiveEntry37.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry46 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry46.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray49 = zipArchiveEntry46.getExtraFields();
        zipArchiveEntry46.setComment("hi!");
        zipArchiveEntry46.setInternalAttributes((int) (byte) 10);
        int int54 = zipArchiveEntry46.getUnixMode();
        java.lang.String str55 = zipArchiveEntry46.getComment();
        long long56 = zipArchiveEntry46.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry57 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry59 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry59.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray62 = zipArchiveEntry59.getExtraFields();
        zipArchiveEntry59.setComment("hi!");
        zipArchiveEntry59.setCrc((long) 0);
        long long67 = zipArchiveEntry59.getSize();
        java.nio.file.attribute.FileTime fileTime68 = zipArchiveEntry59.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry70 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry70.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray73 = zipArchiveEntry70.getExtraFields();
        zipArchiveEntry70.setComment("hi!");
        long long76 = zipArchiveEntry70.getExternalAttributes();
        zipArchiveEntry70.setTime((long) (short) -1);
        boolean boolean79 = zipArchiveEntry70.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime80 = zipArchiveEntry70.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry81 = zipArchiveEntry59.setCreationTime(fileTime80);
        java.util.zip.ZipEntry zipEntry82 = zipArchiveEntry57.setLastAccessTime(fileTime80);
        java.util.zip.ZipEntry zipEntry83 = zipArchiveEntry46.setLastModifiedTime(fileTime80);
        byte[] byteArray84 = zipArchiveEntry46.getLocalFileDataExtra();
        zipArchiveEntry37.setExtra(byteArray84);
        zipArchiveEntry32.setExtra(byteArray84);
        zipArchiveEntry27.setCentralDirectoryExtra(byteArray84);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray84);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(zipExtraField25);
        org.junit.Assert.assertNull(fileTime28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertNotNull(zipExtraFieldArray49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNull(fileTime68);
        org.junit.Assert.assertNotNull(zipExtraFieldArray73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(fileTime80);
        org.junit.Assert.assertNotNull(zipEntry81);
        org.junit.Assert.assertEquals(zipEntry81.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry82);
        org.junit.Assert.assertEquals(zipEntry82.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry83);
        org.junit.Assert.assertEquals(zipEntry83.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime7 = zipArchiveEntry1.getLastModifiedTime();
        int int8 = zipArchiveEntry1.getPlatform();
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        int int11 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode((int) 'a');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(fileTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        int int56 = zipArchiveEntry1.getUnixMode();
        java.util.Date date57 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray58 = zipArchiveEntry1.getCentralDirectoryExtra();
        int int59 = zipArchiveEntry1.getMethod();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        zipArchiveEntry14.setCrc((long) 0);
        long long22 = zipArchiveEntry14.getSize();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry14.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        zipArchiveEntry25.setTime((long) (short) -1);
        boolean boolean34 = zipArchiveEntry25.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime35 = zipArchiveEntry25.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry36 = zipArchiveEntry14.setCreationTime(fileTime35);
        java.util.zip.ZipEntry zipEntry37 = zipArchiveEntry12.setLastAccessTime(fileTime35);
        java.util.zip.ZipEntry zipEntry38 = zipArchiveEntry1.setLastModifiedTime(fileTime35);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry40 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean41 = zipArchiveEntry40.isDirectory();
        java.util.Date date42 = zipArchiveEntry40.getLastModifiedDate();
        byte[] byteArray43 = zipArchiveEntry40.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry45 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry45.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray48 = zipArchiveEntry45.getExtraFields();
        zipArchiveEntry45.setComment("hi!");
        zipArchiveEntry45.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry54 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry54.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray57 = zipArchiveEntry54.getExtraFields();
        zipArchiveEntry54.setComment("hi!");
        zipArchiveEntry54.setInternalAttributes((int) (byte) 10);
        int int62 = zipArchiveEntry54.getUnixMode();
        java.lang.String str63 = zipArchiveEntry54.getComment();
        long long64 = zipArchiveEntry54.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry65 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry67 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry67.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray70 = zipArchiveEntry67.getExtraFields();
        zipArchiveEntry67.setComment("hi!");
        zipArchiveEntry67.setCrc((long) 0);
        long long75 = zipArchiveEntry67.getSize();
        java.nio.file.attribute.FileTime fileTime76 = zipArchiveEntry67.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry78 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry78.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray81 = zipArchiveEntry78.getExtraFields();
        zipArchiveEntry78.setComment("hi!");
        long long84 = zipArchiveEntry78.getExternalAttributes();
        zipArchiveEntry78.setTime((long) (short) -1);
        boolean boolean87 = zipArchiveEntry78.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime88 = zipArchiveEntry78.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry89 = zipArchiveEntry67.setCreationTime(fileTime88);
        java.util.zip.ZipEntry zipEntry90 = zipArchiveEntry65.setLastAccessTime(fileTime88);
        java.util.zip.ZipEntry zipEntry91 = zipArchiveEntry54.setLastModifiedTime(fileTime88);
        byte[] byteArray92 = zipArchiveEntry54.getLocalFileDataExtra();
        zipArchiveEntry45.setExtra(byteArray92);
        zipArchiveEntry40.setExtra(byteArray92);
        zipArchiveEntry1.setExtra(byteArray92);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry36);
        org.junit.Assert.assertEquals(zipEntry36.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry37);
        org.junit.Assert.assertEquals(zipEntry37.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray48);
        org.junit.Assert.assertNotNull(zipExtraFieldArray57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNull(fileTime76);
        org.junit.Assert.assertNotNull(zipExtraFieldArray81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(fileTime88);
        org.junit.Assert.assertNotNull(zipEntry89);
        org.junit.Assert.assertEquals(zipEntry89.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry90);
        org.junit.Assert.assertEquals(zipEntry90.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry91);
        org.junit.Assert.assertEquals(zipEntry91.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("hi!");
        zipArchiveEntry1.setExternalAttributes(6553601L);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        java.nio.file.attribute.FileTime fileTime5 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setUnixMode((int) (byte) -1);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime5);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setPlatform((int) '#');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry8.getExtraFields();
        zipArchiveEntry8.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime14 = zipArchiveEntry8.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry16.setName("hi!");
        zipArchiveEntry16.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry16.getExtraFields();
        java.nio.file.attribute.FileTime fileTime22 = zipArchiveEntry16.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry23 = zipArchiveEntry8.setCreationTime(fileTime22);
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry1.setLastModifiedTime(fileTime22);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.removeExtraField(zipShort25);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNull(fileTime14);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry23);
        org.junit.Assert.assertEquals(zipEntry23.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        int int7 = zipArchiveEntry1.getMethod();
        zipArchiveEntry1.setExternalAttributes(10L);
        int int10 = zipArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry12.setName("hi!");
        zipArchiveEntry12.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry12.getExtraFields();
        int int18 = zipArchiveEntry12.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry20 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry20.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = zipArchiveEntry20.getExtraFields();
        zipArchiveEntry20.setComment("hi!");
        zipArchiveEntry20.setInternalAttributes((int) (byte) 10);
        int int28 = zipArchiveEntry20.getUnixMode();
        java.lang.String str29 = zipArchiveEntry20.getComment();
        long long30 = zipArchiveEntry20.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry33.setComment("hi!");
        zipArchiveEntry33.setCrc((long) 0);
        long long41 = zipArchiveEntry33.getSize();
        java.nio.file.attribute.FileTime fileTime42 = zipArchiveEntry33.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry44 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry44.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray47 = zipArchiveEntry44.getExtraFields();
        zipArchiveEntry44.setComment("hi!");
        long long50 = zipArchiveEntry44.getExternalAttributes();
        zipArchiveEntry44.setTime((long) (short) -1);
        boolean boolean53 = zipArchiveEntry44.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime54 = zipArchiveEntry44.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry55 = zipArchiveEntry33.setCreationTime(fileTime54);
        java.util.zip.ZipEntry zipEntry56 = zipArchiveEntry31.setLastAccessTime(fileTime54);
        java.util.zip.ZipEntry zipEntry57 = zipArchiveEntry20.setLastModifiedTime(fileTime54);
        java.util.zip.ZipEntry zipEntry58 = zipArchiveEntry12.setLastAccessTime(fileTime54);
        java.util.zip.ZipEntry zipEntry59 = zipArchiveEntry1.setCreationTime(fileTime54);
        zipArchiveEntry1.setTime((long) '4');
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(fileTime42);
        org.junit.Assert.assertNotNull(zipExtraFieldArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(zipEntry55);
        org.junit.Assert.assertEquals(zipEntry55.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry56);
        org.junit.Assert.assertEquals(zipEntry56.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry57);
        org.junit.Assert.assertEquals(zipEntry57.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry58);
        org.junit.Assert.assertEquals(zipEntry58.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry59);
        org.junit.Assert.assertEquals(zipEntry59.toString(), "hi!");
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        boolean boolean13 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = zipArchiveEntry15.getExtraField(zipShort19);
        long long21 = zipArchiveEntry15.getCrc();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = zipArchiveEntry15.getExtraFields();
        boolean boolean23 = zipArchiveEntry1.equals((java.lang.Object) zipArchiveEntry15);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        long long31 = zipArchiveEntry25.getExternalAttributes();
        byte[] byteArray32 = zipArchiveEntry25.getLocalFileDataExtra();
        zipArchiveEntry15.setExtra(byteArray32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertNull(zipExtraField20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        byte[] byteArray9 = zipArchiveEntry1.getCentralDirectoryExtra();
        zipArchiveEntry1.setInternalAttributes((int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        zipArchiveEntry13.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry13.getExtraFields();
        java.nio.file.attribute.FileTime fileTime19 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry20 = zipArchiveEntry1.setLastAccessTime(fileTime19);
        long long21 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(zipEntry20);
        org.junit.Assert.assertEquals(zipEntry20.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        int int18 = zipArchiveEntry10.getUnixMode();
        java.lang.String str19 = zipArchiveEntry10.getComment();
        long long20 = zipArchiveEntry10.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        zipArchiveEntry23.setCrc((long) 0);
        long long31 = zipArchiveEntry23.getSize();
        java.nio.file.attribute.FileTime fileTime32 = zipArchiveEntry23.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        long long40 = zipArchiveEntry34.getExternalAttributes();
        zipArchiveEntry34.setTime((long) (short) -1);
        boolean boolean43 = zipArchiveEntry34.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry34.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry23.setCreationTime(fileTime44);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry21.setLastAccessTime(fileTime44);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry10.setLastModifiedTime(fileTime44);
        byte[] byteArray48 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray48);
        byte[] byteArray50 = zipArchiveEntry1.getLocalFileDataExtra();
        long long51 = zipArchiveEntry1.getSize();
        int int52 = zipArchiveEntry1.getUnixMode();
        byte[] byteArray53 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(fileTime32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        zipArchiveEntry1.setTime((long) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry11.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = zipArchiveEntry11.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray14);
        zipArchiveEntry1.setMethod(0);
        zipArchiveEntry1.setCrc(0L);
        int int20 = zipArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry22.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = zipArchiveEntry22.getExtraFields();
        zipArchiveEntry22.setComment("hi!");
        java.nio.file.attribute.FileTime fileTime28 = zipArchiveEntry22.getLastModifiedTime();
        int int29 = zipArchiveEntry22.getPlatform();
        zipArchiveEntry22.setInternalAttributes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry33 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry33.setName("hi!");
        zipArchiveEntry33.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray38 = zipArchiveEntry33.getExtraFields();
        zipArchiveEntry22.setExtraFields(zipExtraFieldArray38);
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray38);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertNull(fileTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray38);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        zipArchiveEntry1.setComment("hi!");
        long long14 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean17 = zipArchiveEntry16.isDirectory();
        int int18 = zipArchiveEntry16.getUnixMode();
        java.lang.String str19 = zipArchiveEntry16.getName();
        boolean boolean20 = zipArchiveEntry16.isDirectory();
        long long21 = zipArchiveEntry16.getCompressedSize();
        boolean boolean22 = zipArchiveEntry16.isSupportedCompressionMethod();
        zipArchiveEntry16.setMethod((int) (byte) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean27 = zipArchiveEntry26.isDirectory();
        int int28 = zipArchiveEntry26.getUnixMode();
        java.lang.String str29 = zipArchiveEntry26.getName();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry31.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray34 = zipArchiveEntry31.getExtraFields();
        zipArchiveEntry31.setComment("hi!");
        long long37 = zipArchiveEntry31.getSize();
        java.lang.String str38 = zipArchiveEntry31.getName();
        int int39 = zipArchiveEntry31.getMethod();
        byte[] byteArray40 = zipArchiveEntry31.getLocalFileDataExtra();
        zipArchiveEntry26.setExtra(byteArray40);
        zipArchiveEntry16.setExtra(byteArray40);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray40);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        long long4 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setInternalAttributes(10);
        java.lang.Class<?> wildcardClass8 = zipArchiveEntry1.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        java.lang.String str20 = zipArchiveEntry1.getName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry1.getExtraFields();
        java.lang.String str22 = zipArchiveEntry1.getName();
        java.lang.String str23 = zipArchiveEntry1.getComment();
        byte[] byteArray24 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry6.setComment("hi!");
        zipArchiveEntry6.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = zipArchiveEntry15.getExtraFields();
        zipArchiveEntry15.setComment("hi!");
        zipArchiveEntry15.setInternalAttributes((int) (byte) 10);
        int int23 = zipArchiveEntry15.getUnixMode();
        java.lang.String str24 = zipArchiveEntry15.getComment();
        long long25 = zipArchiveEntry15.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry26 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry28 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry28.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = zipArchiveEntry28.getExtraFields();
        zipArchiveEntry28.setComment("hi!");
        zipArchiveEntry28.setCrc((long) 0);
        long long36 = zipArchiveEntry28.getSize();
        java.nio.file.attribute.FileTime fileTime37 = zipArchiveEntry28.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry39 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry39.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = zipArchiveEntry39.getExtraFields();
        zipArchiveEntry39.setComment("hi!");
        long long45 = zipArchiveEntry39.getExternalAttributes();
        zipArchiveEntry39.setTime((long) (short) -1);
        boolean boolean48 = zipArchiveEntry39.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime49 = zipArchiveEntry39.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry50 = zipArchiveEntry28.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = zipArchiveEntry26.setLastAccessTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = zipArchiveEntry15.setLastModifiedTime(fileTime49);
        byte[] byteArray53 = zipArchiveEntry15.getLocalFileDataExtra();
        zipArchiveEntry6.setExtra(byteArray53);
        zipArchiveEntry1.setExtra(byteArray53);
        zipArchiveEntry1.setMethod(0);
        java.lang.Object obj58 = zipArchiveEntry1.clone();
        zipArchiveEntry1.setTime((long) (byte) 10);
        zipArchiveEntry1.setCompressedSize((long) '4');
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray63 = zipArchiveEntry1.getExtraFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(fileTime37);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry50);
        org.junit.Assert.assertEquals(zipEntry50.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
        org.junit.Assert.assertNotNull(zipExtraFieldArray63);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setUnixMode((int) (short) -1);
        long long10 = zipArchiveEntry1.getSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        java.nio.file.attribute.FileTime fileTime9 = zipArchiveEntry1.getLastAccessTime();
        byte[] byteArray10 = zipArchiveEntry1.getCentralDirectoryExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(fileTime9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        long long9 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = zipArchiveEntry1.getExtraField(zipShort10);
        long long12 = zipArchiveEntry1.getSize();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(zipExtraField11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        zipArchiveEntry1.setTime(1L);
        int int7 = zipArchiveEntry1.getInternalAttributes();
        java.lang.String str8 = zipArchiveEntry1.getName();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime8 = zipArchiveEntry1.getLastModifiedTime();
        long long9 = zipArchiveEntry1.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = zipArchiveEntry1.getExtraField(zipShort10);
        zipArchiveEntry1.setExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(zipExtraField11);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        zipArchiveEntry0.setCompressedSize((long) '4');
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        int int10 = zipArchiveEntry1.getPlatform();
        byte[] byteArray11 = zipArchiveEntry1.getExtra();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        java.util.Date date13 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry18.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = zipArchiveEntry18.getExtraFields();
        zipArchiveEntry18.setComment("hi!");
        zipArchiveEntry18.setCrc((long) 0);
        long long26 = zipArchiveEntry18.getSize();
        java.nio.file.attribute.FileTime fileTime27 = zipArchiveEntry18.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry29 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry29.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray32 = zipArchiveEntry29.getExtraFields();
        zipArchiveEntry29.setComment("hi!");
        long long35 = zipArchiveEntry29.getExternalAttributes();
        zipArchiveEntry29.setTime((long) (short) -1);
        boolean boolean38 = zipArchiveEntry29.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime39 = zipArchiveEntry29.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry40 = zipArchiveEntry18.setCreationTime(fileTime39);
        java.util.zip.ZipEntry zipEntry41 = zipArchiveEntry16.setLastAccessTime(fileTime39);
        java.util.zip.ZipEntry zipEntry42 = zipArchiveEntry1.setLastAccessTime(fileTime39);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(fileTime27);
        org.junit.Assert.assertNotNull(zipExtraFieldArray32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileTime39);
        org.junit.Assert.assertNotNull(zipEntry40);
        org.junit.Assert.assertEquals(zipEntry40.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry41);
        org.junit.Assert.assertEquals(zipEntry41.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry42);
        org.junit.Assert.assertEquals(zipEntry42.toString(), "hi!");
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        int int18 = zipArchiveEntry10.getUnixMode();
        java.lang.String str19 = zipArchiveEntry10.getComment();
        long long20 = zipArchiveEntry10.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        zipArchiveEntry23.setCrc((long) 0);
        long long31 = zipArchiveEntry23.getSize();
        java.nio.file.attribute.FileTime fileTime32 = zipArchiveEntry23.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        long long40 = zipArchiveEntry34.getExternalAttributes();
        zipArchiveEntry34.setTime((long) (short) -1);
        boolean boolean43 = zipArchiveEntry34.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry34.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry23.setCreationTime(fileTime44);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry21.setLastAccessTime(fileTime44);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry10.setLastModifiedTime(fileTime44);
        byte[] byteArray48 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray48);
        byte[] byteArray50 = zipArchiveEntry1.getLocalFileDataExtra();
        java.lang.String str51 = zipArchiveEntry1.getName();
        int int52 = zipArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry54 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry54.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray57 = zipArchiveEntry54.getExtraFields();
        zipArchiveEntry54.setComment("hi!");
        zipArchiveEntry54.setCrc((long) 0);
        long long62 = zipArchiveEntry54.getSize();
        java.nio.file.attribute.FileTime fileTime63 = zipArchiveEntry54.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry65 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry65.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray68 = zipArchiveEntry65.getExtraFields();
        zipArchiveEntry65.setComment("hi!");
        long long71 = zipArchiveEntry65.getExternalAttributes();
        zipArchiveEntry65.setTime((long) (short) -1);
        boolean boolean74 = zipArchiveEntry65.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime75 = zipArchiveEntry65.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry76 = zipArchiveEntry54.setCreationTime(fileTime75);
        boolean boolean77 = zipArchiveEntry1.equals((java.lang.Object) zipEntry76);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(fileTime32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNull(fileTime63);
        org.junit.Assert.assertNotNull(zipExtraFieldArray68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(fileTime75);
        org.junit.Assert.assertNotNull(zipEntry76);
        org.junit.Assert.assertEquals(zipEntry76.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        zipArchiveEntry1.setPlatform((int) '4');
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        java.util.Date date7 = zipArchiveEntry1.getLastModifiedDate();
        zipArchiveEntry1.setCrc(0L);
        java.nio.file.attribute.FileTime fileTime10 = zipArchiveEntry1.getCreationTime();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNull(fileTime10);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        java.lang.String str11 = zipArchiveEntry1.getComment();
        long long12 = zipArchiveEntry1.getCompressedSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        int int3 = zipArchiveEntry1.getUnixMode();
        java.lang.String str4 = zipArchiveEntry1.getName();
        boolean boolean5 = zipArchiveEntry1.isDirectory();
        long long6 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setExternalAttributes((long) 0);
        zipArchiveEntry1.setPlatform((int) ' ');
        zipArchiveEntry1.setName("");
        zipArchiveEntry1.setExtra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setExternalAttributes((long) 8);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        boolean boolean2 = zipArchiveEntry1.isDirectory();
        java.util.Date date3 = zipArchiveEntry1.getLastModifiedDate();
        byte[] byteArray4 = zipArchiveEntry1.getExtra();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry6.setName("hi!");
        zipArchiveEntry6.setTime((long) (-1));
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = zipArchiveEntry6.getExtraFields();
        zipArchiveEntry1.setExtraFields(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNull(byteArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getExternalAttributes();
        boolean boolean8 = zipArchiveEntry1.isDirectory();
        zipArchiveEntry1.setPlatform((int) (short) -1);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        zipArchiveEntry1.setTime((long) (-1));
        boolean boolean6 = zipArchiveEntry1.isDirectory();
        boolean boolean7 = zipArchiveEntry1.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry9.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = zipArchiveEntry9.getExtraFields();
        zipArchiveEntry9.setComment("hi!");
        long long15 = zipArchiveEntry9.getSize();
        java.lang.String str16 = zipArchiveEntry9.getName();
        int int17 = zipArchiveEntry9.getMethod();
        byte[] byteArray18 = zipArchiveEntry9.getLocalFileDataExtra();
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray18);
        boolean boolean20 = zipArchiveEntry1.isDirectory();
        java.nio.file.attribute.FileTime fileTime21 = zipArchiveEntry1.getCreationTime();
        byte[] byteArray22 = zipArchiveEntry1.getLocalFileDataExtra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fileTime21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setInternalAttributes((int) (byte) -1);
        int int12 = zipArchiveEntry1.getUnixMode();
        int int13 = zipArchiveEntry1.getInternalAttributes();
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        java.lang.String str11 = zipArchiveEntry1.getName();
        java.lang.String str12 = zipArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry14.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = zipArchiveEntry14.getExtraFields();
        zipArchiveEntry14.setComment("hi!");
        long long20 = zipArchiveEntry14.getExternalAttributes();
        zipArchiveEntry14.setTime((long) (short) -1);
        boolean boolean23 = zipArchiveEntry14.isSupportedCompressionMethod();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        java.nio.file.attribute.FileTime fileTime28 = zipArchiveEntry25.getLastAccessTime();
        long long29 = zipArchiveEntry25.getExternalAttributes();
        java.nio.file.attribute.FileTime fileTime30 = zipArchiveEntry25.getCreationTime();
        byte[] byteArray31 = zipArchiveEntry25.getCentralDirectoryExtra();
        zipArchiveEntry14.setExtra(byteArray31);
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray31);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(fileTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(fileTime30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        long long7 = zipArchiveEntry1.getSize();
        java.lang.String str8 = zipArchiveEntry1.getName();
        int int9 = zipArchiveEntry1.getPlatform();
        int int10 = zipArchiveEntry1.getPlatform();
        zipArchiveEntry1.setUnixMode(0);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry1.getExtraFields();
        long long14 = zipArchiveEntry1.getCrc();
        java.util.Date date15 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getUnixMode();
        java.lang.String str10 = zipArchiveEntry1.getComment();
        long long11 = zipArchiveEntry1.getSize();
        boolean boolean12 = zipArchiveEntry1.isSupportedCompressionMethod();
        java.lang.String str13 = zipArchiveEntry1.getComment();
        zipArchiveEntry1.setInternalAttributes((int) (byte) 0);
        java.nio.file.attribute.FileTime fileTime16 = zipArchiveEntry1.getLastModifiedTime();
        zipArchiveEntry1.setInternalAttributes(3);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(fileTime16);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry8 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry8.setCompressedSize((long) (byte) 0);
        long long11 = zipArchiveEntry8.getTime();
        zipArchiveEntry8.setExternalAttributes(100L);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry15 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry15.setName("hi!");
        java.nio.file.attribute.FileTime fileTime18 = zipArchiveEntry15.getLastAccessTime();
        long long19 = zipArchiveEntry15.getExternalAttributes();
        long long20 = zipArchiveEntry15.getCrc();
        boolean boolean21 = zipArchiveEntry15.isDirectory();
        java.lang.Object obj22 = zipArchiveEntry15.clone();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry25 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry25.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = zipArchiveEntry25.getExtraFields();
        zipArchiveEntry25.setComment("hi!");
        zipArchiveEntry25.setCrc((long) 0);
        long long33 = zipArchiveEntry25.getSize();
        java.nio.file.attribute.FileTime fileTime34 = zipArchiveEntry25.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry36 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry36.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray39 = zipArchiveEntry36.getExtraFields();
        zipArchiveEntry36.setComment("hi!");
        long long42 = zipArchiveEntry36.getExternalAttributes();
        zipArchiveEntry36.setTime((long) (short) -1);
        boolean boolean45 = zipArchiveEntry36.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime46 = zipArchiveEntry36.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry25.setCreationTime(fileTime46);
        java.util.zip.ZipEntry zipEntry48 = zipArchiveEntry23.setLastAccessTime(fileTime46);
        boolean boolean49 = zipArchiveEntry23.isSupportedCompressionMethod();
        zipArchiveEntry23.setComment("hi!");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry52 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry54 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry54.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray57 = zipArchiveEntry54.getExtraFields();
        zipArchiveEntry54.setComment("hi!");
        zipArchiveEntry54.setCrc((long) 0);
        long long62 = zipArchiveEntry54.getSize();
        java.nio.file.attribute.FileTime fileTime63 = zipArchiveEntry54.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry65 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry65.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray68 = zipArchiveEntry65.getExtraFields();
        zipArchiveEntry65.setComment("hi!");
        long long71 = zipArchiveEntry65.getExternalAttributes();
        zipArchiveEntry65.setTime((long) (short) -1);
        boolean boolean74 = zipArchiveEntry65.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime75 = zipArchiveEntry65.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry76 = zipArchiveEntry54.setCreationTime(fileTime75);
        java.util.zip.ZipEntry zipEntry77 = zipArchiveEntry52.setLastAccessTime(fileTime75);
        java.util.zip.ZipEntry zipEntry78 = zipArchiveEntry23.setCreationTime(fileTime75);
        java.util.zip.ZipEntry zipEntry79 = zipArchiveEntry15.setCreationTime(fileTime75);
        java.util.zip.ZipEntry zipEntry80 = zipArchiveEntry8.setCreationTime(fileTime75);
        java.util.zip.ZipEntry zipEntry81 = zipArchiveEntry1.setCreationTime(fileTime75);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField82 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveEntry1.addExtraField(zipExtraField82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(fileTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "hi!");
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNull(fileTime34);
        org.junit.Assert.assertNotNull(zipExtraFieldArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(fileTime46);
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry48);
        org.junit.Assert.assertEquals(zipEntry48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNull(fileTime63);
        org.junit.Assert.assertNotNull(zipExtraFieldArray68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(fileTime75);
        org.junit.Assert.assertNotNull(zipEntry76);
        org.junit.Assert.assertEquals(zipEntry76.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry77);
        org.junit.Assert.assertEquals(zipEntry77.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry78);
        org.junit.Assert.assertEquals(zipEntry78.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry79);
        org.junit.Assert.assertEquals(zipEntry79.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry80);
        org.junit.Assert.assertEquals(zipEntry80.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry81);
        org.junit.Assert.assertEquals(zipEntry81.toString(), "hi!");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry0 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry2.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = zipArchiveEntry2.getExtraFields();
        zipArchiveEntry2.setComment("hi!");
        zipArchiveEntry2.setCrc((long) 0);
        long long10 = zipArchiveEntry2.getSize();
        java.nio.file.attribute.FileTime fileTime11 = zipArchiveEntry2.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry13.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = zipArchiveEntry13.getExtraFields();
        zipArchiveEntry13.setComment("hi!");
        long long19 = zipArchiveEntry13.getExternalAttributes();
        zipArchiveEntry13.setTime((long) (short) -1);
        boolean boolean22 = zipArchiveEntry13.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime23 = zipArchiveEntry13.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry24 = zipArchiveEntry2.setCreationTime(fileTime23);
        java.util.zip.ZipEntry zipEntry25 = zipArchiveEntry0.setLastAccessTime(fileTime23);
        long long26 = zipArchiveEntry0.getTime();
        long long27 = zipArchiveEntry0.getSize();
        long long28 = zipArchiveEntry0.getSize();
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry25);
        org.junit.Assert.assertEquals(zipEntry25.toString(), "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        java.nio.file.attribute.FileTime fileTime2 = zipArchiveEntry1.getLastAccessTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) zipArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setCompressedSize((long) (byte) 0);
        zipArchiveEntry1.setCompressedSize(1L);
        zipArchiveEntry1.setComment("hi!");
        java.util.Date date8 = zipArchiveEntry1.getLastModifiedDate();
        long long9 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setComment("");
        long long12 = zipArchiveEntry1.getCrc();
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 15:59:59 PST 1969");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry10.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = zipArchiveEntry10.getExtraFields();
        zipArchiveEntry10.setComment("hi!");
        zipArchiveEntry10.setInternalAttributes((int) (byte) 10);
        int int18 = zipArchiveEntry10.getUnixMode();
        java.lang.String str19 = zipArchiveEntry10.getComment();
        long long20 = zipArchiveEntry10.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry23.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = zipArchiveEntry23.getExtraFields();
        zipArchiveEntry23.setComment("hi!");
        zipArchiveEntry23.setCrc((long) 0);
        long long31 = zipArchiveEntry23.getSize();
        java.nio.file.attribute.FileTime fileTime32 = zipArchiveEntry23.getLastModifiedTime();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry34 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry34.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = zipArchiveEntry34.getExtraFields();
        zipArchiveEntry34.setComment("hi!");
        long long40 = zipArchiveEntry34.getExternalAttributes();
        zipArchiveEntry34.setTime((long) (short) -1);
        boolean boolean43 = zipArchiveEntry34.isSupportedCompressionMethod();
        java.nio.file.attribute.FileTime fileTime44 = zipArchiveEntry34.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry45 = zipArchiveEntry23.setCreationTime(fileTime44);
        java.util.zip.ZipEntry zipEntry46 = zipArchiveEntry21.setLastAccessTime(fileTime44);
        java.util.zip.ZipEntry zipEntry47 = zipArchiveEntry10.setLastModifiedTime(fileTime44);
        byte[] byteArray48 = zipArchiveEntry10.getLocalFileDataExtra();
        zipArchiveEntry1.setExtra(byteArray48);
        byte[] byteArray50 = zipArchiveEntry1.getLocalFileDataExtra();
        long long51 = zipArchiveEntry1.getSize();
        zipArchiveEntry1.setCompressedSize(97L);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(fileTime32);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "hi!");
        org.junit.Assert.assertNotNull(zipEntry46);
        org.junit.Assert.assertEquals(zipEntry46.toString(), "");
        org.junit.Assert.assertNotNull(zipEntry47);
        org.junit.Assert.assertEquals(zipEntry47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setCrc((long) 0);
        long long9 = zipArchiveEntry1.getSize();
        long long10 = zipArchiveEntry1.getTime();
        zipArchiveEntry1.setCrc(1L);
        long long13 = zipArchiveEntry1.getCrc();
        zipArchiveEntry1.setName("");
        zipArchiveEntry1.setInternalAttributes(0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("");
        zipArchiveEntry1.setName("hi!");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = zipArchiveEntry1.getExtraFields();
        zipArchiveEntry1.setComment("hi!");
        zipArchiveEntry1.setInternalAttributes((int) (byte) 10);
        int int9 = zipArchiveEntry1.getPlatform();
        long long10 = zipArchiveEntry1.getCompressedSize();
        java.util.Date date11 = zipArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 15:59:59 PST 1969");
    }
}

