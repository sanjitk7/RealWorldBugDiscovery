/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 00:04:24 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrowType_ESTest extends ArrowType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "HPpegXv");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getTypesUnderInequality(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<=WuYmMl]");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getTypesUnderShallowEquality(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "HPp6g;v");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getLeastSupertype(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Us_#");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.toAnnotationString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.visit((Visitor<AllType>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "B");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.getPossibleToBooleanOutcomes();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-967));
      Node node1 = new Node(16, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(620);
      Node node1 = new Node(620, node0, node0, node0, 16, 30);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-967));
      Node node1 = new Node(16, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertTrue(boolean0);
      assertFalse(arrowType1.equals((Object)arrowType0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-967), (-967), (-967));
      Node node1 = new Node(16, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(620);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node1 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node0, errorFunctionType0);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, node1.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1027), nodeArray0, 605, 605);
      Node node1 = new Node(605, node0, node0, node0, 54, 30);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node0, arrowType0);
      boolean boolean0 = arrowType1.canTestForShallowEqualityWith(arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1027), nodeArray0, 605, 605);
      Node node1 = new Node(605, node0, node0, node0, (-2842), 30);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Dc");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = JSType.isEquivalent(arrowType0, arrowType0);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8fRc_Mt<v9");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      Node node0 = Node.newString(".jph[hq3t0S>AaE!X", 1, 1);
      Node node1 = new Node(0, node0, node0, 43, (-2351));
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node1, errorFunctionType0);
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, errorFunctionType0);
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      Node node0 = Node.newNumber((double) (-399), 1, (-1));
      Node node1 = new Node((-399), node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType1.hasEqualParameters(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(605);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node0, arrowType0);
      boolean boolean0 = JSType.isSubtypeHelper(arrowType1, arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.hashCode();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ArrowType", 8192, 8192);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, (JSType) null, true);
      arrowType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(605);
      Node node1 = new Node(605, node0, node0, node0, 16, 30);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      arrowType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bVQ");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Dc");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-927));
      Node node1 = new Node(16, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(116);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }
}
