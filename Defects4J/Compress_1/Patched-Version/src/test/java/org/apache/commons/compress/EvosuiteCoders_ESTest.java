/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 23:38:41 GMT 2024
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Coders_ESTest extends Coders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coders coders0 = new Coders();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coders.AES256SHA256Decoder coders_AES256SHA256Decoder0 = new Coders.AES256SHA256Decoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[7];
      InputStream inputStream0 = coders_AES256SHA256Decoder0.decode(bufferedInputStream0, coder0, byteArray0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coders.LZMADecoder coders_LZMADecoder0 = new Coders.LZMADecoder();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      try { 
        coders_BZIP2Decoder0.decode(pipedInputStream0, coder0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2113);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SevenZMethod sevenZMethod0 = SevenZMethod.BZIP2;
      Coders.addEncoder(pipedOutputStream0, sevenZMethod0, (byte[]) null);
      assertEquals(3, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      InputStream inputStream0 = coders_DeflateDecoder0.decode(bufferedInputStream0, coder0, byteArray0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
      byte[] byteArray0 = new byte[0];
      OutputStream outputStream0 = Coders.addEncoder(pipedOutputStream0, sevenZMethod0, byteArray0);
      assertSame(outputStream0, pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Coder coder0 = new Coder();
      InputStream inputStream0 = coders_CopyDecoder0.decode(byteArrayInputStream0, coder0, byteArray0);
      assertSame(inputStream0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2139);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Coders.addEncoder(pipedOutputStream0, sevenZMethod0, byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // method doesn't support writing
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders$CoderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2113);
      Coder coder0 = new Coder();
      try { 
        Coders.addDecoder(pipedInputStream0, coder0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }
}
