/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 29 06:03:46 GMT 2024
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "--";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-org.aache.commons.ci.PosixParJer";
      stringArray0[1] = "-org.aache.commons.ci.PosixParJer";
      stringArray0[2] = "--FBl&V]aiXoTy;2=";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("o", "o", true, "-org. pache.commons.cliPosixParser");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-org. pache.commons.cliPosixParser";
      stringArray0[1] = "-org. pache.commons.cliPosixParser";
      stringArray0[2] = "o";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(5, stringArray1.length);
      assertEquals(6, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("i3sg", "org.apache.commons.cli.PosixParser", false, "org.apache.commons.cli.PosixParser");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-w";
      stringArray0[1] = "-org.apache.commons.cli.PosixParser";
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "-org.aache.commons.ci.PosixParJer";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(18, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      Options options1 = options0.addOption("", false, "");
      String[] stringArray0 = new String[0];
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("S--ZsA", true);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-w";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--", false);
  }
}
