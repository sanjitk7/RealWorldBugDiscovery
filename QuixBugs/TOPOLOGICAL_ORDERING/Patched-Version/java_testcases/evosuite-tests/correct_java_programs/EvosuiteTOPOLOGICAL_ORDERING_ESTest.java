/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 09:53:59 GMT 2024
 */

package correct_java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import correct_java_programs.TOPOLOGICAL_ORDERING;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java_programs.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteTOPOLOGICAL_ORDERING_ESTest extends EvosuiteTOPOLOGICAL_ORDERING_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node node0 = new Node();
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      List<Node> list0 = arrayList0.subList(0, 0);
      arrayList0.add(node0);
      // Undeclared exception!
      try { 
        TOPOLOGICAL_ORDERING.topological_ordering(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node0 = new Node("OdavhTs$,{Qfn336h]", (Node) null);
      arrayList0.add(node0);
      // Undeclared exception!
      try { 
        TOPOLOGICAL_ORDERING.topological_ordering(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = new Node("`");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      ArrayList<Node> arrayList1 = new ArrayList<Node>();
      Node node1 = new Node("`", arrayList1, arrayList0);
      arrayList1.add(node0);
      arrayList0.add(node1);
      ArrayList<Node> arrayList2 = TOPOLOGICAL_ORDERING.topological_ordering(arrayList1);
      assertEquals(2, arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Node node0 = new Node("`");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      Node node1 = new Node("`", arrayList0, arrayList0);
      arrayList0.add(node1);
      arrayList0.add(node0);
      ArrayList<Node> arrayList1 = TOPOLOGICAL_ORDERING.topological_ordering(arrayList0);
      assertEquals(1, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Node node0 = new Node("`");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      Node node1 = new Node("`", arrayList0, arrayList0);
      arrayList0.add(node1);
      ArrayList<Node> arrayList1 = TOPOLOGICAL_ORDERING.topological_ordering(arrayList0);
      assertFalse(arrayList1.contains(node1));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TOPOLOGICAL_ORDERING tOPOLOGICAL_ORDERING0 = new TOPOLOGICAL_ORDERING();
  }
}
