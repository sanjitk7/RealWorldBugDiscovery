import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTestNEXT_PALINDROMEBuggy2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1001");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass7 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1002");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1003");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass37 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1004");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass33 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1005");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1006");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass20 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1007");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass43 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1008");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass44 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1009");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass30 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1010");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1011");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass29 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[36, 126]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1012");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1013");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass38 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1014");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass21 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1015");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1016");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass48 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1017");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass30 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1018");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1019");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass52 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1020");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass31 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1021");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1022");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass43 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1023");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass31 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1024");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1025");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass26 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1026");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1027");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1028");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass30 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[37, 127]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1029");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1030");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1031");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass30 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1032");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass10 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1033");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass25 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1034");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1035");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1036");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1037");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass48 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1038");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1039");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[64]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1040");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass31 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1041");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1042");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass10 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1043");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1044");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1045");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass29 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[127]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1046");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1047");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1048");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1049");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass18 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1050");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass44 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1051");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1052");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass31 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1053");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass29 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1054");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass46 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1055");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass24 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1056");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1057");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass28 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1058");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1059");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass45 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1060");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass45 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1061");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1062");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1063");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1064");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass26 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1065");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass9 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1066");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass31 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[38, 128]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1067");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1068");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass35 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1069");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[65]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1070");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1071");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass28 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1072");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1073");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[66]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1074");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1075");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1076");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass46 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1077");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass44 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1078");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass11 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1079");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1080");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass47 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1081");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass48 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1082");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1083");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1084");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1085");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass40 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1086");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1087");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1088");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1089");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass47 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1090");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass40 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1091");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1092");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1093");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1094");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass27 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1095");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1096");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1097");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass49 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1098");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1099");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass31 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1100");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1101");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1102");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass32 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1103");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1104");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1105");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass39 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1106");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass50 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1107");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass39 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1108");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1109");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass11 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1110");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1111");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1112");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass24 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1113");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass46 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1114");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1115");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1116");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass23 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1117");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass33 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1118");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1119");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1120");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass35 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1121");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass50 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1122");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1123");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1124");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass26 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1125");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass33 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1126");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass30 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[128]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1127");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1128");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1129");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1130");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1131");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass49 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1132");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass51 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1133");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1134");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass32 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[39, 129]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1135");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass34 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1136");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 3, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 3, 2]" + "'", str35, "[35, 3, 2]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1137");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1138");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass12 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1139");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass9 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1140");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass35 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1141");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1142");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1143");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass36 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1144");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1145");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass19 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1146");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1147");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass25 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1148");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass32 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1149");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass5 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1150");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1151");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass28 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1152");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass53 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 48, 145, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[100, 48, 145, 0]" + "'", str52, "[100, 48, 145, 0]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1153");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass43 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1154");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1155");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1156");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass6 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1157");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass8 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1158");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1159");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1160");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass33 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1161");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass33 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1162");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass50 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1163");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1164");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass14 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 59, 59, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 10, 58, 58, 10, 0]" + "'", str12, "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 10, 59, 59, 10, 0]" + "'", str13, "[10, 10, 59, 59, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1165");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass46 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1166");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass48 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1167");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass34 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1168");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass49 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1169");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass38 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1170");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass19 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1171");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass47 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1172");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass48 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1173");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass33 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1174");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1175");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1176");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1177");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass18 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1178");
        int[] intArray4 = new int[] { (byte) 0, (short) 100, (short) 1, (short) 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass7 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 102, 3, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 2, 100]" + "'", str5, "[0, 101, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 3, 100]" + "'", str6, "[0, 102, 3, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1179");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass49 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1180");
        int[] intArray4 = new int[] { (byte) 0, (short) 100, (short) 1, (short) 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass6 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 101, 2, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 2, 100]" + "'", str5, "[0, 101, 2, 100]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1181");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[67]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1182");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass51 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9, 9]" + "'", str50, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1183");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass33 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[40, 130]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1184");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1185");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass52 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1186");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass35 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[68]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1187");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass26 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 100, 71, 51, 100, 52]" + "'", str25, "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1188");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass48 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1189");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass49 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6]" + "'", str48, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1190");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1191");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1192");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1193");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[69]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1194");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass34 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1195");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass28 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1196");
        int[] intArray6 = new int[] { (byte) 0, (short) 1, 1, (short) 1, 1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass10 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, 4, 4, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 1, 2, 2, 1, 0]" + "'", str7, "[0, 1, 2, 2, 1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 1, 3, 3, 1, 0]" + "'", str8, "[0, 1, 3, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 1, 4, 4, 1, 0]" + "'", str9, "[0, 1, 4, 4, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1197");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1198");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1199");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1200");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1201");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass27 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 72, 52, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 100, 71, 51, 100, 52]" + "'", str25, "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 100, 72, 52, 100, 52]" + "'", str26, "[-1, 100, 72, 52, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1202");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass14 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 109, 8, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 7, -1]" + "'", str12, "[0, 108, 7, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 8, -1]" + "'", str13, "[0, 109, 8, -1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1203");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass25 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1204");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass36 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1205");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1206");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass42 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1207");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass34 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[41, 131]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1208");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass54 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1209");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass14 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1210");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1211");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass50 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 6, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 6, 4]" + "'", str49, "[5, 6, 4]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1212");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass18 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1213");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass35 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[42, 132]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1214");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1215");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass39 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1216");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[70]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1217");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass30 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1218");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass47 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1219");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass49 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1220");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass38 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1221");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass48 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1222");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass13 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1223");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass26 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1224");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1225");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1226");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 108, 7, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 7, -1]" + "'", str12, "[0, 108, 7, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1227");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass29 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1228");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass40 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[73]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1229");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass51 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1230");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass51 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 45, 56, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 45, 56, 10]" + "'", str50, "[1, 45, 56, 10]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1231");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 1, 2]" + "'", str34, "[3, 1, 2]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1232");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1233");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 10, 58, 58, 10, 0]" + "'", str12, "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1234");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass47 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1235");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass35 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1236");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass51 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1237");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass7 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1238");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1239");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass51 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 1]" + "'", str50, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1240");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass39 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[72]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1241");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1242");
        int[] intArray6 = new int[] { (byte) 0, (short) 1, 1, (short) 1, 1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass8 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, 2, 2, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 1, 2, 2, 1, 0]" + "'", str7, "[0, 1, 2, 2, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1243");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 32, 21, 10, -1]" + "'", str16, "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1244");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass52 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9, 9]" + "'", str50, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 0, 1]" + "'", str51, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1245");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1246");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass15 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1247");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1248");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass53 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9, 9]" + "'", str50, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 0, 1]" + "'", str51, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1249");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass47 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 143, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[35, 143, 1]" + "'", str46, "[35, 143, 1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1250");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1251");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass37 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[44, 134]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1252");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1253");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass48 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 144, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[35, 143, 1]" + "'", str46, "[35, 143, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[35, 144, 1]" + "'", str47, "[35, 144, 1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1254");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass16 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1255");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1256");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass50 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6]" + "'", str48, "[6]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[7]" + "'", str49, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1257");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass52 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1258");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass11 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1259");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass50 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1260");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass40 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 34, 70, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 34, 70, 97]" + "'", str39, "[97, 34, 70, 97]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1261");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass11 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1262");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass30 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1263");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass54 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9, 9]" + "'", str50, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 0, 1]" + "'", str51, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[2, 2]" + "'", str53, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1264");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass14 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1265");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass6 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1266");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 43, 144, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[52, 43, 144, 0]" + "'", str48, "[52, 43, 144, 0]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1267");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass35 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1268");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass39 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[46, 136]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1269");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass20 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1270");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass38 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[45, 135]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1271");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass38 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1272");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[130]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1273");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1274");
        int[] intArray6 = new int[] { (byte) 0, (short) 1, 1, (short) 1, 1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass11 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, 5, 5, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 1, 2, 2, 1, 0]" + "'", str7, "[0, 1, 2, 2, 1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 1, 3, 3, 1, 0]" + "'", str8, "[0, 1, 3, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 1, 4, 4, 1, 0]" + "'", str9, "[0, 1, 4, 4, 1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 1, 5, 5, 1, 0]" + "'", str10, "[0, 1, 5, 5, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1275");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass40 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[47, 137]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[47, 137]" + "'", str39, "[47, 137]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1276");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass34 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 102, 9, 1, 1]" + "'", str33, "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1277");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1278");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 1, 2]" + "'", str34, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 2, 2]" + "'", str35, "[3, 2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1279");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass35 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 103, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 102, 9, 1, 1]" + "'", str33, "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 103, 0, 2, 1]" + "'", str34, "[100, 103, 0, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1280");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass52 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 1]" + "'", str50, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 1]" + "'", str51, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1281");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass39 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1282");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 4, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 3, 2]" + "'", str35, "[35, 3, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 4, 2]" + "'", str36, "[35, 4, 2]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1283");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1284");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass35 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1285");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 44, 145, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[52, 43, 144, 0]" + "'", str48, "[52, 43, 144, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[52, 44, 145, 0]" + "'", str49, "[52, 44, 145, 0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1286");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass16 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1287");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1288");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass7 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1289");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass17 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 4, 1]" + "'", str16, "[0, 4, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1290");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass18 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 22, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 32, 21, 10, -1]" + "'", str16, "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[10, 32, 22, 10, -1]" + "'", str17, "[10, 32, 22, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1291");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass13 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1292");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass37 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1293");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 5, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 5, 3]" + "'", str38, "[2, 5, 3]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1294");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass21 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 4, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 33, 3, 101, 100]" + "'", str19, "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 33, 4, 101, 100]" + "'", str20, "[1, 33, 4, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1295");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass36 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[43, 133]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1296");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass36 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1297");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass32 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1298");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1299");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass52 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 46, 57, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 45, 56, 10]" + "'", str50, "[1, 45, 56, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 46, 57, 10]" + "'", str51, "[1, 46, 57, 10]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1300");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 6, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 5, 3]" + "'", str38, "[2, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 6, 3]" + "'", str39, "[2, 6, 3]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1301");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass51 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 45, 146, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[52, 43, 144, 0]" + "'", str48, "[52, 43, 144, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[52, 44, 145, 0]" + "'", str49, "[52, 44, 145, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[52, 45, 146, 0]" + "'", str50, "[52, 45, 146, 0]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1302");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass50 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7]" + "'", str48, "[7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8]" + "'", str49, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1303");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass36 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1304");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass55 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1305");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass22 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 5, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 33, 3, 101, 100]" + "'", str19, "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 33, 4, 101, 100]" + "'", str20, "[1, 33, 4, 101, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 33, 5, 101, 100]" + "'", str21, "[1, 33, 5, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1306");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass31 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1307");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass37 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1308");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass42 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[75]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1309");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass15 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1310");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass54 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, -1, 99, 99, -1, 0]" + "'", str53, "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1311");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass39 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 10, 133, 0, 10]" + "'", str38, "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1312");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass22 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1313");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass46 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2, 2]" + "'", str44, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3, 3]" + "'", str45, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1314");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 35, 71, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 34, 70, 97]" + "'", str39, "[97, 34, 70, 97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 35, 71, 97]" + "'", str40, "[97, 35, 71, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1315");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1316");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1317");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass10 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1318");
        int[] intArray6 = new int[] { (byte) 0, (short) 1, 1, (short) 1, 1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, 3, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 1, 2, 2, 1, 0]" + "'", str7, "[0, 1, 2, 2, 1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 1, 3, 3, 1, 0]" + "'", str8, "[0, 1, 3, 3, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1319");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[48, 138]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[47, 137]" + "'", str39, "[47, 137]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[48, 138]" + "'", str40, "[48, 138]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1320");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass23 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[102, 0, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[102, 0, 2]" + "'", str22, "[102, 0, 2]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1321");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass17 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1322");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass53 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1323");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass53 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1324");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 2, 2, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 0, 101, 0]" + "'", str14, "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 1, 101, 0]" + "'", str15, "[1, 2, 1, 101, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 2, 2, 101, 0]" + "'", str16, "[1, 2, 2, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1325");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass51 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 7, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 6, 4]" + "'", str49, "[5, 6, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 7, 4]" + "'", str50, "[5, 7, 4]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1326");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass33 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1327");
        int[] intArray4 = new int[] { (byte) 0, (short) 100, (short) 1, (short) 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 103, 4, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 2, 100]" + "'", str5, "[0, 101, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 3, 100]" + "'", str6, "[0, 102, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 4, 100]" + "'", str7, "[0, 103, 4, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1328");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1329");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass38 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[71]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1330");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass52 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1331");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 0, 101, 0]" + "'", str14, "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1332");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass17 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1333");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass34 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1334");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass21 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 4, 1]" + "'", str16, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 5, 1]" + "'", str17, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 6, 1]" + "'", str18, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 7, 1]" + "'", str19, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 8, 1]" + "'", str20, "[0, 8, 1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1335");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass12 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1336");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 36, 72, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 34, 70, 97]" + "'", str39, "[97, 34, 70, 97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 35, 71, 97]" + "'", str40, "[97, 35, 71, 97]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 36, 72, 97]" + "'", str41, "[97, 36, 72, 97]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1337");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass19 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1338");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass52 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 8, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 6, 4]" + "'", str49, "[5, 6, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 7, 4]" + "'", str50, "[5, 7, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 8, 4]" + "'", str51, "[5, 8, 4]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1339");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1340");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass21 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1341");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1342");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[129]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1343");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass19 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 4, 1]" + "'", str16, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 5, 1]" + "'", str17, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 6, 1]" + "'", str18, "[0, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1344");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass23 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 6, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 33, 3, 101, 100]" + "'", str19, "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 33, 4, 101, 100]" + "'", str20, "[1, 33, 4, 101, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 33, 5, 101, 100]" + "'", str21, "[1, 33, 5, 101, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 33, 6, 101, 100]" + "'", str22, "[1, 33, 6, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1345");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass51 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7]" + "'", str48, "[7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8]" + "'", str49, "[8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9]" + "'", str50, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1346");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 1, 2]" + "'", str34, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 2, 2]" + "'", str35, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3, 2]" + "'", str36, "[3, 3, 2]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1347");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass37 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1348");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1349");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1350");
        int[] intArray4 = new int[] { (byte) 0, (short) 100, (short) 1, (short) 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 104, 5, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 2, 100]" + "'", str5, "[0, 101, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 3, 100]" + "'", str6, "[0, 102, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 4, 100]" + "'", str7, "[0, 103, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 5, 100]" + "'", str8, "[0, 104, 5, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1351");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass33 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1352");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass15 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 110, 9, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 7, -1]" + "'", str12, "[0, 108, 7, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 8, -1]" + "'", str13, "[0, 109, 8, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 110, 9, -1]" + "'", str14, "[0, 110, 9, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1353");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass41 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[74]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1354");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass54 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 1]" + "'", str50, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 1]" + "'", str51, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1, 1]" + "'", str53, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1355");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass53 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 8, 8, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[101, 8, 8, 56]" + "'", str52, "[101, 8, 8, 56]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1356");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass7 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1357");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[132]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1358");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1359");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass43 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[76]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[76]" + "'", str42, "[76]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1360");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass18 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 4, 1]" + "'", str16, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 5, 1]" + "'", str17, "[0, 5, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1361");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1362");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass40 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 134, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 10, 133, 0, 10]" + "'", str38, "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 10, 134, 0, 10]" + "'", str39, "[100, 10, 134, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1363");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass12 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1364");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass39 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 13, 1, 1, 13, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 13, 0, 0, 13, -1]" + "'", str37, "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 13, 1, 1, 13, -1]" + "'", str38, "[-1, 13, 1, 1, 13, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1365");
        int[] intArray6 = new int[] { '#', (byte) -1, (byte) 1, (-1), (short) 100, 100 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass8 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, -1, 2, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, -1, 2, 0, 100, 100]" + "'", str7, "[35, -1, 2, 0, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1366");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass28 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 73, 53, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 100, 71, 51, 100, 52]" + "'", str25, "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 100, 72, 52, 100, 52]" + "'", str26, "[-1, 100, 72, 52, 100, 52]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 100, 73, 53, 100, 52]" + "'", str27, "[-1, 100, 73, 53, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1367");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass39 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 43, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, -1, 42, 100, -1]" + "'", str37, "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, -1, 43, 100, -1]" + "'", str38, "[100, -1, 43, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1368");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass16 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 7, -1]" + "'", str12, "[0, 108, 7, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 8, -1]" + "'", str13, "[0, 109, 8, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 110, 9, -1]" + "'", str14, "[0, 110, 9, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 0]" + "'", str15, "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1369");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass51 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6]" + "'", str48, "[6]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[7]" + "'", str49, "[7]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[8]" + "'", str50, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1370");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass55 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 100, 100, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, -1, 99, 99, -1, 0]" + "'", str53, "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, -1, 100, 100, -1, 0]" + "'", str54, "[-1, -1, 100, 100, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1371");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1372");
        int[] intArray3 = new int[] { (byte) -1, (short) 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass20 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 2, 0]" + "'", str4, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 3, 0]" + "'", str5, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 4, 0]" + "'", str6, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 5, 0]" + "'", str7, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 6, 0]" + "'", str8, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 7, 0]" + "'", str9, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 8, 0]" + "'", str10, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 9, 0]" + "'", str11, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 0, 1]" + "'", str12, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 1, 1]" + "'", str13, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 2, 1]" + "'", str14, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 3, 1]" + "'", str15, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 4, 1]" + "'", str16, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 5, 1]" + "'", str17, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 6, 1]" + "'", str18, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 7, 1]" + "'", str19, "[0, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1373");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass51 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1374");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass42 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1375");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1376");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 2, 1, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 0, 101, 0]" + "'", str14, "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 1, 101, 0]" + "'", str15, "[1, 2, 1, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1377");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass54 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 150, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 150, 10]" + "'", str53, "[-1, 150, 10]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1378");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass56 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1379");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass44 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1380");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1381");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass45 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2, 2]" + "'", str44, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1382");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass43 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 37, 73, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 34, 70, 97]" + "'", str39, "[97, 34, 70, 97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 35, 71, 97]" + "'", str40, "[97, 35, 71, 97]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 36, 72, 97]" + "'", str41, "[97, 36, 72, 97]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 37, 73, 97]" + "'", str42, "[97, 37, 73, 97]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1383");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass34 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 39, 129, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 39, 129, 97]" + "'", str33, "[0, 39, 129, 97]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1384");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass34 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1385");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[131]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1386");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass15 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 60, 60, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 10, 58, 58, 10, 0]" + "'", str12, "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 10, 59, 59, 10, 0]" + "'", str13, "[10, 10, 59, 59, 10, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 10, 60, 60, 10, 0]" + "'", str14, "[10, 10, 60, 60, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1387");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass19 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 5, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 101]" + "'", str17, "[2, 4, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 101]" + "'", str18, "[2, 5, 101]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1388");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass18 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 4, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 101]" + "'", str17, "[2, 4, 101]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1389");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass36 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 41, 131, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 39, 129, 97]" + "'", str33, "[0, 39, 129, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 40, 130, 97]" + "'", str34, "[0, 40, 130, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 41, 131, 97]" + "'", str35, "[0, 41, 131, 97]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1390");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass28 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1391");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 74, 54, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 100, 71, 51, 100, 52]" + "'", str25, "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 100, 72, 52, 100, 52]" + "'", str26, "[-1, 100, 72, 52, 100, 52]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 100, 73, 53, 100, 52]" + "'", str27, "[-1, 100, 73, 53, 100, 52]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 100, 74, 54, 100, 52]" + "'", str28, "[-1, 100, 74, 54, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1392");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass56 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 101, 101, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, -1, 99, 99, -1, 0]" + "'", str53, "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, -1, 100, 100, -1, 0]" + "'", str54, "[-1, -1, 100, 100, -1, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, -1, 101, 101, -1, 0]" + "'", str55, "[-1, -1, 101, 101, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1393");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass40 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 13, 2, 2, 13, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 13, 0, 0, 13, -1]" + "'", str37, "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 13, 1, 1, 13, -1]" + "'", str38, "[-1, 13, 1, 1, 13, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 13, 2, 2, 13, -1]" + "'", str39, "[-1, 13, 2, 2, 13, -1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1394");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass48 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2, 2]" + "'", str44, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3, 3]" + "'", str45, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4, 4]" + "'", str46, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 5]" + "'", str47, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1395");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass49 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 145, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[35, 143, 1]" + "'", str46, "[35, 143, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[35, 144, 1]" + "'", str47, "[35, 144, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[35, 145, 1]" + "'", str48, "[35, 145, 1]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1396");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass46 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[79]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[76]" + "'", str42, "[76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[77]" + "'", str43, "[77]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[78]" + "'", str44, "[78]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[79]" + "'", str45, "[79]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1397");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass38 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 13, 0, 0, 13, -1]" + "'", str37, "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1398");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 1, 2]" + "'", str34, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 2, 2]" + "'", str35, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3, 2]" + "'", str36, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[3, 4, 2]" + "'", str37, "[3, 4, 2]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1399");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass40 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1400");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass56 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 152, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 150, 10]" + "'", str53, "[-1, 150, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 151, 10]" + "'", str54, "[-1, 151, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 152, 10]" + "'", str55, "[-1, 152, 10]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1401");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass20 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 33, 3, 101, 100]" + "'", str19, "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1402");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass54 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 49, 146, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[100, 48, 145, 0]" + "'", str52, "[100, 48, 145, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[100, 49, 146, 0]" + "'", str53, "[100, 49, 146, 0]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1403");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass57 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 153, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 150, 10]" + "'", str53, "[-1, 150, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 151, 10]" + "'", str54, "[-1, 151, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 152, 10]" + "'", str55, "[-1, 152, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 153, 10]" + "'", str56, "[-1, 153, 10]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1404");
        int[] intArray2 = new int[] { (byte) 10, (byte) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass4 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[11, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 2]" + "'", str3, "[11, 2]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1405");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass6 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1406");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass55 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 1]" + "'", str50, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 1]" + "'", str51, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1, 1]" + "'", str53, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[1, 1]" + "'", str54, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1407");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass52 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 46, 147, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[52, 43, 144, 0]" + "'", str48, "[52, 43, 144, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[52, 44, 145, 0]" + "'", str49, "[52, 44, 145, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[52, 45, 146, 0]" + "'", str50, "[52, 45, 146, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[52, 46, 147, 0]" + "'", str51, "[52, 46, 147, 0]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1408");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass32 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1409");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass42 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[49, 139]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[47, 137]" + "'", str39, "[47, 137]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[48, 138]" + "'", str40, "[48, 138]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[49, 139]" + "'", str41, "[49, 139]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1410");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 62, 62, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 10, 58, 58, 10, 0]" + "'", str12, "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 10, 59, 59, 10, 0]" + "'", str13, "[10, 10, 59, 59, 10, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 10, 60, 60, 10, 0]" + "'", str14, "[10, 10, 60, 60, 10, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 10, 61, 61, 10, 0]" + "'", str15, "[10, 10, 61, 61, 10, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 10, 62, 62, 10, 0]" + "'", str16, "[10, 10, 62, 62, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1411");
        int[] intArray2 = new int[] { '4', (short) 1 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass55 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 2]" + "'", str3, "[53, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 3]" + "'", str4, "[54, 3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[55, 4]" + "'", str5, "[55, 4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[56, 5]" + "'", str6, "[56, 5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[57, 6]" + "'", str7, "[57, 6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[58, 7]" + "'", str8, "[58, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[59, 8]" + "'", str9, "[59, 8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[60, 9]" + "'", str10, "[60, 9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 0, 1]" + "'", str11, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 2]" + "'", str13, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3, 3]" + "'", str14, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4, 4]" + "'", str15, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5, 5]" + "'", str16, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6, 6]" + "'", str17, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7, 7]" + "'", str18, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8, 8]" + "'", str19, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9, 9]" + "'", str20, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 0, 1]" + "'", str21, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 2]" + "'", str23, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 3]" + "'", str24, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4, 4]" + "'", str25, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5, 5]" + "'", str26, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6, 6]" + "'", str27, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7, 7]" + "'", str28, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8, 8]" + "'", str29, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9, 9]" + "'", str30, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 0, 1]" + "'", str31, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 2]" + "'", str33, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 3]" + "'", str34, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 4]" + "'", str35, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5, 5]" + "'", str36, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6, 6]" + "'", str37, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7, 7]" + "'", str38, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8, 8]" + "'", str39, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9, 9]" + "'", str40, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 0, 1]" + "'", str41, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2, 2]" + "'", str43, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 3]" + "'", str44, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 4]" + "'", str45, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 5]" + "'", str46, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6, 6]" + "'", str47, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7, 7]" + "'", str48, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8, 8]" + "'", str49, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9, 9]" + "'", str50, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 0, 1]" + "'", str51, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[2, 2]" + "'", str53, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[3, 3]" + "'", str54, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1412");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass54 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 9, 9, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[101, 8, 8, 56]" + "'", str52, "[101, 8, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[101, 9, 9, 56]" + "'", str53, "[101, 9, 9, 56]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1413");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 107, 17, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 15, 1]" + "'", str9, "[0, 105, 15, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 16, 1]" + "'", str10, "[0, 106, 16, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 17, 1]" + "'", str11, "[0, 107, 17, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1414");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass19 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 23, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 32, 21, 10, -1]" + "'", str16, "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[10, 32, 22, 10, -1]" + "'", str17, "[10, 32, 22, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[10, 32, 23, 10, -1]" + "'", str18, "[10, 32, 23, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1415");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass10 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 105, 15, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 15, 1]" + "'", str9, "[0, 105, 15, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1416");
        int[] intArray6 = new int[] { '#', (byte) -1, (byte) 1, (-1), (short) 100, 100 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, -1, 3, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, -1, 2, 0, 100, 100]" + "'", str7, "[35, -1, 2, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, -1, 3, 1, 100, 100]" + "'", str8, "[35, -1, 3, 1, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1417");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1418");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass47 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2, 2]" + "'", str44, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3, 3]" + "'", str45, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4, 4]" + "'", str46, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1419");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass49 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7]" + "'", str48, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1420");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass9 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1421");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass41 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 135, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 10, 133, 0, 10]" + "'", str38, "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 10, 134, 0, 10]" + "'", str39, "[100, 10, 134, 0, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 10, 135, 0, 10]" + "'", str40, "[100, 10, 135, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1422");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass54 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 48, 59, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 45, 56, 10]" + "'", str50, "[1, 45, 56, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 46, 57, 10]" + "'", str51, "[1, 46, 57, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 47, 58, 10]" + "'", str52, "[1, 47, 58, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1, 48, 59, 10]" + "'", str53, "[1, 48, 59, 10]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1423");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass56 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 51, 148, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[100, 48, 145, 0]" + "'", str52, "[100, 48, 145, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[100, 49, 146, 0]" + "'", str53, "[100, 49, 146, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[100, 50, 147, 0]" + "'", str54, "[100, 50, 147, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[100, 51, 148, 0]" + "'", str55, "[100, 51, 148, 0]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1424");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass8 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1425");
        int[] intArray6 = new int[] { (short) 10, (byte) 10, '4', '4', (short) 10, 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass16 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 10, 61, 61, 10, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 10, 53, 53, 10, 0]" + "'", str7, "[10, 10, 53, 53, 10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 10, 54, 54, 10, 0]" + "'", str8, "[10, 10, 54, 54, 10, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 10, 55, 55, 10, 0]" + "'", str9, "[10, 10, 55, 55, 10, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 10, 56, 56, 10, 0]" + "'", str10, "[10, 10, 56, 56, 10, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 10, 57, 57, 10, 0]" + "'", str11, "[10, 10, 57, 57, 10, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 10, 58, 58, 10, 0]" + "'", str12, "[10, 10, 58, 58, 10, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 10, 59, 59, 10, 0]" + "'", str13, "[10, 10, 59, 59, 10, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 10, 60, 60, 10, 0]" + "'", str14, "[10, 10, 60, 60, 10, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 10, 61, 61, 10, 0]" + "'", str15, "[10, 10, 61, 61, 10, 0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1426");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass58 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 105, 153, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 105, 153, 100]" + "'", str57, "[-1, 105, 153, 100]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1427");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass44 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[77]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[76]" + "'", str42, "[76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[77]" + "'", str43, "[77]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1428");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass7 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1429");
        int[] intArray4 = new int[] { 100, (byte) 100, (byte) 100, (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass6 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 101, 101, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 101, 101, 0]" + "'", str5, "[100, 101, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1430");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass8 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 54, 1, 100]" + "'", str7, "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1431");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass27 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1432");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass57 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 102, 102, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, -1, 99, 99, -1, 0]" + "'", str53, "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, -1, 100, 100, -1, 0]" + "'", str54, "[-1, -1, 100, 100, -1, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, -1, 101, 101, -1, 0]" + "'", str55, "[-1, -1, 101, 101, -1, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, -1, 102, 102, -1, 0]" + "'", str56, "[-1, -1, 102, 102, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1433");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1434");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass35 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 40, 130, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 39, 129, 97]" + "'", str33, "[0, 39, 129, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 40, 130, 97]" + "'", str34, "[0, 40, 130, 97]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1435");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass43 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[50, 140]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[47, 137]" + "'", str39, "[47, 137]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[48, 138]" + "'", str40, "[48, 138]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[49, 139]" + "'", str41, "[49, 139]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[50, 140]" + "'", str42, "[50, 140]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1436");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass52 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7]" + "'", str48, "[7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8]" + "'", str49, "[8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9]" + "'", str50, "[9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 1]" + "'", str51, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1437");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass35 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 7, 7, 37, 1]" + "'", str34, "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1438");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass55 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 50, 147, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[100, 48, 145, 0]" + "'", str52, "[100, 48, 145, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[100, 49, 146, 0]" + "'", str53, "[100, 49, 146, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[100, 50, 147, 0]" + "'", str54, "[100, 50, 147, 0]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1439");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass10 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 7, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 7, 0]" + "'", str9, "[0, 7, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1440");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass55 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[102, 0, 0, 57]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[101, 8, 8, 56]" + "'", str52, "[101, 8, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[101, 9, 9, 56]" + "'", str53, "[101, 9, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[102, 0, 0, 57]" + "'", str54, "[102, 0, 0, 57]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1441");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass24 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[102, 1, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[102, 0, 2]" + "'", str22, "[102, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[102, 1, 2]" + "'", str23, "[102, 1, 2]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1442");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 5, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 3, 2]" + "'", str35, "[35, 3, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 4, 2]" + "'", str36, "[35, 4, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 5, 2]" + "'", str37, "[35, 5, 2]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1443");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass20 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 24, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 32, 21, 10, -1]" + "'", str16, "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[10, 32, 22, 10, -1]" + "'", str17, "[10, 32, 22, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[10, 32, 23, 10, -1]" + "'", str18, "[10, 32, 23, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[10, 32, 24, 10, -1]" + "'", str19, "[10, 32, 24, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1444");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass55 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 151, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 150, 10]" + "'", str53, "[-1, 150, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 151, 10]" + "'", str54, "[-1, 151, 10]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1445");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass36 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 103, 1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 102, 9, 1, 1]" + "'", str33, "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 103, 0, 2, 1]" + "'", str34, "[100, 103, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 103, 1, 2, 1]" + "'", str35, "[100, 103, 1, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1446");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1447");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 8, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 5, 3]" + "'", str38, "[2, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 6, 3]" + "'", str39, "[2, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[2, 7, 3]" + "'", str40, "[2, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[2, 8, 3]" + "'", str41, "[2, 8, 3]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1448");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1449");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[134]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1450");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass41 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 13, 3, 3, 13, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 13, 0, 0, 13, -1]" + "'", str37, "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 13, 1, 1, 13, -1]" + "'", str38, "[-1, 13, 1, 1, 13, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 13, 2, 2, 13, -1]" + "'", str39, "[-1, 13, 2, 2, 13, -1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 13, 3, 3, 13, -1]" + "'", str40, "[-1, 13, 3, 3, 13, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1451");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass57 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1452");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass11 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 8, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 7, 0]" + "'", str9, "[0, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 8, 0]" + "'", str10, "[0, 8, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1453");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass20 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 6, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 101]" + "'", str17, "[2, 4, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 101]" + "'", str18, "[2, 5, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 101]" + "'", str19, "[2, 6, 101]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1454");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1455");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass43 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1456");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass19 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 2, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 0, 101, 0]" + "'", str14, "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 1, 101, 0]" + "'", str15, "[1, 2, 1, 101, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 2, 2, 101, 0]" + "'", str16, "[1, 2, 2, 101, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 3, 101, 0]" + "'", str17, "[1, 2, 3, 101, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 2, 4, 101, 0]" + "'", str18, "[1, 2, 4, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1457");
        int[] intArray0 = new int[] {};
        java.lang.String str1 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray0);
        java.lang.Class<?> wildcardClass53 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[1, 1]" + "'", str1, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1, 1]" + "'", str2, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1, 1]" + "'", str3, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1]" + "'", str4, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1]" + "'", str5, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1]" + "'", str6, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1]" + "'", str7, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1]" + "'", str8, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1]" + "'", str9, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1]" + "'", str10, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1]" + "'", str15, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1]" + "'", str16, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1]" + "'", str17, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1]" + "'", str18, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1]" + "'", str19, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1]" + "'", str20, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1]" + "'", str25, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1]" + "'", str26, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1]" + "'", str27, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1]" + "'", str28, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1]" + "'", str29, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1]" + "'", str30, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1]" + "'", str35, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1]" + "'", str36, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1]" + "'", str37, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 1]" + "'", str38, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 1]" + "'", str39, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 1]" + "'", str40, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 1]" + "'", str41, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 1]" + "'", str42, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 1]" + "'", str45, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 1]" + "'", str46, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 1]" + "'", str47, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 1]" + "'", str48, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 1]" + "'", str49, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 1]" + "'", str50, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 1]" + "'", str51, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 1]" + "'", str52, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1458");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass37 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 103, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 102, 9, 1, 1]" + "'", str33, "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 103, 0, 2, 1]" + "'", str34, "[100, 103, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 103, 1, 2, 1]" + "'", str35, "[100, 103, 1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 103, 2, 2, 1]" + "'", str36, "[100, 103, 2, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1459");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass5 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1460");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass38 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, -1, 42, 100, -1]" + "'", str37, "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1461");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[135]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1462");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass47 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[80]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[76]" + "'", str42, "[76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[77]" + "'", str43, "[77]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[78]" + "'", str44, "[78]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[79]" + "'", str45, "[79]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[80]" + "'", str46, "[80]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1463");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass42 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 136, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 10, 133, 0, 10]" + "'", str38, "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 10, 134, 0, 10]" + "'", str39, "[100, 10, 134, 0, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 10, 135, 0, 10]" + "'", str40, "[100, 10, 135, 0, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 10, 136, 0, 10]" + "'", str41, "[100, 10, 136, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1464");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass59 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 106, 154, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 105, 153, 100]" + "'", str57, "[-1, 105, 153, 100]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, 106, 154, 100]" + "'", str58, "[-1, 106, 154, 100]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1465");
        int[] intArray2 = new int[] { 10, 100 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass44 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[51, 141]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 101]" + "'", str3, "[11, 101]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 102]" + "'", str4, "[12, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 103]" + "'", str5, "[13, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 104]" + "'", str6, "[14, 104]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 105]" + "'", str7, "[15, 105]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 106]" + "'", str8, "[16, 106]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 107]" + "'", str9, "[17, 107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 108]" + "'", str10, "[18, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 109]" + "'", str11, "[19, 109]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[20, 110]" + "'", str12, "[20, 110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[21, 111]" + "'", str13, "[21, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[22, 112]" + "'", str14, "[22, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[23, 113]" + "'", str15, "[23, 113]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[24, 114]" + "'", str16, "[24, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[25, 115]" + "'", str17, "[25, 115]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[26, 116]" + "'", str18, "[26, 116]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[27, 117]" + "'", str19, "[27, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[28, 118]" + "'", str20, "[28, 118]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[29, 119]" + "'", str21, "[29, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[30, 120]" + "'", str22, "[30, 120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[31, 121]" + "'", str23, "[31, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[32, 122]" + "'", str24, "[32, 122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[33, 123]" + "'", str25, "[33, 123]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 124]" + "'", str26, "[34, 124]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 125]" + "'", str27, "[35, 125]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[36, 126]" + "'", str28, "[36, 126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[37, 127]" + "'", str29, "[37, 127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[38, 128]" + "'", str30, "[38, 128]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[39, 129]" + "'", str31, "[39, 129]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[40, 130]" + "'", str32, "[40, 130]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[41, 131]" + "'", str33, "[41, 131]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[42, 132]" + "'", str34, "[42, 132]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[43, 133]" + "'", str35, "[43, 133]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[44, 134]" + "'", str36, "[44, 134]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[45, 135]" + "'", str37, "[45, 135]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[46, 136]" + "'", str38, "[46, 136]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[47, 137]" + "'", str39, "[47, 137]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[48, 138]" + "'", str40, "[48, 138]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[49, 139]" + "'", str41, "[49, 139]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[50, 140]" + "'", str42, "[50, 140]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[51, 141]" + "'", str43, "[51, 141]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1466");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 9, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 5, 3]" + "'", str38, "[2, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 6, 3]" + "'", str39, "[2, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[2, 7, 3]" + "'", str40, "[2, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[2, 8, 3]" + "'", str41, "[2, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[2, 9, 3]" + "'", str42, "[2, 9, 3]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1467");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass55 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 49, 60, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 45, 56, 10]" + "'", str50, "[1, 45, 56, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 46, 57, 10]" + "'", str51, "[1, 46, 57, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 47, 58, 10]" + "'", str52, "[1, 47, 58, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1, 48, 59, 10]" + "'", str53, "[1, 48, 59, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[1, 49, 60, 10]" + "'", str54, "[1, 49, 60, 10]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1468");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass11 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 106, 16, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 15, 1]" + "'", str9, "[0, 105, 15, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 16, 1]" + "'", str10, "[0, 106, 16, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1469");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass36 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 8, 8, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 7, 7, 37, 1]" + "'", str34, "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 2, 8, 8, 37, 1]" + "'", str35, "[35, 2, 8, 8, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1470");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass56 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[102, 1, 1, 57]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[101, 8, 8, 56]" + "'", str52, "[101, 8, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[101, 9, 9, 56]" + "'", str53, "[101, 9, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[102, 0, 0, 57]" + "'", str54, "[102, 0, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[102, 1, 1, 57]" + "'", str55, "[102, 1, 1, 57]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1471");
        int[] intArray4 = new int[] { 'a', (short) -1, '#', 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass44 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 38, 74, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 0, 36, 97]" + "'", str5, "[97, 0, 36, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 1, 37, 97]" + "'", str6, "[97, 1, 37, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 2, 38, 97]" + "'", str7, "[97, 2, 38, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 3, 39, 97]" + "'", str8, "[97, 3, 39, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 4, 40, 97]" + "'", str9, "[97, 4, 40, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 5, 41, 97]" + "'", str10, "[97, 5, 41, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 6, 42, 97]" + "'", str11, "[97, 6, 42, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 7, 43, 97]" + "'", str12, "[97, 7, 43, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 8, 44, 97]" + "'", str13, "[97, 8, 44, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 9, 45, 97]" + "'", str14, "[97, 9, 45, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 10, 46, 97]" + "'", str15, "[97, 10, 46, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 11, 47, 97]" + "'", str16, "[97, 11, 47, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 12, 48, 97]" + "'", str17, "[97, 12, 48, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 13, 49, 97]" + "'", str18, "[97, 13, 49, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 14, 50, 97]" + "'", str19, "[97, 14, 50, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 15, 51, 97]" + "'", str20, "[97, 15, 51, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 16, 52, 97]" + "'", str21, "[97, 16, 52, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 17, 53, 97]" + "'", str22, "[97, 17, 53, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 18, 54, 97]" + "'", str23, "[97, 18, 54, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 19, 55, 97]" + "'", str24, "[97, 19, 55, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 20, 56, 97]" + "'", str25, "[97, 20, 56, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 21, 57, 97]" + "'", str26, "[97, 21, 57, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 22, 58, 97]" + "'", str27, "[97, 22, 58, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 23, 59, 97]" + "'", str28, "[97, 23, 59, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 24, 60, 97]" + "'", str29, "[97, 24, 60, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 25, 61, 97]" + "'", str30, "[97, 25, 61, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 26, 62, 97]" + "'", str31, "[97, 26, 62, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 27, 63, 97]" + "'", str32, "[97, 27, 63, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 28, 64, 97]" + "'", str33, "[97, 28, 64, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 29, 65, 97]" + "'", str34, "[97, 29, 65, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 30, 66, 97]" + "'", str35, "[97, 30, 66, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 31, 67, 97]" + "'", str36, "[97, 31, 67, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 32, 68, 97]" + "'", str37, "[97, 32, 68, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 33, 69, 97]" + "'", str38, "[97, 33, 69, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 34, 70, 97]" + "'", str39, "[97, 34, 70, 97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 35, 71, 97]" + "'", str40, "[97, 35, 71, 97]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 36, 72, 97]" + "'", str41, "[97, 36, 72, 97]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 37, 73, 97]" + "'", str42, "[97, 37, 73, 97]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 38, 74, 97]" + "'", str43, "[97, 38, 74, 97]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1472");
        int[] intArray4 = new int[] { (short) 100, (byte) 0, 'a', (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass57 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 52, 149, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 1, 98, 0]" + "'", str5, "[100, 1, 98, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 2, 99, 0]" + "'", str6, "[100, 2, 99, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 3, 100, 0]" + "'", str7, "[100, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 4, 101, 0]" + "'", str8, "[100, 4, 101, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 5, 102, 0]" + "'", str9, "[100, 5, 102, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 6, 103, 0]" + "'", str10, "[100, 6, 103, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 7, 104, 0]" + "'", str11, "[100, 7, 104, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 8, 105, 0]" + "'", str12, "[100, 8, 105, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 9, 106, 0]" + "'", str13, "[100, 9, 106, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 107, 0]" + "'", str14, "[100, 10, 107, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 11, 108, 0]" + "'", str15, "[100, 11, 108, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 12, 109, 0]" + "'", str16, "[100, 12, 109, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 13, 110, 0]" + "'", str17, "[100, 13, 110, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 14, 111, 0]" + "'", str18, "[100, 14, 111, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 15, 112, 0]" + "'", str19, "[100, 15, 112, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 16, 113, 0]" + "'", str20, "[100, 16, 113, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 17, 114, 0]" + "'", str21, "[100, 17, 114, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 18, 115, 0]" + "'", str22, "[100, 18, 115, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 19, 116, 0]" + "'", str23, "[100, 19, 116, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 20, 117, 0]" + "'", str24, "[100, 20, 117, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 21, 118, 0]" + "'", str25, "[100, 21, 118, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 22, 119, 0]" + "'", str26, "[100, 22, 119, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 23, 120, 0]" + "'", str27, "[100, 23, 120, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 24, 121, 0]" + "'", str28, "[100, 24, 121, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 25, 122, 0]" + "'", str29, "[100, 25, 122, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 26, 123, 0]" + "'", str30, "[100, 26, 123, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 27, 124, 0]" + "'", str31, "[100, 27, 124, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 28, 125, 0]" + "'", str32, "[100, 28, 125, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 29, 126, 0]" + "'", str33, "[100, 29, 126, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 30, 127, 0]" + "'", str34, "[100, 30, 127, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 31, 128, 0]" + "'", str35, "[100, 31, 128, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 32, 129, 0]" + "'", str36, "[100, 32, 129, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 33, 130, 0]" + "'", str37, "[100, 33, 130, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 34, 131, 0]" + "'", str38, "[100, 34, 131, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 35, 132, 0]" + "'", str39, "[100, 35, 132, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 36, 133, 0]" + "'", str40, "[100, 36, 133, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 37, 134, 0]" + "'", str41, "[100, 37, 134, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 38, 135, 0]" + "'", str42, "[100, 38, 135, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 39, 136, 0]" + "'", str43, "[100, 39, 136, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 40, 137, 0]" + "'", str44, "[100, 40, 137, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 41, 138, 0]" + "'", str45, "[100, 41, 138, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 42, 139, 0]" + "'", str46, "[100, 42, 139, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 43, 140, 0]" + "'", str47, "[100, 43, 140, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 44, 141, 0]" + "'", str48, "[100, 44, 141, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 45, 142, 0]" + "'", str49, "[100, 45, 142, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 46, 143, 0]" + "'", str50, "[100, 46, 143, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[100, 47, 144, 0]" + "'", str51, "[100, 47, 144, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[100, 48, 145, 0]" + "'", str52, "[100, 48, 145, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[100, 49, 146, 0]" + "'", str53, "[100, 49, 146, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[100, 50, 147, 0]" + "'", str54, "[100, 50, 147, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[100, 51, 148, 0]" + "'", str55, "[100, 51, 148, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[100, 52, 149, 0]" + "'", str56, "[100, 52, 149, 0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1473");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass54 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 0, 5]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 6, 4]" + "'", str49, "[5, 6, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 7, 4]" + "'", str50, "[5, 7, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 8, 4]" + "'", str51, "[5, 8, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 9, 4]" + "'", str52, "[5, 9, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[6, 0, 5]" + "'", str53, "[6, 0, 5]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1474");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass51 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 147, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[35, 143, 1]" + "'", str46, "[35, 143, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[35, 144, 1]" + "'", str47, "[35, 144, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[35, 145, 1]" + "'", str48, "[35, 145, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[35, 146, 1]" + "'", str49, "[35, 146, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[35, 147, 1]" + "'", str50, "[35, 147, 1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1475");
        int[] intArray5 = new int[] { (short) 100, 100, (short) 1, (byte) -1, (short) 1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass39 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 103, 4, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 100, 2, -1, 1]" + "'", str6, "[100, 100, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 3, -1, 1]" + "'", str7, "[100, 100, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 100, 4, -1, 1]" + "'", str8, "[100, 100, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 100, 5, -1, 1]" + "'", str9, "[100, 100, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 100, 6, -1, 1]" + "'", str10, "[100, 100, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 100, 7, -1, 1]" + "'", str11, "[100, 100, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 100, 8, -1, 1]" + "'", str12, "[100, 100, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 100, 9, -1, 1]" + "'", str13, "[100, 100, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 101, 0, 0, 1]" + "'", str14, "[100, 101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 101, 1, 0, 1]" + "'", str15, "[100, 101, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 101, 2, 0, 1]" + "'", str16, "[100, 101, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 101, 3, 0, 1]" + "'", str17, "[100, 101, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 101, 4, 0, 1]" + "'", str18, "[100, 101, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 101, 5, 0, 1]" + "'", str19, "[100, 101, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 101, 6, 0, 1]" + "'", str20, "[100, 101, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 101, 7, 0, 1]" + "'", str21, "[100, 101, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 101, 8, 0, 1]" + "'", str22, "[100, 101, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 101, 9, 0, 1]" + "'", str23, "[100, 101, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 102, 0, 1, 1]" + "'", str24, "[100, 102, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 102, 1, 1, 1]" + "'", str25, "[100, 102, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 102, 2, 1, 1]" + "'", str26, "[100, 102, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 102, 3, 1, 1]" + "'", str27, "[100, 102, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 102, 4, 1, 1]" + "'", str28, "[100, 102, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 102, 5, 1, 1]" + "'", str29, "[100, 102, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 102, 6, 1, 1]" + "'", str30, "[100, 102, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 102, 7, 1, 1]" + "'", str31, "[100, 102, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 102, 8, 1, 1]" + "'", str32, "[100, 102, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 102, 9, 1, 1]" + "'", str33, "[100, 102, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 103, 0, 2, 1]" + "'", str34, "[100, 103, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 103, 1, 2, 1]" + "'", str35, "[100, 103, 1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 103, 2, 2, 1]" + "'", str36, "[100, 103, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 103, 3, 2, 1]" + "'", str37, "[100, 103, 3, 2, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 103, 4, 2, 1]" + "'", str38, "[100, 103, 4, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1476");
        int[] intArray1 = new int[] { '#' };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass45 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[78]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[36]" + "'", str2, "[36]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[37]" + "'", str3, "[37]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[38]" + "'", str4, "[38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[39]" + "'", str5, "[39]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[40]" + "'", str6, "[40]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[41]" + "'", str7, "[41]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[42]" + "'", str8, "[42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[43]" + "'", str9, "[43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[44]" + "'", str10, "[44]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[45]" + "'", str11, "[45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[46]" + "'", str12, "[46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[47]" + "'", str13, "[47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[48]" + "'", str14, "[48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[49]" + "'", str15, "[49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[50]" + "'", str16, "[50]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[51]" + "'", str17, "[51]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52]" + "'", str18, "[52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[53]" + "'", str19, "[53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[54]" + "'", str20, "[54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[55]" + "'", str21, "[55]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[56]" + "'", str22, "[56]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[57]" + "'", str23, "[57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[58]" + "'", str24, "[58]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[59]" + "'", str25, "[59]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[60]" + "'", str26, "[60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[61]" + "'", str27, "[61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[62]" + "'", str28, "[62]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[63]" + "'", str29, "[63]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[64]" + "'", str30, "[64]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[65]" + "'", str31, "[65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[66]" + "'", str32, "[66]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[67]" + "'", str33, "[67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[68]" + "'", str34, "[68]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[69]" + "'", str35, "[69]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[70]" + "'", str36, "[70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[71]" + "'", str37, "[71]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[72]" + "'", str38, "[72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[73]" + "'", str39, "[73]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[74]" + "'", str40, "[74]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[75]" + "'", str41, "[75]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[76]" + "'", str42, "[76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[77]" + "'", str43, "[77]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[78]" + "'", str44, "[78]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1477");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass37 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 2, 9, 9, 37, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 7, 7, 37, 1]" + "'", str34, "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 2, 8, 8, 37, 1]" + "'", str35, "[35, 2, 8, 8, 37, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 9, 9, 37, 1]" + "'", str36, "[35, 2, 9, 9, 37, 1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1478");
        int[] intArray2 = new int[] { (byte) 100, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass44 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[101, 1]" + "'", str3, "[101, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[102, 2]" + "'", str4, "[102, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[103, 3]" + "'", str5, "[103, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[104, 4]" + "'", str6, "[104, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[105, 5]" + "'", str7, "[105, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[106, 6]" + "'", str8, "[106, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[107, 7]" + "'", str9, "[107, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[108, 8]" + "'", str10, "[108, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[109, 9]" + "'", str11, "[109, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1479");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass29 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1480");
        int[] intArray4 = new int[] { 100, (byte) 100, (byte) 100, (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass7 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 102, 102, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 101, 101, 0]" + "'", str5, "[100, 101, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 102, 102, 0]" + "'", str6, "[100, 102, 102, 0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1481");
        int[] intArray6 = new int[] { (byte) -1, (short) 100, '4', ' ', (byte) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 75, 55, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 100, 53, 33, 100, 52]" + "'", str7, "[-1, 100, 53, 33, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 100, 54, 34, 100, 52]" + "'", str8, "[-1, 100, 54, 34, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 100, 55, 35, 100, 52]" + "'", str9, "[-1, 100, 55, 35, 100, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 100, 56, 36, 100, 52]" + "'", str10, "[-1, 100, 56, 36, 100, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 100, 57, 37, 100, 52]" + "'", str11, "[-1, 100, 57, 37, 100, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 100, 58, 38, 100, 52]" + "'", str12, "[-1, 100, 58, 38, 100, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 100, 59, 39, 100, 52]" + "'", str13, "[-1, 100, 59, 39, 100, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 100, 60, 40, 100, 52]" + "'", str14, "[-1, 100, 60, 40, 100, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 100, 61, 41, 100, 52]" + "'", str15, "[-1, 100, 61, 41, 100, 52]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 100, 62, 42, 100, 52]" + "'", str16, "[-1, 100, 62, 42, 100, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 100, 63, 43, 100, 52]" + "'", str17, "[-1, 100, 63, 43, 100, 52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 100, 64, 44, 100, 52]" + "'", str18, "[-1, 100, 64, 44, 100, 52]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 100, 65, 45, 100, 52]" + "'", str19, "[-1, 100, 65, 45, 100, 52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 100, 66, 46, 100, 52]" + "'", str20, "[-1, 100, 66, 46, 100, 52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 100, 67, 47, 100, 52]" + "'", str21, "[-1, 100, 67, 47, 100, 52]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 100, 68, 48, 100, 52]" + "'", str22, "[-1, 100, 68, 48, 100, 52]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 100, 69, 49, 100, 52]" + "'", str23, "[-1, 100, 69, 49, 100, 52]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 100, 70, 50, 100, 52]" + "'", str24, "[-1, 100, 70, 50, 100, 52]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 100, 71, 51, 100, 52]" + "'", str25, "[-1, 100, 71, 51, 100, 52]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 100, 72, 52, 100, 52]" + "'", str26, "[-1, 100, 72, 52, 100, 52]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 100, 73, 53, 100, 52]" + "'", str27, "[-1, 100, 73, 53, 100, 52]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 100, 74, 54, 100, 52]" + "'", str28, "[-1, 100, 74, 54, 100, 52]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 100, 75, 55, 100, 52]" + "'", str29, "[-1, 100, 75, 55, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1482");
        int[] intArray3 = new int[] { (byte) -1, (byte) 0, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 2, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 1, 0]" + "'", str4, "[-1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 2, 0]" + "'", str5, "[-1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 3, 0]" + "'", str6, "[-1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 4, 0]" + "'", str7, "[-1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 5, 0]" + "'", str8, "[-1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 6, 0]" + "'", str9, "[-1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 7, 0]" + "'", str10, "[-1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 8, 0]" + "'", str11, "[-1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 9, 0]" + "'", str12, "[-1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 0, 1]" + "'", str13, "[0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 1, 1]" + "'", str14, "[0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 2, 1]" + "'", str15, "[0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 3, 1]" + "'", str16, "[0, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 4, 1]" + "'", str17, "[0, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 5, 1]" + "'", str18, "[0, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 6, 1]" + "'", str19, "[0, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 7, 1]" + "'", str20, "[0, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 8, 1]" + "'", str21, "[0, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 9, 1]" + "'", str22, "[0, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 2]" + "'", str23, "[1, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 2]" + "'", str24, "[1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 2, 2]" + "'", str25, "[1, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 3, 2]" + "'", str26, "[1, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 4, 2]" + "'", str27, "[1, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 5, 2]" + "'", str28, "[1, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 6, 2]" + "'", str29, "[1, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 7, 2]" + "'", str30, "[1, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 8, 2]" + "'", str31, "[1, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 9, 2]" + "'", str32, "[1, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2, 0, 3]" + "'", str33, "[2, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 1, 3]" + "'", str34, "[2, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2, 3]" + "'", str35, "[2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 3, 3]" + "'", str36, "[2, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 4, 3]" + "'", str37, "[2, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 5, 3]" + "'", str38, "[2, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 6, 3]" + "'", str39, "[2, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[2, 7, 3]" + "'", str40, "[2, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[2, 8, 3]" + "'", str41, "[2, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[2, 9, 3]" + "'", str42, "[2, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[3, 0, 4]" + "'", str43, "[3, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3, 1, 4]" + "'", str44, "[3, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3, 2, 4]" + "'", str45, "[3, 2, 4]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1483");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1484");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 6, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 3, 2]" + "'", str35, "[35, 3, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 4, 2]" + "'", str36, "[35, 4, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 5, 2]" + "'", str37, "[35, 5, 2]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 6, 2]" + "'", str38, "[35, 6, 2]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1485");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 58, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 54, 1, 100]" + "'", str7, "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 55, 1, 100]" + "'", str8, "[100, 10, 55, 1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 56, 1, 100]" + "'", str9, "[100, 10, 56, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 57, 1, 100]" + "'", str10, "[100, 10, 57, 1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 58, 1, 100]" + "'", str11, "[100, 10, 58, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1486");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass52 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 148, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[35, 143, 1]" + "'", str46, "[35, 143, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[35, 144, 1]" + "'", str47, "[35, 144, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[35, 145, 1]" + "'", str48, "[35, 145, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[35, 146, 1]" + "'", str49, "[35, 146, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[35, 147, 1]" + "'", str50, "[35, 147, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[35, 148, 1]" + "'", str51, "[35, 148, 1]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1487");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass25 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[102, 2, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[102, 0, 2]" + "'", str22, "[102, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[102, 1, 2]" + "'", str23, "[102, 1, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[102, 2, 2]" + "'", str24, "[102, 2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1488");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass40 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 44, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, -1, 42, 100, -1]" + "'", str37, "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, -1, 43, 100, -1]" + "'", str38, "[100, -1, 43, 100, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, -1, 44, 100, -1]" + "'", str39, "[100, -1, 44, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1489");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass12 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 9, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 7, 0]" + "'", str9, "[0, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 8, 0]" + "'", str10, "[0, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 9, 0]" + "'", str11, "[0, 9, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1490");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass26 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[102, 3, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[102, 0, 2]" + "'", str22, "[102, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[102, 1, 2]" + "'", str23, "[102, 1, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[102, 2, 2]" + "'", str24, "[102, 2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 3, 2]" + "'", str25, "[102, 3, 2]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1491");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass10 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 56, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 54, 1, 100]" + "'", str7, "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 55, 1, 100]" + "'", str8, "[100, 10, 55, 1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 56, 1, 100]" + "'", str9, "[100, 10, 56, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1492");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass52 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1493");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass52 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6]" + "'", str48, "[6]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[7]" + "'", str49, "[7]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[8]" + "'", str50, "[8]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[9]" + "'", str51, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1494");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1495");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 42, 132, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 39, 129, 97]" + "'", str33, "[0, 39, 129, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 40, 130, 97]" + "'", str34, "[0, 40, 130, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 41, 131, 97]" + "'", str35, "[0, 41, 131, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 42, 132, 97]" + "'", str36, "[0, 42, 132, 97]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1496");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass61 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 108, 156, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 105, 153, 100]" + "'", str57, "[-1, 105, 153, 100]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, 106, 154, 100]" + "'", str58, "[-1, 106, 154, 100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[-1, 107, 155, 100]" + "'", str59, "[-1, 107, 155, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[-1, 108, 156, 100]" + "'", str60, "[-1, 108, 156, 100]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1497");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass41 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 45, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, -1, 42, 100, -1]" + "'", str37, "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, -1, 43, 100, -1]" + "'", str38, "[100, -1, 43, 100, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, -1, 44, 100, -1]" + "'", str39, "[100, -1, 44, 100, -1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, -1, 45, 100, -1]" + "'", str40, "[100, -1, 45, 100, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1498");
        int[] intArray2 = new int[] { (short) -1, (short) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass49 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 2]" + "'", str4, "[1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[2, 3]" + "'", str5, "[2, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[3, 4]" + "'", str6, "[3, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4, 5]" + "'", str7, "[4, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[5, 6]" + "'", str8, "[5, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[6, 7]" + "'", str9, "[6, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[7, 8]" + "'", str10, "[7, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[8, 9]" + "'", str11, "[8, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6, 6]" + "'", str38, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7, 7]" + "'", str39, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8, 8]" + "'", str40, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9, 9]" + "'", str41, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 0, 1]" + "'", str42, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 1]" + "'", str43, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2, 2]" + "'", str44, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3, 3]" + "'", str45, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4, 4]" + "'", str46, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 5]" + "'", str47, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6, 6]" + "'", str48, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1499");
        int[] intArray6 = new int[] { 1, (byte) 10, (byte) -1, (short) 100, (short) 100, '4' };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass10 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 2, 103, 100, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 10, 0, 101, 100, 52]" + "'", str7, "[1, 10, 0, 101, 100, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 10, 1, 102, 100, 52]" + "'", str8, "[1, 10, 1, 102, 100, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 10, 2, 103, 100, 52]" + "'", str9, "[1, 10, 2, 103, 100, 52]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEBuggy2.test1500");
        int[] intArray5 = new int[] { 1, (short) 1, 1, (byte) 100, 0 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass18 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 2, 3, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 2, 100, 0]" + "'", str6, "[1, 1, 2, 100, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 3, 100, 0]" + "'", str7, "[1, 1, 3, 100, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 4, 100, 0]" + "'", str8, "[1, 1, 4, 100, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 5, 100, 0]" + "'", str9, "[1, 1, 5, 100, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 6, 100, 0]" + "'", str10, "[1, 1, 6, 100, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 7, 100, 0]" + "'", str11, "[1, 1, 7, 100, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 8, 100, 0]" + "'", str12, "[1, 1, 8, 100, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 9, 100, 0]" + "'", str13, "[1, 1, 9, 100, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 0, 101, 0]" + "'", str14, "[1, 2, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 1, 101, 0]" + "'", str15, "[1, 2, 1, 101, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 2, 2, 101, 0]" + "'", str16, "[1, 2, 2, 101, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 3, 101, 0]" + "'", str17, "[1, 2, 3, 101, 0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }
}

