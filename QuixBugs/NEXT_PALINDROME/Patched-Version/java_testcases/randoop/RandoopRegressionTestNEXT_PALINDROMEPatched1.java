import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTestNEXT_PALINDROMEPatched1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0501");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass29 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[127]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0502");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass19 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[27]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0503");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[129]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0504");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass18 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0505");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0506");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0507");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0508");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0509");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0510");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0511");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0512");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass4 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[12]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0513");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass31 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0514");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass28 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0515");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[130]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0516");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass17 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0517");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass7 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0518");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass18 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0519");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass69 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0520");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass33 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0521");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0522");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass29 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0523");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[108]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0524");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0525");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass32 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0526");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[28]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0527");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass34 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0528");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0529");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass30 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0530");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0531");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass10 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0532");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass32 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0533");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass21 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0534");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass36 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0535");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0536");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0537");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0538");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass16 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[111]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0539");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass24 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0540");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0541");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass16 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0542");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass14 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0543");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[29]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0544");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0545");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass23 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0546");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0547");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass14 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[109]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0548");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0549");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass17 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0550");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass15 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0551");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[132]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0552");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0553");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass11 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0554");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0555");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass23 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0556");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass31 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0557");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0558");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass24 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0559");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0560");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass17 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[112]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0561");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass24 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0562");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[131]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0563");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0564");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass23 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0565");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0566");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0567");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0568");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass34 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0569");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass11 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0570");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass25 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0571");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass18 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0572");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass15 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[110]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0573");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass12 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0574");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass30 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0575");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass23 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0576");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0577");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass35 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[133]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0578");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass29 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0579");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0580");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass8 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0581");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass24 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0582");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[30]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0583");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0584");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass25 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0585");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0586");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass5 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[13]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0587");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass25 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0588");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass25 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0589");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0590");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass26 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0591");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0592");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass7 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[15]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0593");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass68 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0594");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0595");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0596");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass26 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0597");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass70 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0598");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass6 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[14]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0599");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0600");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass10 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0601");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0602");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0603");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass26 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0604");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass36 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0605");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[134]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0606");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass20 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0607");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0608");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[32]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0609");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0610");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass47 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0611");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass19 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0612");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0613");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass35 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0614");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass21 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0615");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[135]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0616");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str70 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass71 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 5, 5, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[106, 5, 5, 6]" + "'", str70, "[106, 5, 5, 6]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0617");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass35 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0618");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass19 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0619");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass38 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0620");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[31]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0621");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass38 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[136]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0622");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0623");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass8 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0624");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass37 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0625");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass14 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0626");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass22 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0627");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass29 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0628");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0629");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[34]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0630");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass9 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0631");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass18 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[113]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0632");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass27 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0633");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass8 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0634");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass20 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0635");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[33]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0636");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass31 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0637");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0638");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass8 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[16]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0639");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0640");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0641");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass14 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0642");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass19 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[114]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0643");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass27 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0644");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass28 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0645");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0646");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass34 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0647");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass10 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0648");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0649");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass39 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0650");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass33 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0651");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass11 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0652");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str70 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str71 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass72 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 6, 6, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[106, 5, 5, 6]" + "'", str70, "[106, 5, 5, 6]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[106, 6, 6, 6]" + "'", str71, "[106, 6, 6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0653");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass48 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0654");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0655");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass15 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0656");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass15 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0657");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass27 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0658");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0659");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass32 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0660");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass30 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[38]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0661");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass17 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0662");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0663");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass27 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0664");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0665");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass39 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[137]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0666");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0667");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0668");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass30 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0669");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass26 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0670");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0671");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[39]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0672");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass33 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0673");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass27 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0674");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass25 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0675");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str70 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str71 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str72 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass73 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 7, 7, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[106, 5, 5, 6]" + "'", str70, "[106, 5, 5, 6]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[106, 6, 6, 6]" + "'", str71, "[106, 6, 6, 6]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[106, 7, 7, 6]" + "'", str72, "[106, 7, 7, 6]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0676");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass10 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[18]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0677");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[11, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0678");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass29 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[37]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0679");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass9 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[17]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0680");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0681");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass32 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0682");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass51 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0683");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass38 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0684");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass11 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0685");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass50 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0686");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass39 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0687");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass28 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0688");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass16 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0689");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass49 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0690");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass21 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0691");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass10 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0692");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass28 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0693");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass36 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0694");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0695");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass23 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0696");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass28 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[36]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0697");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass16 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 9, 41, 100, 10]" + "'", str15, "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0698");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass27 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0699");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 128, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 128, 100]" + "'", str34, "[1, 128, 100]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0700");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0701");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0702");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass18 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0703");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass14 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0704");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0705");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[115]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0706");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass53 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0707");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass22 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0708");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0709");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0710");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass52 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0711");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass39 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0712");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0713");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass28 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0714");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 10, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 9, 41, 100, 10]" + "'", str15, "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 10, 42, 100, 10]" + "'", str16, "[0, 35, 10, 42, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0715");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[117]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0716");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0717");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass6 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0718");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass40 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0719");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[116]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0720");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass12 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0721");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass28 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0722");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass20 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0723");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass34 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0724");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass19 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0725");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0726");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0727");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0728");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass40 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0729");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0730");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0731");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass19 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0732");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0733");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0734");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass30 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0735");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass40 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[138]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0736");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[119]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[119]" + "'", str23, "[119]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0737");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0738");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0739");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass17 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0740");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass24 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0741");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass18 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0742");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[20]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0743");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass35 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0744");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[121]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[119]" + "'", str23, "[119]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[120]" + "'", str24, "[120]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[121]" + "'", str25, "[121]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0745");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0746");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0747");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0748");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0749");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass43 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0750");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass21 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0751");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0752");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass54 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0753");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass29 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0754");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0755");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[118]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0756");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass26 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0757");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass22 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0758");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass15 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0759");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0760");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[40]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0761");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 129, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 128, 100]" + "'", str34, "[1, 128, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 129, 100]" + "'", str35, "[1, 129, 100]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0762");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass23 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0763");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str70 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str71 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str72 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str73 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass74 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 8, 8, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[106, 5, 5, 6]" + "'", str70, "[106, 5, 5, 6]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[106, 6, 6, 6]" + "'", str71, "[106, 6, 6, 6]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[106, 7, 7, 6]" + "'", str72, "[106, 7, 7, 6]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[106, 8, 8, 6]" + "'", str73, "[106, 8, 8, 6]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0764");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass36 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0765");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0766");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass11 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[19]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0767");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass32 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0768");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass33 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0769");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[120]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[119]" + "'", str23, "[119]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[120]" + "'", str24, "[120]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0770");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass34 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0771");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass6 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0772");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass18 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 11, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 9, 41, 100, 10]" + "'", str15, "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 10, 42, 100, 10]" + "'", str16, "[0, 35, 10, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 11, 43, 100, 10]" + "'", str17, "[0, 35, 11, 43, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0773");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0774");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0775");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass15 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0776");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass41 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[139]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0777");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass7 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0778");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[41]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[41]" + "'", str32, "[41]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0779");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass38 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0780");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass33 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0781");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0782");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0783");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0784");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass31 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0785");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass42 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[140]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0786");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass24 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 29, 29, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 29, 29, -1]" + "'", str23, "[1, 29, 29, -1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0787");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass23 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0788");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass44 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[142]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[142]" + "'", str43, "[142]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0789");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[21]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0790");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass55 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0791");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0792");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass10 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 102, 105, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 102, 105, 52]" + "'", str9, "[100, 102, 105, 52]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0793");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass25 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0794");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass36 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 99, 8, 8, 1, 1]" + "'", str35, "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0795");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass43 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0796");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0797");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass35 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0798");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass26 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0799");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass27 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0800");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0801");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass25 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0802");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass38 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 3, 3, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 3, 3, 103]" + "'", str37, "[2, 3, 3, 103]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0803");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0804");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0805");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass35 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0806");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass16 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0807");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass44 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0808");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0809");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass36 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0810");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0811");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass19 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0812");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass29 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0813");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass44 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0814");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass14 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0815");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass27 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[122]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[119]" + "'", str23, "[119]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[120]" + "'", str24, "[120]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[121]" + "'", str25, "[121]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[122]" + "'", str26, "[122]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0816");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass37 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 99, 9, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 99, 8, 8, 1, 1]" + "'", str35, "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 99, 9, 9, 1, 1]" + "'", str36, "[100, 99, 9, 9, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0817");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass17 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0818");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0819");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass18 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0820");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass14 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[22]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0821");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass57 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0822");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str68 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str69 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str70 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str71 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str72 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str73 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str74 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass75 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[106, 9, 9, 6]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 0, 0, 0]" + "'", str5, "[100, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 1, 1, 0]" + "'", str6, "[100, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 2, 2, 0]" + "'", str7, "[100, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 3, 3, 0]" + "'", str8, "[100, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 4, 4, 0]" + "'", str9, "[100, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 5, 5, 0]" + "'", str10, "[100, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 6, 6, 0]" + "'", str11, "[100, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 7, 7, 0]" + "'", str12, "[100, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 8, 8, 0]" + "'", str13, "[100, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 9, 9, 0]" + "'", str14, "[100, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 0, 0, 1]" + "'", str15, "[101, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 1, 1, 1]" + "'", str16, "[101, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 2, 2, 1]" + "'", str17, "[101, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 3, 3, 1]" + "'", str18, "[101, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 4, 4, 1]" + "'", str19, "[101, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 5, 5, 1]" + "'", str20, "[101, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 6, 6, 1]" + "'", str21, "[101, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[101, 7, 7, 1]" + "'", str22, "[101, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[101, 8, 8, 1]" + "'", str23, "[101, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[101, 9, 9, 1]" + "'", str24, "[101, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 0, 0, 2]" + "'", str25, "[102, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 1, 1, 2]" + "'", str26, "[102, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 2, 2, 2]" + "'", str27, "[102, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 3, 3, 2]" + "'", str28, "[102, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 4, 4, 2]" + "'", str29, "[102, 4, 4, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 5, 5, 2]" + "'", str30, "[102, 5, 5, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 6, 6, 2]" + "'", str31, "[102, 6, 6, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[102, 7, 7, 2]" + "'", str32, "[102, 7, 7, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[102, 8, 8, 2]" + "'", str33, "[102, 8, 8, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[102, 9, 9, 2]" + "'", str34, "[102, 9, 9, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[103, 0, 0, 3]" + "'", str35, "[103, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[103, 1, 1, 3]" + "'", str36, "[103, 1, 1, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[103, 2, 2, 3]" + "'", str37, "[103, 2, 2, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[103, 3, 3, 3]" + "'", str38, "[103, 3, 3, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[103, 4, 4, 3]" + "'", str39, "[103, 4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[103, 5, 5, 3]" + "'", str40, "[103, 5, 5, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[103, 6, 6, 3]" + "'", str41, "[103, 6, 6, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[103, 7, 7, 3]" + "'", str42, "[103, 7, 7, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[103, 8, 8, 3]" + "'", str43, "[103, 8, 8, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[103, 9, 9, 3]" + "'", str44, "[103, 9, 9, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[104, 0, 0, 4]" + "'", str45, "[104, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[104, 1, 1, 4]" + "'", str46, "[104, 1, 1, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[104, 2, 2, 4]" + "'", str47, "[104, 2, 2, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[104, 3, 3, 4]" + "'", str48, "[104, 3, 3, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[104, 4, 4, 4]" + "'", str49, "[104, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[104, 5, 5, 4]" + "'", str50, "[104, 5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[104, 6, 6, 4]" + "'", str51, "[104, 6, 6, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[104, 7, 7, 4]" + "'", str52, "[104, 7, 7, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[104, 8, 8, 4]" + "'", str53, "[104, 8, 8, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[104, 9, 9, 4]" + "'", str54, "[104, 9, 9, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[105, 0, 0, 5]" + "'", str55, "[105, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[105, 1, 1, 5]" + "'", str56, "[105, 1, 1, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[105, 2, 2, 5]" + "'", str57, "[105, 2, 2, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[105, 3, 3, 5]" + "'", str58, "[105, 3, 3, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[105, 4, 4, 5]" + "'", str59, "[105, 4, 4, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[105, 5, 5, 5]" + "'", str60, "[105, 5, 5, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[105, 6, 6, 5]" + "'", str61, "[105, 6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[105, 7, 7, 5]" + "'", str62, "[105, 7, 7, 5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[105, 8, 8, 5]" + "'", str63, "[105, 8, 8, 5]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[105, 9, 9, 5]" + "'", str64, "[105, 9, 9, 5]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[106, 0, 0, 6]" + "'", str65, "[106, 0, 0, 6]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[106, 1, 1, 6]" + "'", str66, "[106, 1, 1, 6]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[106, 2, 2, 6]" + "'", str67, "[106, 2, 2, 6]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[106, 3, 3, 6]" + "'", str68, "[106, 3, 3, 6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[106, 4, 4, 6]" + "'", str69, "[106, 4, 4, 6]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[106, 5, 5, 6]" + "'", str70, "[106, 5, 5, 6]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[106, 6, 6, 6]" + "'", str71, "[106, 6, 6, 6]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[106, 7, 7, 6]" + "'", str72, "[106, 7, 7, 6]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[106, 8, 8, 6]" + "'", str73, "[106, 8, 8, 6]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[106, 9, 9, 6]" + "'", str74, "[106, 9, 9, 6]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0823");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass32 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0824");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass40 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0825");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass7 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0826");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 12, 44, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 9, 41, 100, 10]" + "'", str15, "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 10, 42, 100, 10]" + "'", str16, "[0, 35, 10, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 11, 43, 100, 10]" + "'", str17, "[0, 35, 11, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 12, 44, 100, 10]" + "'", str18, "[0, 35, 12, 44, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0827");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass40 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 5, 5, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 3, 3, 103]" + "'", str37, "[2, 3, 3, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 4, 4, 103]" + "'", str38, "[2, 4, 4, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 5, 5, 103]" + "'", str39, "[2, 5, 5, 103]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0828");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass31 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0829");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass44 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0830");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass42 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0831");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0832");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass39 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 4, 4, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 3, 3, 103]" + "'", str37, "[2, 3, 3, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 4, 4, 103]" + "'", str38, "[2, 4, 4, 103]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0833");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 1, 1, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[14, 1, 1, 39]" + "'", str46, "[14, 1, 1, 39]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0834");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass15 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[23]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0835");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass28 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0836");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass18 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0837");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0838");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0839");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0840");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass16 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0841");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass43 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[9, 9]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0842");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass28 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 2, 2, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 99]" + "'", str27, "[2, 2, 2, 99]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0843");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass20 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0844");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0845");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass56 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0846");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0847");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass38 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 100, 0, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 99, 8, 8, 1, 1]" + "'", str35, "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 99, 9, 9, 1, 1]" + "'", str36, "[100, 99, 9, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 100, 0, 0, 2, 1]" + "'", str37, "[100, 100, 0, 0, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0848");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass35 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0849");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass28 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0850");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass43 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[141]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0851");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass26 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0852");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0853");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass26 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 31, 31, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 29, 29, -1]" + "'", str23, "[1, 29, 29, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 30, 30, -1]" + "'", str24, "[1, 30, 30, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 31, 31, -1]" + "'", str25, "[1, 31, 31, -1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0854");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass27 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[5]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0855");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass38 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 100, 41, 41, 100, 10]" + "'", str37, "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0856");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass21 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0857");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass41 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 6, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 6, 4]" + "'", str40, "[35, 6, 4]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0858");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0859");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass39 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 100, 1, 1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 99, 8, 8, 1, 1]" + "'", str35, "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 99, 9, 9, 1, 1]" + "'", str36, "[100, 99, 9, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 100, 0, 0, 2, 1]" + "'", str37, "[100, 100, 0, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 100, 1, 1, 2, 1]" + "'", str38, "[100, 100, 1, 1, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0860");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass25 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[98, 9, 9, 1]" + "'", str24, "[98, 9, 9, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0861");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass37 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0862");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass35 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 60, 60, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1, 59, 59, 10, -1]" + "'", str33, "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1, 60, 60, 10, -1]" + "'", str34, "[1, 1, 60, 60, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0863");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass20 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0864");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0865");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass24 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0866");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0867");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 32, 32, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 29, 29, -1]" + "'", str23, "[1, 29, 29, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 30, 30, -1]" + "'", str24, "[1, 30, 30, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 31, 31, -1]" + "'", str25, "[1, 31, 31, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 32, 32, -1]" + "'", str26, "[1, 32, 32, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0868");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0869");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass42 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 7, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 6, 4]" + "'", str40, "[35, 6, 4]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 7, 4]" + "'", str41, "[35, 7, 4]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0870");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass34 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1, 59, 59, 10, -1]" + "'", str33, "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0871");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass24 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0872");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 6, 6, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 3, 3, 103]" + "'", str37, "[2, 3, 3, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 4, 4, 103]" + "'", str38, "[2, 4, 4, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 5, 5, 103]" + "'", str39, "[2, 5, 5, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[2, 6, 6, 103]" + "'", str40, "[2, 6, 6, 103]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0873");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass45 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0874");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass43 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 8, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 6, 4]" + "'", str40, "[35, 6, 4]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 7, 4]" + "'", str41, "[35, 7, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 8, 4]" + "'", str42, "[35, 8, 4]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0875");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass33 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0876");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass9 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 36, 3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 36, 3, 1]" + "'", str8, "[35, 36, 3, 1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0877");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass29 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0878");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass46 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[144]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[142]" + "'", str43, "[142]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[143]" + "'", str44, "[143]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[144]" + "'", str45, "[144]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0879");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 130, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 128, 100]" + "'", str34, "[1, 128, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 129, 100]" + "'", str35, "[1, 129, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 130, 100]" + "'", str36, "[1, 130, 100]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0880");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass34 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0881");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass18 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 101, 0, 0, 0, 1]" + "'", str17, "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0882");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass45 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[143]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[142]" + "'", str43, "[142]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[143]" + "'", str44, "[143]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0883");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass22 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 7, 0]" + "'", str21, "[2, 7, 7, 0]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0884");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0885");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass19 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[27]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0886");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass25 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0887");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass21 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0888");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0889");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass22 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0890");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 104, 107, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 102, 105, 52]" + "'", str9, "[100, 102, 105, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 103, 106, 52]" + "'", str10, "[100, 103, 106, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 104, 107, 52]" + "'", str11, "[100, 104, 107, 52]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0891");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass47 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0892");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass26 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[99, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[98, 9, 9, 1]" + "'", str24, "[98, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 0, 0, 2]" + "'", str25, "[99, 0, 0, 2]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0893");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass30 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 4, 4, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 99]" + "'", str27, "[2, 2, 2, 99]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 3, 3, 99]" + "'", str28, "[2, 3, 3, 99]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 4, 4, 99]" + "'", str29, "[2, 4, 4, 99]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0894");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass19 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0895");
        int[] intArray3 = new int[] { '#', (byte) 100, 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 142, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[35, 101, 1]" + "'", str4, "[35, 101, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 102, 1]" + "'", str5, "[35, 102, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 103, 1]" + "'", str6, "[35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 104, 1]" + "'", str7, "[35, 104, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 105, 1]" + "'", str8, "[35, 105, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 106, 1]" + "'", str9, "[35, 106, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 107, 1]" + "'", str10, "[35, 107, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 108, 1]" + "'", str11, "[35, 108, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 109, 1]" + "'", str12, "[35, 109, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 110, 1]" + "'", str13, "[35, 110, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 111, 1]" + "'", str14, "[35, 111, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 112, 1]" + "'", str15, "[35, 112, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 113, 1]" + "'", str16, "[35, 113, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 114, 1]" + "'", str17, "[35, 114, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 115, 1]" + "'", str18, "[35, 115, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 116, 1]" + "'", str19, "[35, 116, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 117, 1]" + "'", str20, "[35, 117, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 118, 1]" + "'", str21, "[35, 118, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 119, 1]" + "'", str22, "[35, 119, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 120, 1]" + "'", str23, "[35, 120, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 121, 1]" + "'", str24, "[35, 121, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 122, 1]" + "'", str25, "[35, 122, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 123, 1]" + "'", str26, "[35, 123, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 124, 1]" + "'", str27, "[35, 124, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 125, 1]" + "'", str28, "[35, 125, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 126, 1]" + "'", str29, "[35, 126, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 127, 1]" + "'", str30, "[35, 127, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 128, 1]" + "'", str31, "[35, 128, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 129, 1]" + "'", str32, "[35, 129, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 130, 1]" + "'", str33, "[35, 130, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 131, 1]" + "'", str34, "[35, 131, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 132, 1]" + "'", str35, "[35, 132, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 133, 1]" + "'", str36, "[35, 133, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 134, 1]" + "'", str37, "[35, 134, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 135, 1]" + "'", str38, "[35, 135, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 136, 1]" + "'", str39, "[35, 136, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 137, 1]" + "'", str40, "[35, 137, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 138, 1]" + "'", str41, "[35, 138, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 139, 1]" + "'", str42, "[35, 139, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 140, 1]" + "'", str43, "[35, 140, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[35, 141, 1]" + "'", str44, "[35, 141, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[35, 142, 1]" + "'", str45, "[35, 142, 1]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0896");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass49 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4, 4]" + "'", str47, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5]" + "'", str48, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0897");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass11 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 103, 106, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 102, 105, 52]" + "'", str9, "[100, 102, 105, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 103, 106, 52]" + "'", str10, "[100, 103, 106, 52]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0898");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass37 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 62, 62, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1, 59, 59, 10, -1]" + "'", str33, "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1, 60, 60, 10, -1]" + "'", str34, "[1, 1, 60, 60, 10, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1, 61, 61, 10, -1]" + "'", str35, "[1, 1, 61, 61, 10, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1, 62, 62, 10, -1]" + "'", str36, "[1, 1, 62, 62, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0899");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass36 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 61, 61, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1, 59, 59, 10, -1]" + "'", str33, "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1, 60, 60, 10, -1]" + "'", str34, "[1, 1, 60, 60, 10, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1, 61, 61, 10, -1]" + "'", str35, "[1, 1, 61, 61, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0900");
        int[] intArray4 = new int[] { (byte) -1, 10, (byte) 0, (short) 100 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass42 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 7, 7, 103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 11, 1, 100]" + "'", str5, "[-1, 11, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 12, 2, 100]" + "'", str6, "[-1, 12, 2, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 13, 3, 100]" + "'", str7, "[-1, 13, 3, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 14, 4, 100]" + "'", str8, "[-1, 14, 4, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 15, 5, 100]" + "'", str9, "[-1, 15, 5, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 16, 6, 100]" + "'", str10, "[-1, 16, 6, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 17, 7, 100]" + "'", str11, "[-1, 17, 7, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 18, 8, 100]" + "'", str12, "[-1, 18, 8, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 19, 9, 100]" + "'", str13, "[-1, 19, 9, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 0, 0, 101]" + "'", str14, "[0, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 1, 1, 101]" + "'", str15, "[0, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 2, 2, 101]" + "'", str16, "[0, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 3, 3, 101]" + "'", str17, "[0, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 4, 4, 101]" + "'", str18, "[0, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 5, 5, 101]" + "'", str19, "[0, 5, 5, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 6, 6, 101]" + "'", str20, "[0, 6, 6, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 7, 7, 101]" + "'", str21, "[0, 7, 7, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 8, 8, 101]" + "'", str22, "[0, 8, 8, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 9, 9, 101]" + "'", str23, "[0, 9, 9, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 0, 0, 102]" + "'", str24, "[1, 0, 0, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 1, 102]" + "'", str25, "[1, 1, 1, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 2, 2, 102]" + "'", str26, "[1, 2, 2, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 3, 3, 102]" + "'", str27, "[1, 3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 4, 4, 102]" + "'", str28, "[1, 4, 4, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 5, 5, 102]" + "'", str29, "[1, 5, 5, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 6, 6, 102]" + "'", str30, "[1, 6, 6, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 7, 7, 102]" + "'", str31, "[1, 7, 7, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 8, 8, 102]" + "'", str32, "[1, 8, 8, 102]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 9, 9, 102]" + "'", str33, "[1, 9, 9, 102]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 0, 0, 103]" + "'", str34, "[2, 0, 0, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 1, 1, 103]" + "'", str35, "[2, 1, 1, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[2, 2, 2, 103]" + "'", str36, "[2, 2, 2, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[2, 3, 3, 103]" + "'", str37, "[2, 3, 3, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[2, 4, 4, 103]" + "'", str38, "[2, 4, 4, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[2, 5, 5, 103]" + "'", str39, "[2, 5, 5, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[2, 6, 6, 103]" + "'", str40, "[2, 6, 6, 103]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[2, 7, 7, 103]" + "'", str41, "[2, 7, 7, 103]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0901");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 2, 2, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[14, 1, 1, 39]" + "'", str46, "[14, 1, 1, 39]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[14, 2, 2, 39]" + "'", str47, "[14, 2, 2, 39]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0902");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 101, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 101, 0, 0, 0, 1]" + "'", str17, "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 101, 1, 1, 0, 1]" + "'", str18, "[0, 101, 1, 1, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0903");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 131, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 128, 100]" + "'", str34, "[1, 128, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 129, 100]" + "'", str35, "[1, 129, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 130, 100]" + "'", str36, "[1, 130, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 131, 100]" + "'", str37, "[1, 131, 100]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0904");
        int[] intArray6 = new int[] { 1, (byte) 0, (byte) 0, (byte) -1, (byte) 1, '4' };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass8 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 0, 1, 0, 1, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 0, 1, 0, 1, 52]" + "'", str7, "[1, 0, 1, 0, 1, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0905");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass28 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0906");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 105, 108, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 102, 105, 52]" + "'", str9, "[100, 102, 105, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 103, 106, 52]" + "'", str10, "[100, 103, 106, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 104, 107, 52]" + "'", str11, "[100, 104, 107, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 105, 108, 52]" + "'", str12, "[100, 105, 108, 52]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0907");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass23 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0908");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass35 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[43]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[41]" + "'", str32, "[41]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[42]" + "'", str33, "[42]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[43]" + "'", str34, "[43]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0909");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass25 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 30, 30, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 29, 29, -1]" + "'", str23, "[1, 29, 29, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 30, 30, -1]" + "'", str24, "[1, 30, 30, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0910");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0911");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass24 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0912");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 3, 3, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[14, 1, 1, 39]" + "'", str46, "[14, 1, 1, 39]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[14, 2, 2, 39]" + "'", str47, "[14, 2, 2, 39]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[14, 3, 3, 39]" + "'", str48, "[14, 3, 3, 39]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0913");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass25 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[3, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 7, 0]" + "'", str21, "[2, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 8, 0]" + "'", str22, "[2, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 9, 0]" + "'", str23, "[2, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 0, 1]" + "'", str24, "[3, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0914");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0915");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass23 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 7, 0]" + "'", str21, "[2, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 8, 0]" + "'", str22, "[2, 8, 8, 0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0916");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass21 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[29]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0917");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass29 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0918");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0919");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass24 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 7, 0]" + "'", str21, "[2, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 8, 0]" + "'", str22, "[2, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 9, 0]" + "'", str23, "[2, 9, 9, 0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0920");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[28]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0921");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass30 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 56, 10, 1]" + "'", str29, "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0922");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass39 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 42, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 100, 41, 41, 100, 10]" + "'", str37, "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0, 100, 42, 42, 100, 10]" + "'", str38, "[0, 100, 42, 42, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0923");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass22 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[30]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0924");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass10 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 37, 4, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 36, 3, 1]" + "'", str8, "[35, 36, 3, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 37, 4, 1]" + "'", str9, "[35, 37, 4, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0925");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass46 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 51, 141, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[97, 51, 141, 10]" + "'", str45, "[97, 51, 141, 10]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0926");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass17 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[25]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0927");
        int[] intArray2 = new int[] { '4', 'a' };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass4 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[53, 98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 98]" + "'", str3, "[53, 98]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0928");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass61 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 6, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 3, 57]" + "'", str57, "[6, 3, 57]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6, 4, 57]" + "'", str58, "[6, 4, 57]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[6, 5, 57]" + "'", str59, "[6, 5, 57]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[6, 6, 57]" + "'", str60, "[6, 6, 57]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0929");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass59 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 4, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 3, 57]" + "'", str57, "[6, 3, 57]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6, 4, 57]" + "'", str58, "[6, 4, 57]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0930");
        int[] intArray1 = new int[] { 'a' };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass28 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[123]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[98]" + "'", str2, "[98]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[99]" + "'", str3, "[99]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100]" + "'", str4, "[100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[101]" + "'", str5, "[101]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[102]" + "'", str6, "[102]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[103]" + "'", str7, "[103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[104]" + "'", str8, "[104]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[105]" + "'", str9, "[105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[106]" + "'", str10, "[106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[107]" + "'", str11, "[107]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[108]" + "'", str12, "[108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[109]" + "'", str13, "[109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[110]" + "'", str14, "[110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[111]" + "'", str15, "[111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[112]" + "'", str16, "[112]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[113]" + "'", str17, "[113]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[114]" + "'", str18, "[114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[115]" + "'", str19, "[115]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[116]" + "'", str20, "[116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[117]" + "'", str21, "[117]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[118]" + "'", str22, "[118]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[119]" + "'", str23, "[119]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[120]" + "'", str24, "[120]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[121]" + "'", str25, "[121]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[122]" + "'", str26, "[122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[123]" + "'", str27, "[123]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0931");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass11 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 38, 5, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 36, 3, 1]" + "'", str8, "[35, 36, 3, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 37, 4, 1]" + "'", str9, "[35, 37, 4, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 38, 5, 1]" + "'", str10, "[35, 38, 5, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0932");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0933");
        int[] intArray4 = new int[] { (short) 100, 'a', 100, '4' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass14 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 106, 109, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 98, 101, 52]" + "'", str5, "[100, 98, 101, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 99, 102, 52]" + "'", str6, "[100, 99, 102, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 100, 103, 52]" + "'", str7, "[100, 100, 103, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 101, 104, 52]" + "'", str8, "[100, 101, 104, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 102, 105, 52]" + "'", str9, "[100, 102, 105, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 103, 106, 52]" + "'", str10, "[100, 103, 106, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 104, 107, 52]" + "'", str11, "[100, 104, 107, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 105, 108, 52]" + "'", str12, "[100, 105, 108, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 106, 109, 52]" + "'", str13, "[100, 106, 109, 52]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0934");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass25 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 97, 51, 0, -1]" + "'", str24, "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0935");
        int[] intArray1 = new int[] { (-1) };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass26 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[3]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0936");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0937");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass16 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[24]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0938");
        int[] intArray2 = new int[] { '4', 'a' };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass5 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[54, 99]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[53, 98]" + "'", str3, "[53, 98]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[54, 99]" + "'", str4, "[54, 99]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0939");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass41 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 44, 44, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 100, 41, 41, 100, 10]" + "'", str37, "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0, 100, 42, 42, 100, 10]" + "'", str38, "[0, 100, 42, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[0, 100, 43, 43, 100, 10]" + "'", str39, "[0, 100, 43, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[0, 100, 44, 44, 100, 10]" + "'", str40, "[0, 100, 44, 44, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0940");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass51 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[7, 7]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4, 4]" + "'", str47, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5]" + "'", str48, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[6, 6]" + "'", str49, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[7, 7]" + "'", str50, "[7, 7]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0941");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass33 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 59, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 56, 10, 1]" + "'", str29, "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 35, 57, 10, 1]" + "'", str30, "[0, 35, 57, 10, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 35, 58, 10, 1]" + "'", str31, "[0, 35, 58, 10, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 35, 59, 10, 1]" + "'", str32, "[0, 35, 59, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0942");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass34 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[42]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[41]" + "'", str32, "[41]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[42]" + "'", str33, "[42]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0943");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str60 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str61 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass62 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 7, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 3, 57]" + "'", str57, "[6, 3, 57]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6, 4, 57]" + "'", str58, "[6, 4, 57]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[6, 5, 57]" + "'", str59, "[6, 5, 57]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[6, 6, 57]" + "'", str60, "[6, 6, 57]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[6, 7, 57]" + "'", str61, "[6, 7, 57]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0944");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass30 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[8]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0945");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass48 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4, 4]" + "'", str47, "[4, 4]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0946");
        int[] intArray4 = new int[] { (short) 1, (byte) 10, (byte) 0, (-1) };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[3, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 1, -1]" + "'", str5, "[1, 11, 1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 2, -1]" + "'", str6, "[1, 12, 2, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 3, -1]" + "'", str7, "[1, 13, 3, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 4, -1]" + "'", str8, "[1, 14, 4, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 5, -1]" + "'", str9, "[1, 15, 5, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 6, -1]" + "'", str10, "[1, 16, 6, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 7, -1]" + "'", str11, "[1, 17, 7, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 8, -1]" + "'", str12, "[1, 18, 8, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 9, -1]" + "'", str13, "[1, 19, 9, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 0, 0]" + "'", str14, "[2, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 1, 0]" + "'", str15, "[2, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 2, 0]" + "'", str16, "[2, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 3, 0]" + "'", str17, "[2, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 4, 0]" + "'", str18, "[2, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 5, 0]" + "'", str19, "[2, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 6, 0]" + "'", str20, "[2, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 7, 0]" + "'", str21, "[2, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 8, 0]" + "'", str22, "[2, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 9, 0]" + "'", str23, "[2, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 0, 1]" + "'", str24, "[3, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 1, 1]" + "'", str25, "[3, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 2, 1]" + "'", str26, "[3, 2, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0947");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass36 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 2, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 2, 13]" + "'", str35, "[13, 2, 13]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0948");
        int[] intArray6 = new int[] { (byte) 100, 'a', ' ', (byte) -1, (short) -1, (short) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass40 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 100, 2, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 33, 0, -1, 1]" + "'", str7, "[100, 97, 33, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 34, 1, -1, 1]" + "'", str8, "[100, 97, 34, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 35, 2, -1, 1]" + "'", str9, "[100, 97, 35, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 36, 3, -1, 1]" + "'", str10, "[100, 97, 36, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 37, 4, -1, 1]" + "'", str11, "[100, 97, 37, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 38, 5, -1, 1]" + "'", str12, "[100, 97, 38, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 39, 6, -1, 1]" + "'", str13, "[100, 97, 39, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 40, 7, -1, 1]" + "'", str14, "[100, 97, 40, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 41, 8, -1, 1]" + "'", str15, "[100, 97, 41, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 42, 9, -1, 1]" + "'", str16, "[100, 97, 42, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 98, 0, 0, 0, 1]" + "'", str17, "[100, 98, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 98, 1, 1, 0, 1]" + "'", str18, "[100, 98, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 98, 2, 2, 0, 1]" + "'", str19, "[100, 98, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 98, 3, 3, 0, 1]" + "'", str20, "[100, 98, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 98, 4, 4, 0, 1]" + "'", str21, "[100, 98, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 98, 5, 5, 0, 1]" + "'", str22, "[100, 98, 5, 5, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 98, 6, 6, 0, 1]" + "'", str23, "[100, 98, 6, 6, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 98, 7, 7, 0, 1]" + "'", str24, "[100, 98, 7, 7, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 98, 8, 8, 0, 1]" + "'", str25, "[100, 98, 8, 8, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 98, 9, 9, 0, 1]" + "'", str26, "[100, 98, 9, 9, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 99, 0, 0, 1, 1]" + "'", str27, "[100, 99, 0, 0, 1, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 99, 1, 1, 1, 1]" + "'", str28, "[100, 99, 1, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 99, 2, 2, 1, 1]" + "'", str29, "[100, 99, 2, 2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 99, 3, 3, 1, 1]" + "'", str30, "[100, 99, 3, 3, 1, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 99, 4, 4, 1, 1]" + "'", str31, "[100, 99, 4, 4, 1, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 99, 5, 5, 1, 1]" + "'", str32, "[100, 99, 5, 5, 1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 99, 6, 6, 1, 1]" + "'", str33, "[100, 99, 6, 6, 1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 99, 7, 7, 1, 1]" + "'", str34, "[100, 99, 7, 7, 1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 99, 8, 8, 1, 1]" + "'", str35, "[100, 99, 8, 8, 1, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 99, 9, 9, 1, 1]" + "'", str36, "[100, 99, 9, 9, 1, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 100, 0, 0, 2, 1]" + "'", str37, "[100, 100, 0, 0, 2, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 100, 1, 1, 2, 1]" + "'", str38, "[100, 100, 1, 1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 100, 2, 2, 2, 1]" + "'", str39, "[100, 100, 2, 2, 2, 1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0949");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass46 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 2]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0950");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 58, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 56, 10, 1]" + "'", str29, "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 35, 57, 10, 1]" + "'", str30, "[0, 35, 57, 10, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 35, 58, 10, 1]" + "'", str31, "[0, 35, 58, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0951");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 4, 4, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[14, 1, 1, 39]" + "'", str46, "[14, 1, 1, 39]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[14, 2, 2, 39]" + "'", str47, "[14, 2, 2, 39]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[14, 3, 3, 39]" + "'", str48, "[14, 3, 3, 39]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[14, 4, 4, 39]" + "'", str49, "[14, 4, 4, 39]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0952");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 40, 7, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 36, 3, 1]" + "'", str8, "[35, 36, 3, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 37, 4, 1]" + "'", str9, "[35, 37, 4, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 38, 5, 1]" + "'", str10, "[35, 38, 5, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 39, 6, 1]" + "'", str11, "[35, 39, 6, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 40, 7, 1]" + "'", str12, "[35, 40, 7, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0953");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass44 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, 9, 4]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 6, 4]" + "'", str40, "[35, 6, 4]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 7, 4]" + "'", str41, "[35, 7, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 8, 4]" + "'", str42, "[35, 8, 4]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 9, 4]" + "'", str43, "[35, 9, 4]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0954");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass34 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 60, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 56, 10, 1]" + "'", str29, "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 35, 57, 10, 1]" + "'", str30, "[0, 35, 57, 10, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 35, 58, 10, 1]" + "'", str31, "[0, 35, 58, 10, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 35, 59, 10, 1]" + "'", str32, "[0, 35, 59, 10, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 35, 60, 10, 1]" + "'", str33, "[0, 35, 60, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0955");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass42 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 45, 45, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 100, 41, 41, 100, 10]" + "'", str37, "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0, 100, 42, 42, 100, 10]" + "'", str38, "[0, 100, 42, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[0, 100, 43, 43, 100, 10]" + "'", str39, "[0, 100, 43, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[0, 100, 44, 44, 100, 10]" + "'", str40, "[0, 100, 44, 44, 100, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[0, 100, 45, 45, 100, 10]" + "'", str41, "[0, 100, 45, 45, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0956");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[99, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[98, 9, 9, 1]" + "'", str24, "[98, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 0, 0, 2]" + "'", str25, "[99, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 1, 1, 2]" + "'", str26, "[99, 1, 1, 2]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0957");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass58 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 3, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 3, 57]" + "'", str57, "[6, 3, 57]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0958");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass31 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 5, 5, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 99]" + "'", str27, "[2, 2, 2, 99]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 3, 3, 99]" + "'", str28, "[2, 3, 3, 99]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 4, 4, 99]" + "'", str29, "[2, 4, 4, 99]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 5, 5, 99]" + "'", str30, "[2, 5, 5, 99]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0959");
        int[] intArray2 = new int[] { (byte) 1, (-1) };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass29 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0960");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass32 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 6, 6, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 99]" + "'", str27, "[2, 2, 2, 99]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 3, 3, 99]" + "'", str28, "[2, 3, 3, 99]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 4, 4, 99]" + "'", str29, "[2, 4, 4, 99]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 5, 5, 99]" + "'", str30, "[2, 5, 5, 99]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 6, 6, 99]" + "'", str31, "[2, 6, 6, 99]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0961");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass36 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[44]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[41]" + "'", str32, "[41]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[42]" + "'", str33, "[42]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[43]" + "'", str34, "[43]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[44]" + "'", str35, "[44]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0962");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass47 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 52, 142, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[97, 51, 141, 10]" + "'", str45, "[97, 51, 141, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[97, 52, 142, 10]" + "'", str46, "[97, 52, 142, 10]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0963");
        int[] intArray4 = new int[] { 1, (short) 10, (short) 10, (short) -1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass28 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 33, 33, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 11, 11, -1]" + "'", str5, "[1, 11, 11, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 12, 12, -1]" + "'", str6, "[1, 12, 12, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 13, 13, -1]" + "'", str7, "[1, 13, 13, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 14, 14, -1]" + "'", str8, "[1, 14, 14, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 15, 15, -1]" + "'", str9, "[1, 15, 15, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 16, 16, -1]" + "'", str10, "[1, 16, 16, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 17, 17, -1]" + "'", str11, "[1, 17, 17, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 18, 18, -1]" + "'", str12, "[1, 18, 18, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 19, 19, -1]" + "'", str13, "[1, 19, 19, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 20, 20, -1]" + "'", str14, "[1, 20, 20, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 21, 21, -1]" + "'", str15, "[1, 21, 21, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 22, 22, -1]" + "'", str16, "[1, 22, 22, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 23, 23, -1]" + "'", str17, "[1, 23, 23, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 24, 24, -1]" + "'", str18, "[1, 24, 24, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 25, 25, -1]" + "'", str19, "[1, 25, 25, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 26, 26, -1]" + "'", str20, "[1, 26, 26, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 27, 27, -1]" + "'", str21, "[1, 27, 27, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 28, 28, -1]" + "'", str22, "[1, 28, 28, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 29, 29, -1]" + "'", str23, "[1, 29, 29, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 30, 30, -1]" + "'", str24, "[1, 30, 30, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 31, 31, -1]" + "'", str25, "[1, 31, 31, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 32, 32, -1]" + "'", str26, "[1, 32, 32, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 33, 33, -1]" + "'", str27, "[1, 33, 33, -1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0964");
        int[] intArray3 = new int[] { 1, (-1), '4' };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str59 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass60 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 5, 57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 0, 52]" + "'", str4, "[1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 1, 52]" + "'", str5, "[1, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 2, 52]" + "'", str6, "[1, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 3, 52]" + "'", str7, "[1, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 4, 52]" + "'", str8, "[1, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 5, 52]" + "'", str9, "[1, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 6, 52]" + "'", str10, "[1, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 7, 52]" + "'", str11, "[1, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 8, 52]" + "'", str12, "[1, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 9, 52]" + "'", str13, "[1, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 0, 53]" + "'", str14, "[2, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 1, 53]" + "'", str15, "[2, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 2, 53]" + "'", str16, "[2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 3, 53]" + "'", str17, "[2, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 4, 53]" + "'", str18, "[2, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 5, 53]" + "'", str19, "[2, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 6, 53]" + "'", str20, "[2, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 7, 53]" + "'", str21, "[2, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 8, 53]" + "'", str22, "[2, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 9, 53]" + "'", str23, "[2, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 0, 54]" + "'", str24, "[3, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 1, 54]" + "'", str25, "[3, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 2, 54]" + "'", str26, "[3, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 3, 54]" + "'", str27, "[3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 4, 54]" + "'", str28, "[3, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 5, 54]" + "'", str29, "[3, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 6, 54]" + "'", str30, "[3, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 7, 54]" + "'", str31, "[3, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 8, 54]" + "'", str32, "[3, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 9, 54]" + "'", str33, "[3, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 0, 55]" + "'", str34, "[4, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 1, 55]" + "'", str35, "[4, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 2, 55]" + "'", str36, "[4, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 3, 55]" + "'", str37, "[4, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 4, 55]" + "'", str38, "[4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 5, 55]" + "'", str39, "[4, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 6, 55]" + "'", str40, "[4, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 7, 55]" + "'", str41, "[4, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 8, 55]" + "'", str42, "[4, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 9, 55]" + "'", str43, "[4, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 0, 56]" + "'", str44, "[5, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 1, 56]" + "'", str45, "[5, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 2, 56]" + "'", str46, "[5, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 3, 56]" + "'", str47, "[5, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 4, 56]" + "'", str48, "[5, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 5, 56]" + "'", str49, "[5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 6, 56]" + "'", str50, "[5, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 7, 56]" + "'", str51, "[5, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 8, 56]" + "'", str52, "[5, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[5, 9, 56]" + "'", str53, "[5, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 0, 57]" + "'", str54, "[6, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 1, 57]" + "'", str55, "[6, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 2, 57]" + "'", str56, "[6, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 3, 57]" + "'", str57, "[6, 3, 57]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6, 4, 57]" + "'", str58, "[6, 4, 57]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[6, 5, 57]" + "'", str59, "[6, 5, 57]");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0965");
        int[] intArray4 = new int[] { (byte) 10, 'a', (byte) -1, '#' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass51 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 5, 5, 39]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 98, 0, 35]" + "'", str5, "[10, 98, 0, 35]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 99, 1, 35]" + "'", str6, "[10, 99, 1, 35]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 100, 2, 35]" + "'", str7, "[10, 100, 2, 35]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 101, 3, 35]" + "'", str8, "[10, 101, 3, 35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 102, 4, 35]" + "'", str9, "[10, 102, 4, 35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 103, 5, 35]" + "'", str10, "[10, 103, 5, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 104, 6, 35]" + "'", str11, "[10, 104, 6, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 105, 7, 35]" + "'", str12, "[10, 105, 7, 35]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 106, 8, 35]" + "'", str13, "[10, 106, 8, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 107, 9, 35]" + "'", str14, "[10, 107, 9, 35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 0, 0, 36]" + "'", str15, "[11, 0, 0, 36]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 1, 1, 36]" + "'", str16, "[11, 1, 1, 36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 2, 2, 36]" + "'", str17, "[11, 2, 2, 36]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 3, 3, 36]" + "'", str18, "[11, 3, 3, 36]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 4, 4, 36]" + "'", str19, "[11, 4, 4, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 5, 5, 36]" + "'", str20, "[11, 5, 5, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 6, 6, 36]" + "'", str21, "[11, 6, 6, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 7, 7, 36]" + "'", str22, "[11, 7, 7, 36]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[11, 8, 8, 36]" + "'", str23, "[11, 8, 8, 36]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[11, 9, 9, 36]" + "'", str24, "[11, 9, 9, 36]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 0, 0, 37]" + "'", str25, "[12, 0, 0, 37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 1, 1, 37]" + "'", str26, "[12, 1, 1, 37]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 2, 2, 37]" + "'", str27, "[12, 2, 2, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 3, 3, 37]" + "'", str28, "[12, 3, 3, 37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 4, 4, 37]" + "'", str29, "[12, 4, 4, 37]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 5, 5, 37]" + "'", str30, "[12, 5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 6, 6, 37]" + "'", str31, "[12, 6, 6, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 7, 7, 37]" + "'", str32, "[12, 7, 7, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[12, 8, 8, 37]" + "'", str33, "[12, 8, 8, 37]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[12, 9, 9, 37]" + "'", str34, "[12, 9, 9, 37]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 0, 0, 38]" + "'", str35, "[13, 0, 0, 38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 1, 1, 38]" + "'", str36, "[13, 1, 1, 38]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 2, 2, 38]" + "'", str37, "[13, 2, 2, 38]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 3, 3, 38]" + "'", str38, "[13, 3, 3, 38]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 4, 4, 38]" + "'", str39, "[13, 4, 4, 38]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[13, 5, 5, 38]" + "'", str40, "[13, 5, 5, 38]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[13, 6, 6, 38]" + "'", str41, "[13, 6, 6, 38]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[13, 7, 7, 38]" + "'", str42, "[13, 7, 7, 38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[13, 8, 8, 38]" + "'", str43, "[13, 8, 8, 38]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[13, 9, 9, 38]" + "'", str44, "[13, 9, 9, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[14, 0, 0, 39]" + "'", str45, "[14, 0, 0, 39]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[14, 1, 1, 39]" + "'", str46, "[14, 1, 1, 39]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[14, 2, 2, 39]" + "'", str47, "[14, 2, 2, 39]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[14, 3, 3, 39]" + "'", str48, "[14, 3, 3, 39]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[14, 4, 4, 39]" + "'", str49, "[14, 4, 4, 39]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[14, 5, 5, 39]" + "'", str50, "[14, 5, 5, 39]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0966");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass20 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 101, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 101, 0, 0, 0, 1]" + "'", str17, "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 101, 1, 1, 0, 1]" + "'", str18, "[0, 101, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 101, 2, 2, 0, 1]" + "'", str19, "[0, 101, 2, 2, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0967");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass49 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 54, 144, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[97, 51, 141, 10]" + "'", str45, "[97, 51, 141, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[97, 52, 142, 10]" + "'", str46, "[97, 52, 142, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[97, 53, 143, 10]" + "'", str47, "[97, 53, 143, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[97, 54, 144, 10]" + "'", str48, "[97, 54, 144, 10]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0968");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0969");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass28 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[99, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[98, 9, 9, 1]" + "'", str24, "[98, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 0, 0, 2]" + "'", str25, "[99, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 1, 1, 2]" + "'", str26, "[99, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 2, 2, 2]" + "'", str27, "[99, 2, 2, 2]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0970");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str50 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str51 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass52 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[8, 8]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4, 4]" + "'", str47, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5]" + "'", str48, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[6, 6]" + "'", str49, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[7, 7]" + "'", str50, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[8, 8]" + "'", str51, "[8, 8]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0971");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 101, 4, 4, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 101, 0, 0, 0, 1]" + "'", str17, "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 101, 1, 1, 0, 1]" + "'", str18, "[0, 101, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 101, 2, 2, 0, 1]" + "'", str19, "[0, 101, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 101, 3, 3, 0, 1]" + "'", str20, "[0, 101, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 101, 4, 4, 0, 1]" + "'", str21, "[0, 101, 4, 4, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0972");
        int[] intArray1 = new int[] { (byte) -1 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass39 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1]" + "'", str12, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1]" + "'", str22, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1]" + "'", str32, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0973");
        int[] intArray2 = new int[] { (short) 1, (short) -1 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass50 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[6, 6]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 0]" + "'", str3, "[2, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 1]" + "'", str4, "[3, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 2]" + "'", str5, "[4, 2]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 3]" + "'", str6, "[5, 3]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 4]" + "'", str7, "[6, 4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 5]" + "'", str8, "[7, 5]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 6]" + "'", str9, "[8, 6]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 7]" + "'", str10, "[9, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8]" + "'", str11, "[10, 8]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[11, 9]" + "'", str12, "[11, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 1]" + "'", str13, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1]" + "'", str14, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2]" + "'", str15, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[3, 3]" + "'", str16, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4, 4]" + "'", str17, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[5, 5]" + "'", str18, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[6, 6]" + "'", str19, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[7, 7]" + "'", str20, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[8, 8]" + "'", str21, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[9, 9]" + "'", str22, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 0, 1]" + "'", str23, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1]" + "'", str24, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2]" + "'", str25, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3]" + "'", str26, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4, 4]" + "'", str27, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[5, 5]" + "'", str28, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[6, 6]" + "'", str29, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[7, 7]" + "'", str30, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[8, 8]" + "'", str31, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[9, 9]" + "'", str32, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 0, 1]" + "'", str33, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1]" + "'", str34, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[2, 2]" + "'", str35, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3]" + "'", str36, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4]" + "'", str37, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[5, 5]" + "'", str38, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[6, 6]" + "'", str39, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[7, 7]" + "'", str40, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[8, 8]" + "'", str41, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[9, 9]" + "'", str42, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 0, 1]" + "'", str43, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 1]" + "'", str44, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[2, 2]" + "'", str45, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[3, 3]" + "'", str46, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4, 4]" + "'", str47, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5]" + "'", str48, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[6, 6]" + "'", str49, "[6, 6]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0974");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass32 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1]" + "'", str31, "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0975");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass48 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 53, 143, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[97, 51, 141, 10]" + "'", str45, "[97, 51, 141, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[97, 52, 142, 10]" + "'", str46, "[97, 52, 142, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[97, 53, 143, 10]" + "'", str47, "[97, 53, 143, 10]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0976");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass29 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 55, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 97, 51, 0, -1]" + "'", str24, "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 97, 52, 0, -1]" + "'", str25, "[100, 97, 52, 0, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 97, 53, 0, -1]" + "'", str26, "[100, 97, 53, 0, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 97, 54, 0, -1]" + "'", str27, "[100, 97, 54, 0, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 97, 55, 0, -1]" + "'", str28, "[100, 97, 55, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0977");
        int[] intArray4 = new int[] { (byte) 0, (short) 10, (short) -1, 'a' };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass29 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 3, 3, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 0, 97]" + "'", str5, "[0, 11, 0, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 1, 97]" + "'", str6, "[0, 12, 1, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 2, 97]" + "'", str7, "[0, 13, 2, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 3, 97]" + "'", str8, "[0, 14, 3, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 4, 97]" + "'", str9, "[0, 15, 4, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 5, 97]" + "'", str10, "[0, 16, 5, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 6, 97]" + "'", str11, "[0, 17, 6, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 7, 97]" + "'", str12, "[0, 18, 7, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 8, 97]" + "'", str13, "[0, 19, 8, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 9, 97]" + "'", str14, "[0, 20, 9, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 98]" + "'", str15, "[1, 0, 0, 98]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 98]" + "'", str16, "[1, 1, 1, 98]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 98]" + "'", str17, "[1, 2, 2, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 98]" + "'", str18, "[1, 3, 3, 98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 98]" + "'", str19, "[1, 4, 4, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 98]" + "'", str20, "[1, 5, 5, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 98]" + "'", str21, "[1, 6, 6, 98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 98]" + "'", str22, "[1, 7, 7, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 98]" + "'", str23, "[1, 8, 8, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 98]" + "'", str24, "[1, 9, 9, 98]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 99]" + "'", str25, "[2, 0, 0, 99]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 99]" + "'", str26, "[2, 1, 1, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 99]" + "'", str27, "[2, 2, 2, 99]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 3, 3, 99]" + "'", str28, "[2, 3, 3, 99]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0978");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass26 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 52, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 97, 51, 0, -1]" + "'", str24, "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 97, 52, 0, -1]" + "'", str25, "[100, 97, 52, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0979");
        int[] intArray6 = new int[] { (byte) 0, (short) 100, 0, (-1), (short) -1, (byte) 1 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass21 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 101, 3, 3, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 1, 0, -1, 1]" + "'", str7, "[0, 100, 1, 0, -1, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 2, 1, -1, 1]" + "'", str8, "[0, 100, 2, 1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 3, 2, -1, 1]" + "'", str9, "[0, 100, 3, 2, -1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 4, 3, -1, 1]" + "'", str10, "[0, 100, 4, 3, -1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 5, 4, -1, 1]" + "'", str11, "[0, 100, 5, 4, -1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 6, 5, -1, 1]" + "'", str12, "[0, 100, 6, 5, -1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 7, 6, -1, 1]" + "'", str13, "[0, 100, 7, 6, -1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 8, 7, -1, 1]" + "'", str14, "[0, 100, 8, 7, -1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 9, 8, -1, 1]" + "'", str15, "[0, 100, 9, 8, -1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 10, 9, -1, 1]" + "'", str16, "[0, 100, 10, 9, -1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 101, 0, 0, 0, 1]" + "'", str17, "[0, 101, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 101, 1, 1, 0, 1]" + "'", str18, "[0, 101, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 101, 2, 2, 0, 1]" + "'", str19, "[0, 101, 2, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 101, 3, 3, 0, 1]" + "'", str20, "[0, 101, 3, 3, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0980");
        int[] intArray3 = new int[] { ' ', (-1), 1 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass45 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[36, 0, 5]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 0, 1]" + "'", str4, "[32, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 1, 1]" + "'", str5, "[32, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 2, 1]" + "'", str6, "[32, 2, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 3, 1]" + "'", str7, "[32, 3, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 4, 1]" + "'", str8, "[32, 4, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 5, 1]" + "'", str9, "[32, 5, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 6, 1]" + "'", str10, "[32, 6, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 7, 1]" + "'", str11, "[32, 7, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[32, 8, 1]" + "'", str12, "[32, 8, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[32, 9, 1]" + "'", str13, "[32, 9, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 0, 2]" + "'", str14, "[33, 0, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 1, 2]" + "'", str15, "[33, 1, 2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 2, 2]" + "'", str16, "[33, 2, 2]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 3, 2]" + "'", str17, "[33, 3, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 4, 2]" + "'", str18, "[33, 4, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 5, 2]" + "'", str19, "[33, 5, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 6, 2]" + "'", str20, "[33, 6, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 7, 2]" + "'", str21, "[33, 7, 2]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[33, 8, 2]" + "'", str22, "[33, 8, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[33, 9, 2]" + "'", str23, "[33, 9, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 0, 3]" + "'", str24, "[34, 0, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 1, 3]" + "'", str25, "[34, 1, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 2, 3]" + "'", str26, "[34, 2, 3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 3, 3]" + "'", str27, "[34, 3, 3]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 4, 3]" + "'", str28, "[34, 4, 3]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 5, 3]" + "'", str29, "[34, 5, 3]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 6, 3]" + "'", str30, "[34, 6, 3]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 7, 3]" + "'", str31, "[34, 7, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[34, 8, 3]" + "'", str32, "[34, 8, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[34, 9, 3]" + "'", str33, "[34, 9, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 0, 4]" + "'", str34, "[35, 0, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 1, 4]" + "'", str35, "[35, 1, 4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 4]" + "'", str36, "[35, 2, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 4]" + "'", str37, "[35, 3, 4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 4, 4]" + "'", str38, "[35, 4, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 5, 4]" + "'", str39, "[35, 5, 4]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 6, 4]" + "'", str40, "[35, 6, 4]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 7, 4]" + "'", str41, "[35, 7, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 8, 4]" + "'", str42, "[35, 8, 4]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 9, 4]" + "'", str43, "[35, 9, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[36, 0, 5]" + "'", str44, "[36, 0, 5]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0981");
        int[] intArray4 = new int[] { 'a', (short) 1, (byte) -1, (short) 0 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass29 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[99, 3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 2, 0, 0]" + "'", str5, "[97, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 3, 1, 0]" + "'", str6, "[97, 3, 1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 4, 2, 0]" + "'", str7, "[97, 4, 2, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 5, 3, 0]" + "'", str8, "[97, 5, 3, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 6, 4, 0]" + "'", str9, "[97, 6, 4, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 7, 5, 0]" + "'", str10, "[97, 7, 5, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 8, 6, 0]" + "'", str11, "[97, 8, 6, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 9, 7, 0]" + "'", str12, "[97, 9, 7, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 10, 8, 0]" + "'", str13, "[97, 10, 8, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 11, 9, 0]" + "'", str14, "[97, 11, 9, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 0, 0, 1]" + "'", str15, "[98, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 1, 1, 1]" + "'", str16, "[98, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 2, 2, 1]" + "'", str17, "[98, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 3, 3, 1]" + "'", str18, "[98, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 4, 4, 1]" + "'", str19, "[98, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 5, 5, 1]" + "'", str20, "[98, 5, 5, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 6, 6, 1]" + "'", str21, "[98, 6, 6, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 7, 7, 1]" + "'", str22, "[98, 7, 7, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 8, 8, 1]" + "'", str23, "[98, 8, 8, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[98, 9, 9, 1]" + "'", str24, "[98, 9, 9, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 0, 0, 2]" + "'", str25, "[99, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 1, 1, 2]" + "'", str26, "[99, 1, 1, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 2, 2, 2]" + "'", str27, "[99, 2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 3, 3, 2]" + "'", str28, "[99, 3, 3, 2]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0982");
        int[] intArray6 = new int[] { (short) 1, 1, ' ', ' ', 10, (-1) };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass38 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 63, 63, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 1, 33, 33, 10, -1]" + "'", str7, "[1, 1, 33, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 1, 34, 34, 10, -1]" + "'", str8, "[1, 1, 34, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 1, 35, 35, 10, -1]" + "'", str9, "[1, 1, 35, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 1, 36, 36, 10, -1]" + "'", str10, "[1, 1, 36, 36, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1, 37, 37, 10, -1]" + "'", str11, "[1, 1, 37, 37, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 1, 38, 38, 10, -1]" + "'", str12, "[1, 1, 38, 38, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 39, 39, 10, -1]" + "'", str13, "[1, 1, 39, 39, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 40, 40, 10, -1]" + "'", str14, "[1, 1, 40, 40, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 1, 41, 41, 10, -1]" + "'", str15, "[1, 1, 41, 41, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 42, 42, 10, -1]" + "'", str16, "[1, 1, 42, 42, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 1, 43, 43, 10, -1]" + "'", str17, "[1, 1, 43, 43, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 1, 44, 44, 10, -1]" + "'", str18, "[1, 1, 44, 44, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 1, 45, 45, 10, -1]" + "'", str19, "[1, 1, 45, 45, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 1, 46, 46, 10, -1]" + "'", str20, "[1, 1, 46, 46, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1, 47, 47, 10, -1]" + "'", str21, "[1, 1, 47, 47, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 1, 48, 48, 10, -1]" + "'", str22, "[1, 1, 48, 48, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1, 49, 49, 10, -1]" + "'", str23, "[1, 1, 49, 49, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 1, 50, 50, 10, -1]" + "'", str24, "[1, 1, 50, 50, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 1, 51, 51, 10, -1]" + "'", str25, "[1, 1, 51, 51, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 1, 52, 52, 10, -1]" + "'", str26, "[1, 1, 52, 52, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 1, 53, 53, 10, -1]" + "'", str27, "[1, 1, 53, 53, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 1, 54, 54, 10, -1]" + "'", str28, "[1, 1, 54, 54, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 1, 55, 55, 10, -1]" + "'", str29, "[1, 1, 55, 55, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 1, 56, 56, 10, -1]" + "'", str30, "[1, 1, 56, 56, 10, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 1, 57, 57, 10, -1]" + "'", str31, "[1, 1, 57, 57, 10, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 1, 58, 58, 10, -1]" + "'", str32, "[1, 1, 58, 58, 10, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1, 59, 59, 10, -1]" + "'", str33, "[1, 1, 59, 59, 10, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 1, 60, 60, 10, -1]" + "'", str34, "[1, 1, 60, 60, 10, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 1, 61, 61, 10, -1]" + "'", str35, "[1, 1, 61, 61, 10, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 1, 62, 62, 10, -1]" + "'", str36, "[1, 1, 62, 62, 10, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 1, 63, 63, 10, -1]" + "'", str37, "[1, 1, 63, 63, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0983");
        int[] intArray5 = new int[] { (byte) 0, '#', ' ', 10, 1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass31 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 35, 57, 10, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 35, 33, 10, 1]" + "'", str6, "[0, 35, 33, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 34, 10, 1]" + "'", str7, "[0, 35, 34, 10, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 35, 10, 1]" + "'", str8, "[0, 35, 35, 10, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 36, 10, 1]" + "'", str9, "[0, 35, 36, 10, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 37, 10, 1]" + "'", str10, "[0, 35, 37, 10, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 38, 10, 1]" + "'", str11, "[0, 35, 38, 10, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 39, 10, 1]" + "'", str12, "[0, 35, 39, 10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 40, 10, 1]" + "'", str13, "[0, 35, 40, 10, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 41, 10, 1]" + "'", str14, "[0, 35, 41, 10, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 42, 10, 1]" + "'", str15, "[0, 35, 42, 10, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 43, 10, 1]" + "'", str16, "[0, 35, 43, 10, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 44, 10, 1]" + "'", str17, "[0, 35, 44, 10, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 45, 10, 1]" + "'", str18, "[0, 35, 45, 10, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 46, 10, 1]" + "'", str19, "[0, 35, 46, 10, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 35, 47, 10, 1]" + "'", str20, "[0, 35, 47, 10, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 35, 48, 10, 1]" + "'", str21, "[0, 35, 48, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 35, 49, 10, 1]" + "'", str22, "[0, 35, 49, 10, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 35, 50, 10, 1]" + "'", str23, "[0, 35, 50, 10, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 35, 51, 10, 1]" + "'", str24, "[0, 35, 51, 10, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 35, 52, 10, 1]" + "'", str25, "[0, 35, 52, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 35, 53, 10, 1]" + "'", str26, "[0, 35, 53, 10, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 35, 54, 10, 1]" + "'", str27, "[0, 35, 54, 10, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 35, 55, 10, 1]" + "'", str28, "[0, 35, 55, 10, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 56, 10, 1]" + "'", str29, "[0, 35, 56, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 35, 57, 10, 1]" + "'", str30, "[0, 35, 57, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0984");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass37 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 3, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 2, 13]" + "'", str35, "[13, 2, 13]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 3, 13]" + "'", str36, "[13, 3, 13]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0985");
        int[] intArray6 = new int[] { (short) 0, '#', 0, ' ', 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass20 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 35, 13, 45, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 1, 33, 100, 10]" + "'", str7, "[0, 35, 1, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 35, 2, 34, 100, 10]" + "'", str8, "[0, 35, 2, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 35, 3, 35, 100, 10]" + "'", str9, "[0, 35, 3, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 35, 4, 36, 100, 10]" + "'", str10, "[0, 35, 4, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 35, 5, 37, 100, 10]" + "'", str11, "[0, 35, 5, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 35, 6, 38, 100, 10]" + "'", str12, "[0, 35, 6, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 35, 7, 39, 100, 10]" + "'", str13, "[0, 35, 7, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 35, 8, 40, 100, 10]" + "'", str14, "[0, 35, 8, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 35, 9, 41, 100, 10]" + "'", str15, "[0, 35, 9, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 35, 10, 42, 100, 10]" + "'", str16, "[0, 35, 10, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 35, 11, 43, 100, 10]" + "'", str17, "[0, 35, 11, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 35, 12, 44, 100, 10]" + "'", str18, "[0, 35, 12, 44, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 35, 13, 45, 100, 10]" + "'", str19, "[0, 35, 13, 45, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0986");
        int[] intArray4 = new int[] { 'a', 10, 100, (short) 10 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass50 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 55, 145, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 11, 101, 10]" + "'", str5, "[97, 11, 101, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 12, 102, 10]" + "'", str6, "[97, 12, 102, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 13, 103, 10]" + "'", str7, "[97, 13, 103, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 14, 104, 10]" + "'", str8, "[97, 14, 104, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 15, 105, 10]" + "'", str9, "[97, 15, 105, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 16, 106, 10]" + "'", str10, "[97, 16, 106, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 17, 107, 10]" + "'", str11, "[97, 17, 107, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 18, 108, 10]" + "'", str12, "[97, 18, 108, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 19, 109, 10]" + "'", str13, "[97, 19, 109, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[97, 20, 110, 10]" + "'", str14, "[97, 20, 110, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[97, 21, 111, 10]" + "'", str15, "[97, 21, 111, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[97, 22, 112, 10]" + "'", str16, "[97, 22, 112, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[97, 23, 113, 10]" + "'", str17, "[97, 23, 113, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[97, 24, 114, 10]" + "'", str18, "[97, 24, 114, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[97, 25, 115, 10]" + "'", str19, "[97, 25, 115, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[97, 26, 116, 10]" + "'", str20, "[97, 26, 116, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[97, 27, 117, 10]" + "'", str21, "[97, 27, 117, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[97, 28, 118, 10]" + "'", str22, "[97, 28, 118, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[97, 29, 119, 10]" + "'", str23, "[97, 29, 119, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[97, 30, 120, 10]" + "'", str24, "[97, 30, 120, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[97, 31, 121, 10]" + "'", str25, "[97, 31, 121, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[97, 32, 122, 10]" + "'", str26, "[97, 32, 122, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[97, 33, 123, 10]" + "'", str27, "[97, 33, 123, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[97, 34, 124, 10]" + "'", str28, "[97, 34, 124, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[97, 35, 125, 10]" + "'", str29, "[97, 35, 125, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[97, 36, 126, 10]" + "'", str30, "[97, 36, 126, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[97, 37, 127, 10]" + "'", str31, "[97, 37, 127, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[97, 38, 128, 10]" + "'", str32, "[97, 38, 128, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[97, 39, 129, 10]" + "'", str33, "[97, 39, 129, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[97, 40, 130, 10]" + "'", str34, "[97, 40, 130, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[97, 41, 131, 10]" + "'", str35, "[97, 41, 131, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[97, 42, 132, 10]" + "'", str36, "[97, 42, 132, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[97, 43, 133, 10]" + "'", str37, "[97, 43, 133, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[97, 44, 134, 10]" + "'", str38, "[97, 44, 134, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[97, 45, 135, 10]" + "'", str39, "[97, 45, 135, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97, 46, 136, 10]" + "'", str40, "[97, 46, 136, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[97, 47, 137, 10]" + "'", str41, "[97, 47, 137, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[97, 48, 138, 10]" + "'", str42, "[97, 48, 138, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[97, 49, 139, 10]" + "'", str43, "[97, 49, 139, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[97, 50, 140, 10]" + "'", str44, "[97, 50, 140, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[97, 51, 141, 10]" + "'", str45, "[97, 51, 141, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[97, 52, 142, 10]" + "'", str46, "[97, 52, 142, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[97, 53, 143, 10]" + "'", str47, "[97, 53, 143, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[97, 54, 144, 10]" + "'", str48, "[97, 54, 144, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[97, 55, 145, 10]" + "'", str49, "[97, 55, 145, 10]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0987");
        int[] intArray2 = new int[] { (short) 1, 10 };
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass4 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2, 11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 11]" + "'", str3, "[2, 11]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0988");
        int[] intArray3 = new int[] { (byte) 1, 'a', (short) 100 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 132, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 98, 100]" + "'", str4, "[1, 98, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 99, 100]" + "'", str5, "[1, 99, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 100, 100]" + "'", str6, "[1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 101, 100]" + "'", str7, "[1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 102, 100]" + "'", str8, "[1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 103, 100]" + "'", str9, "[1, 103, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 104, 100]" + "'", str10, "[1, 104, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 105, 100]" + "'", str11, "[1, 105, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 106, 100]" + "'", str12, "[1, 106, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 107, 100]" + "'", str13, "[1, 107, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 108, 100]" + "'", str14, "[1, 108, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 109, 100]" + "'", str15, "[1, 109, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 110, 100]" + "'", str16, "[1, 110, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 111, 100]" + "'", str17, "[1, 111, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 112, 100]" + "'", str18, "[1, 112, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 113, 100]" + "'", str19, "[1, 113, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 114, 100]" + "'", str20, "[1, 114, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 115, 100]" + "'", str21, "[1, 115, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 116, 100]" + "'", str22, "[1, 116, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 117, 100]" + "'", str23, "[1, 117, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 118, 100]" + "'", str24, "[1, 118, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 119, 100]" + "'", str25, "[1, 119, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 120, 100]" + "'", str26, "[1, 120, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 121, 100]" + "'", str27, "[1, 121, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 122, 100]" + "'", str28, "[1, 122, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 123, 100]" + "'", str29, "[1, 123, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 124, 100]" + "'", str30, "[1, 124, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 125, 100]" + "'", str31, "[1, 125, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 126, 100]" + "'", str32, "[1, 126, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 127, 100]" + "'", str33, "[1, 127, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 128, 100]" + "'", str34, "[1, 128, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 129, 100]" + "'", str35, "[1, 129, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 130, 100]" + "'", str36, "[1, 130, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 131, 100]" + "'", str37, "[1, 131, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 132, 100]" + "'", str38, "[1, 132, 100]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0989");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[31]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0990");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass40 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 6, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 2, 13]" + "'", str35, "[13, 2, 13]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 3, 13]" + "'", str36, "[13, 3, 13]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 4, 13]" + "'", str37, "[13, 4, 13]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 5, 13]" + "'", str38, "[13, 5, 13]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[13, 6, 13]" + "'", str39, "[13, 6, 13]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0991");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass38 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 4, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 2, 13]" + "'", str35, "[13, 2, 13]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 3, 13]" + "'", str36, "[13, 3, 13]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 4, 13]" + "'", str37, "[13, 4, 13]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0992");
        int[] intArray4 = new int[] { '#', ' ', (byte) -1, (short) 1 };
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass12 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, 39, 6, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[35, 33, 0, 1]" + "'", str5, "[35, 33, 0, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[35, 34, 1, 1]" + "'", str6, "[35, 34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 35, 2, 1]" + "'", str7, "[35, 35, 2, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 36, 3, 1]" + "'", str8, "[35, 36, 3, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 37, 4, 1]" + "'", str9, "[35, 37, 4, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 38, 5, 1]" + "'", str10, "[35, 38, 5, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 39, 6, 1]" + "'", str11, "[35, 39, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0993");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass48 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[146]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[142]" + "'", str43, "[142]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[143]" + "'", str44, "[143]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[144]" + "'", str45, "[144]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[145]" + "'", str46, "[145]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[146]" + "'", str47, "[146]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0994");
        int[] intArray3 = new int[] { (short) 10, (short) 0, (short) 10 };
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass39 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[13, 5, 13]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[10, 1, 10]" + "'", str4, "[10, 1, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[10, 2, 10]" + "'", str5, "[10, 2, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 3, 10]" + "'", str6, "[10, 3, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 4, 10]" + "'", str7, "[10, 4, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 5, 10]" + "'", str8, "[10, 5, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 6, 10]" + "'", str9, "[10, 6, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 7, 10]" + "'", str10, "[10, 7, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 8, 10]" + "'", str11, "[10, 8, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 9, 10]" + "'", str12, "[10, 9, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[11, 0, 11]" + "'", str13, "[11, 0, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[11, 1, 11]" + "'", str14, "[11, 1, 11]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[11, 2, 11]" + "'", str15, "[11, 2, 11]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[11, 3, 11]" + "'", str16, "[11, 3, 11]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[11, 4, 11]" + "'", str17, "[11, 4, 11]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[11, 5, 11]" + "'", str18, "[11, 5, 11]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[11, 6, 11]" + "'", str19, "[11, 6, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[11, 7, 11]" + "'", str20, "[11, 7, 11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[11, 8, 11]" + "'", str21, "[11, 8, 11]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[11, 9, 11]" + "'", str22, "[11, 9, 11]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[12, 0, 12]" + "'", str23, "[12, 0, 12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[12, 1, 12]" + "'", str24, "[12, 1, 12]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[12, 2, 12]" + "'", str25, "[12, 2, 12]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[12, 3, 12]" + "'", str26, "[12, 3, 12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[12, 4, 12]" + "'", str27, "[12, 4, 12]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[12, 5, 12]" + "'", str28, "[12, 5, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[12, 6, 12]" + "'", str29, "[12, 6, 12]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[12, 7, 12]" + "'", str30, "[12, 7, 12]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[12, 8, 12]" + "'", str31, "[12, 8, 12]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[12, 9, 12]" + "'", str32, "[12, 9, 12]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[13, 0, 13]" + "'", str33, "[13, 0, 13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[13, 1, 13]" + "'", str34, "[13, 1, 13]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[13, 2, 13]" + "'", str35, "[13, 2, 13]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[13, 3, 13]" + "'", str36, "[13, 3, 13]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[13, 4, 13]" + "'", str37, "[13, 4, 13]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[13, 5, 13]" + "'", str38, "[13, 5, 13]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0995");
        int[] intArray1 = new int[] { (short) 0 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass31 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[9]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 1]" + "'", str11, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 1]" + "'", str21, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0996");
        int[] intArray6 = new int[] { (byte) 0, (byte) 100, (short) 10, 10, (byte) 100, (short) 10 };
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass40 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 100, 43, 43, 100, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 100, 11, 11, 100, 10]" + "'", str7, "[0, 100, 11, 11, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 100, 12, 12, 100, 10]" + "'", str8, "[0, 100, 12, 12, 100, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 100, 13, 13, 100, 10]" + "'", str9, "[0, 100, 13, 13, 100, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 100, 14, 14, 100, 10]" + "'", str10, "[0, 100, 14, 14, 100, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 100, 15, 15, 100, 10]" + "'", str11, "[0, 100, 15, 15, 100, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 100, 16, 16, 100, 10]" + "'", str12, "[0, 100, 16, 16, 100, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 100, 17, 17, 100, 10]" + "'", str13, "[0, 100, 17, 17, 100, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 100, 18, 18, 100, 10]" + "'", str14, "[0, 100, 18, 18, 100, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 100, 19, 19, 100, 10]" + "'", str15, "[0, 100, 19, 19, 100, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 100, 20, 20, 100, 10]" + "'", str16, "[0, 100, 20, 20, 100, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 100, 21, 21, 100, 10]" + "'", str17, "[0, 100, 21, 21, 100, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 100, 22, 22, 100, 10]" + "'", str18, "[0, 100, 22, 22, 100, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 100, 23, 23, 100, 10]" + "'", str19, "[0, 100, 23, 23, 100, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 100, 24, 24, 100, 10]" + "'", str20, "[0, 100, 24, 24, 100, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 100, 25, 25, 100, 10]" + "'", str21, "[0, 100, 25, 25, 100, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 100, 26, 26, 100, 10]" + "'", str22, "[0, 100, 26, 26, 100, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 100, 27, 27, 100, 10]" + "'", str23, "[0, 100, 27, 27, 100, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 100, 28, 28, 100, 10]" + "'", str24, "[0, 100, 28, 28, 100, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 100, 29, 29, 100, 10]" + "'", str25, "[0, 100, 29, 29, 100, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 100, 30, 30, 100, 10]" + "'", str26, "[0, 100, 30, 30, 100, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 100, 31, 31, 100, 10]" + "'", str27, "[0, 100, 31, 31, 100, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 100, 32, 32, 100, 10]" + "'", str28, "[0, 100, 32, 32, 100, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 100, 33, 33, 100, 10]" + "'", str29, "[0, 100, 33, 33, 100, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 100, 34, 34, 100, 10]" + "'", str30, "[0, 100, 34, 34, 100, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 100, 35, 35, 100, 10]" + "'", str31, "[0, 100, 35, 35, 100, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 100, 36, 36, 100, 10]" + "'", str32, "[0, 100, 36, 36, 100, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 100, 37, 37, 100, 10]" + "'", str33, "[0, 100, 37, 37, 100, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 100, 38, 38, 100, 10]" + "'", str34, "[0, 100, 38, 38, 100, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 100, 39, 39, 100, 10]" + "'", str35, "[0, 100, 39, 39, 100, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 100, 40, 40, 100, 10]" + "'", str36, "[0, 100, 40, 40, 100, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 100, 41, 41, 100, 10]" + "'", str37, "[0, 100, 41, 41, 100, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0, 100, 42, 42, 100, 10]" + "'", str38, "[0, 100, 42, 42, 100, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[0, 100, 43, 43, 100, 10]" + "'", str39, "[0, 100, 43, 43, 100, 10]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0997");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass30 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 56, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 97, 51, 0, -1]" + "'", str24, "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 97, 52, 0, -1]" + "'", str25, "[100, 97, 52, 0, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 97, 53, 0, -1]" + "'", str26, "[100, 97, 53, 0, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 97, 54, 0, -1]" + "'", str27, "[100, 97, 54, 0, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 97, 55, 0, -1]" + "'", str28, "[100, 97, 55, 0, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 97, 56, 0, -1]" + "'", str29, "[100, 97, 56, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0998");
        int[] intArray1 = new int[] { 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[33]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test0999");
        int[] intArray1 = new int[] { (byte) 10 };
        java.lang.String str2 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass37 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[45]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[11]" + "'", str2, "[11]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[12]" + "'", str3, "[12]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[13]" + "'", str4, "[13]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[14]" + "'", str5, "[14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[15]" + "'", str6, "[15]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[16]" + "'", str7, "[16]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[17]" + "'", str8, "[17]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[18]" + "'", str9, "[18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[19]" + "'", str10, "[19]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[20]" + "'", str11, "[20]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[21]" + "'", str12, "[21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[22]" + "'", str13, "[22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[23]" + "'", str14, "[23]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[24]" + "'", str15, "[24]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[25]" + "'", str16, "[25]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[26]" + "'", str17, "[26]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[27]" + "'", str18, "[27]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[28]" + "'", str19, "[28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[29]" + "'", str20, "[29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[30]" + "'", str21, "[30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[31]" + "'", str22, "[31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[32]" + "'", str23, "[32]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[33]" + "'", str24, "[33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34]" + "'", str25, "[34]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35]" + "'", str26, "[35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[36]" + "'", str27, "[36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[37]" + "'", str28, "[37]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[38]" + "'", str29, "[38]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[39]" + "'", str30, "[39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[40]" + "'", str31, "[40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[41]" + "'", str32, "[41]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[42]" + "'", str33, "[42]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[43]" + "'", str34, "[43]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[44]" + "'", str35, "[44]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[45]" + "'", str36, "[45]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTestNEXT_PALINDROMEPatched1.test1000");
        int[] intArray5 = new int[] { (short) 100, 'a', ' ', 0, (byte) -1 };
        java.lang.String str6 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = correct_java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97, 58, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 97, 33, 0, -1]" + "'", str6, "[100, 97, 33, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 97, 34, 0, -1]" + "'", str7, "[100, 97, 34, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 97, 35, 0, -1]" + "'", str8, "[100, 97, 35, 0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 97, 36, 0, -1]" + "'", str9, "[100, 97, 36, 0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 97, 37, 0, -1]" + "'", str10, "[100, 97, 37, 0, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 97, 38, 0, -1]" + "'", str11, "[100, 97, 38, 0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 97, 39, 0, -1]" + "'", str12, "[100, 97, 39, 0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 97, 40, 0, -1]" + "'", str13, "[100, 97, 40, 0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 97, 41, 0, -1]" + "'", str14, "[100, 97, 41, 0, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 97, 42, 0, -1]" + "'", str15, "[100, 97, 42, 0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 97, 43, 0, -1]" + "'", str16, "[100, 97, 43, 0, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 97, 44, 0, -1]" + "'", str17, "[100, 97, 44, 0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 97, 45, 0, -1]" + "'", str18, "[100, 97, 45, 0, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 97, 46, 0, -1]" + "'", str19, "[100, 97, 46, 0, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 97, 47, 0, -1]" + "'", str20, "[100, 97, 47, 0, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 97, 48, 0, -1]" + "'", str21, "[100, 97, 48, 0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 97, 49, 0, -1]" + "'", str22, "[100, 97, 49, 0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 97, 50, 0, -1]" + "'", str23, "[100, 97, 50, 0, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 97, 51, 0, -1]" + "'", str24, "[100, 97, 51, 0, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 97, 52, 0, -1]" + "'", str25, "[100, 97, 52, 0, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 97, 53, 0, -1]" + "'", str26, "[100, 97, 53, 0, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 97, 54, 0, -1]" + "'", str27, "[100, 97, 54, 0, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 97, 55, 0, -1]" + "'", str28, "[100, 97, 55, 0, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 97, 56, 0, -1]" + "'", str29, "[100, 97, 56, 0, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 97, 57, 0, -1]" + "'", str30, "[100, 97, 57, 0, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 97, 58, 0, -1]" + "'", str31, "[100, 97, 58, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }
}

