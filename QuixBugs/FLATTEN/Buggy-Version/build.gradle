plugins {
    id 'java' 
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    implementation group: 'com.squareup', name: 'javawriter', version: '2.5.1'
    implementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    implementation group: 'fr.inria.gforge.spoon', name: 'spoon-core', version: '6.0.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.32'
    implementation group: 'org.evosuite', name: 'evosuite-master', version: '1.0.6'
}

sourceSets {
    main {
        java {
            srcDirs = ['.']
        }
    }

    test {
        java {
            srcDirs = ['java_testcases/junit']
            exclude 'crt_program'
        }
    }

    crtTest {
        java {
            srcDirs = ['java_testcases/junit/crt_program']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    randoopCoverage {
        java {
            srcDirs = ['java_testcases/randoop']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    evosuiteCoverage {
        java {
            srcDirs = ['java_testcases/evosuite-tests']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

     allCoverage {
        java {
            srcDirs = ['java_testcases/evosuite-tests','java_testcases/randoop', 'java_testcases/junit/crt_program', 'java_testcases/junit']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    randoopEvosuite{
        java {
            srcDirs = ['java_testcases/randoop', 'java_testcases/evosuite-tests']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    crtTestImplementation.extendsFrom implementation
    crtTestRuntimeOnly.extendsFrom runtimeOnly
    randoopCoverageImplementation.extendsFrom implementation
    randoopCoverageRuntimeOnly.extendsFrom runtimeOnly
    evosuiteCoverageImplementation.extendsFrom implementation
    evosuiteCoverageRuntimeOnly.extendsFrom runtimeOnly
    allCoverageImplementation.extendsFrom implementation
    allCoverageRuntimeOnly.extendsFrom runtimeOnly
    randoopEvosuiteImplementation.extendsFrom implementation
    randoopEvosuiteRuntimeOnly.extendsFrom runtimeOnly
    
}

task crtTest(type: Test) {
    description = 'Runs tests on correct programs.'
    group = 'verification'
    check.dependsOn(crtTest)
    testClassesDirs = sourceSets.crtTest.output.classesDirs
    classpath = sourceSets.crtTest.runtimeClasspath
    finalizedBy jacocoTestReport
}

task randoopCoverage(type: Test) {
    description = 'Runs randoop tests on correct programs.'
    group = 'verification'
    check.dependsOn(randoopCoverage)
    testClassesDirs = sourceSets.randoopCoverage.output.classesDirs
    classpath = sourceSets.randoopCoverage.runtimeClasspath
    finalizedBy jacocoTestReport
    ignoreFailures = true
}

task evosuiteCoverage(type: Test) {
    description = 'Runs evosuite tests on correct programs.'
    group = 'verification'
    check.dependsOn(evosuiteCoverage)
    testClassesDirs = sourceSets.evosuiteCoverage.output.classesDirs
    classpath = sourceSets.evosuiteCoverage.runtimeClasspath
    finalizedBy jacocoTestReport
    ignoreFailures = true
}

task allCoverage(type: Test) {
    description = 'Runs all tests on correct programs.'
    group = 'verification'
    check.dependsOn(allCoverage)
    testClassesDirs = sourceSets.allCoverage.output.classesDirs
    classpath = sourceSets.allCoverage.runtimeClasspath    
    finalizedBy jacocoTestReport
    ignoreFailures = true
}

task randoopEvosuite(type: Test) {
    description = 'Runs randoop and evosuite tests.'
    group = 'verification'
    check.dependsOn(randoopEvosuite)
    testClassesDirs = sourceSets.randoopEvosuite.output.classesDirs
    classpath = sourceSets.randoopEvosuite.runtimeClasspath
}

tasks.withType(Test) {
    maxHeapSize = "4096m"
}
jacocoTestReport {
    executionData tasks.withType(Test)

    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("../JacocoCoverage")
    }
}
