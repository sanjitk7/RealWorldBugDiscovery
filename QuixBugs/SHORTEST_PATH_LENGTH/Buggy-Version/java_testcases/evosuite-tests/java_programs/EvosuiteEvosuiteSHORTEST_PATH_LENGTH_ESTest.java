/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 08:31:13 GMT 2024
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiFunction;
import java_programs.Node;
import java_programs.SHORTEST_PATH_LENGTH;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteEvosuiteSHORTEST_PATH_LENGTH_ESTest extends EvosuiteEvosuiteSHORTEST_PATH_LENGTH_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Node, Integer> hashMap0 = new HashMap<Node, Integer>();
      Node node0 = new Node();
      Integer integer0 = new Integer(1677);
      hashMap0.put(node0, integer0);
      Node node1 = new Node("", (ArrayList<Node>) null);
      Integer integer1 = new Integer(3009);
      hashMap0.put(node1, integer1);
      Node node2 = SHORTEST_PATH_LENGTH.getNodeWithMinDistance(hashMap0);
      assertNotNull(node2);
      assertSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Node, Integer> hashMap0 = new HashMap<Node, Integer>();
      Node node0 = SHORTEST_PATH_LENGTH.getNodeWithMinDistance(hashMap0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Node, Integer> hashMap0 = new HashMap<Node, Integer>();
      Integer integer0 = new Integer((-1135));
      hashMap0.put((Node) null, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        SHORTEST_PATH_LENGTH.getNodeWithMinDistance(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java_programs.SHORTEST_PATH_LENGTH", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<List<Node>, Integer> hashMap0 = new HashMap<List<Node>, Integer>();
      Node node0 = new Node("");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      arrayList0.add(node0);
      Node node1 = new Node("^4hgAsZE@F-AI ", node0);
      arrayList0.add(node1);
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList0, integer0);
      // Undeclared exception!
      try { 
        SHORTEST_PATH_LENGTH.shortest_path_length(hashMap0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java_programs.SHORTEST_PATH_LENGTH", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<List<Node>, Integer> hashMap0 = new HashMap<List<Node>, Integer>();
      Node node0 = new Node("}");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      arrayList0.add(node0);
      Node node1 = new Node("", arrayList0, arrayList0);
      int int0 = SHORTEST_PATH_LENGTH.shortest_path_length(hashMap0, node0, node1);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<List<Node>, Integer> hashMap0 = new HashMap<List<Node>, Integer>();
      Node node0 = new Node("}");
      int int0 = SHORTEST_PATH_LENGTH.shortest_path_length(hashMap0, node0, node0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SHORTEST_PATH_LENGTH sHORTEST_PATH_LENGTH0 = new SHORTEST_PATH_LENGTH();
  }
}
