package org.apache.commons.lang3.time;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        boolean boolean6 = fastDateFormat2.equals((java.lang.Object) (short) 0);
        java.lang.String str8 = fastDateFormat2.format((long) 31);
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = fastDateFormat2.parse("12/31/69 4:00 PM", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12/31/69" + "'", str8, "12/31/69");
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = fastDateFormat2.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday), (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Wednesday, December 31, 1969" + "'", str4, "Wednesday, December 31, 1969");
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean49 = fastDateParser47.equals((java.lang.Object) 'a');
        java.util.Locale locale50 = fastDateParser47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale50);
        java.util.Calendar calendar52 = null;
        java.lang.StringBuffer stringBuffer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer54 = fastDateFormat51.applyRules(calendar52, stringBuffer53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone9);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter35 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone22, locale33);
        java.util.Locale locale36 = fastDatePrinter35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone16, locale36);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter38 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone9, locale36);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        java.util.Locale locale58 = fastDatePrinter57.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone9, locale58);
        java.lang.String str61 = fastDatePrinter59.format((long) (byte) 10);
        java.util.TimeZone timeZone62 = fastDatePrinter59.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.TimeZone timeZone71 = fastDateFormat69.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.util.Locale locale76 = fastDateFormat74.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone71, locale76);
        java.util.TimeZone timeZone80 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone80);
        java.lang.String str82 = fastDateFormat81.getPattern();
        java.util.TimeZone timeZone83 = fastDateFormat81.getTimeZone();
        java.util.TimeZone timeZone85 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone85);
        java.lang.String str87 = fastDateFormat86.getPattern();
        java.util.Locale locale88 = fastDateFormat86.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone83, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone71, locale88);
        java.lang.String str91 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale88);
        org.apache.commons.lang3.time.FastDateParser fastDateParser92 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone62, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEE", locale88);
        java.text.ParsePosition parsePosition95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = fastDateFormat93.parseObject("Thursday, January 1, 1970", parsePosition95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Wednesday, December 31, 1969" + "'", str61, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(fastDateFormat81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "M/d/yy" + "'", str82, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "M/d/yy" + "'", str87, "M/d/yy");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str91, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat93);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale6);
        java.lang.Object obj9 = fastDateFormat8.clone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.lang.String str16 = fastDateFormat13.format((long) 0);
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale17);
        java.util.TimeZone timeZone19 = fastDateFormat18.getTimeZone();
        java.lang.String str21 = fastDateFormat18.format((long) (short) 1);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale36);
        java.lang.String str38 = fastDateFormat37.toString();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale44);
        java.lang.String str46 = fastDateFormat45.toString();
        boolean boolean47 = fastDateFormat37.equals((java.lang.Object) fastDateFormat45);
        java.util.Date date49 = fastDateFormat45.parse("4:00:00 PM PST");
        java.lang.String str50 = fastDateFormat28.format(date49);
        java.lang.String str51 = fastDateFormat18.format(date49);
        java.lang.StringBuffer stringBuffer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer53 = fastDateFormat8.format(date49, stringBuffer52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "12/31/69" + "'", str16, "12/31/69");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "4:00:00 PM PST" + "'", str21, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str29, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str30, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str38, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str46, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Thursday, January 1, 1970" + "'", str50, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "4:00:00 PM PST" + "'", str51, "4:00:00 PM PST");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.lang.String str49 = fastDateParser46.toString();
        java.util.TimeZone timeZone50 = fastDateParser46.getTimeZone();
        java.lang.String str51 = fastDateParser46.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = fastDateParser46.getFieldWidth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str49, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone13, locale24);
        java.util.Locale locale27 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone7, locale27);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone36, locale56);
        java.lang.String str58 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone7, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone7);
        java.lang.Object obj62 = fastDateFormat60.parseObject("Wednesday, December 31, 1969");
        java.lang.String str63 = fastDateFormat60.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = fastDateFormat60.parse("1/1/70 4:00 PM");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"1/1/70 4:00 PM\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday), (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str58, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str63, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        boolean boolean50 = fastDateParser46.isNextNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = fastDateParser46.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter28 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone9, locale26);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.Locale locale41 = fastDateFormat39.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone36, locale41);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone36, locale53);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.TimeZone timeZone67 = fastDateFormat65.getTimeZone();
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.util.Locale locale72 = fastDateFormat70.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone67, locale72);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter74 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone61, locale72);
        org.apache.commons.lang3.time.FastDateParser fastDateParser75 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone36, locale72);
        java.lang.Class<?> wildcardClass76 = fastDateParser75.getClass();
        boolean boolean77 = fastDatePrinter28.equals((java.lang.Object) fastDateParser75);
        java.util.Locale locale78 = fastDatePrinter28.getLocale();
        java.lang.String str79 = fastDatePrinter28.getPattern();
        java.util.Locale locale80 = fastDatePrinter28.getLocale();
        java.lang.StringBuffer stringBuffer81 = null;
        java.text.FieldPosition fieldPosition82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = fastDateFormat2.format((java.lang.Object) locale80, stringBuffer81, fieldPosition82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "M/d/yy" + "'", str71, "M/d/yy");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0);
        java.util.Locale locale4 = fastDateFormat3.getLocale();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, 100, timeZone5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone33, locale50);
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.TimeZone timeZone58 = fastDateFormat56.getTimeZone();
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.util.TimeZone timeZone64 = fastDateFormat62.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.Locale locale69 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone64, locale69);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter71 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone58, locale69);
        org.apache.commons.lang3.time.FastDateParser fastDateParser72 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone33, locale69);
        java.lang.Class<?> wildcardClass73 = fastDateParser72.getClass();
        boolean boolean74 = fastDatePrinter25.equals((java.lang.Object) fastDateParser72);
        java.util.Locale locale75 = fastDatePrinter25.getLocale();
        java.lang.String str76 = fastDatePrinter25.getPattern();
        java.util.Locale locale77 = fastDatePrinter25.getLocale();
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.Locale locale82 = fastDateFormat80.getLocale();
        java.lang.String str84 = fastDateFormat80.format(1L);
        java.util.TimeZone timeZone85 = fastDateFormat80.getTimeZone();
        boolean boolean86 = fastDatePrinter25.equals((java.lang.Object) fastDateFormat80);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "M/d/yy" + "'", str63, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "12/31/69" + "'", str84, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone85);
        org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 2);
        java.util.Locale locale8 = fastDateFormat2.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        int int48 = fastDateParser46.adjustYear(31);
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern50 = fastDateParser46.getParsePattern();
        java.text.ParsePosition parsePosition52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = fastDateParser46.parseObject("MMM d, yyyy", parsePosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2031 + "'", int48 == 2031);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.regex.Pattern pattern48 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone51 = fastDateParser46.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        java.util.Calendar calendar11 = null;
        java.lang.StringBuffer stringBuffer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer13 = fastDateFormat8.format(calendar11, stringBuffer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone20 = fastDatePrinter19.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone20);
        java.util.TimeZone timeZone22 = fastDateFormat21.getTimeZone();
        java.text.ParsePosition parsePosition24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = fastDateFormat21.parseObject("12/31/69 3:59 PM", parsePosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.lang.String str50 = fastDateParser46.toString();
        java.lang.String str51 = fastDateParser46.toString();
        int int53 = fastDateParser46.adjustYear(100);
        java.lang.String str54 = fastDateParser46.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str50, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "12/31/69" + "'", str54, "12/31/69");
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.getPattern();
        int int5 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        java.util.Locale locale49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone9, locale49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(fastDateFormat50);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        java.lang.String str47 = fastDateParser46.getPattern();
        java.lang.String str48 = fastDateParser46.getPattern();
        java.text.ParsePosition parsePosition50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = fastDateParser46.parseObject("FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]", parsePosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "12/31/69" + "'", str47, "12/31/69");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "12/31/69" + "'", str48, "12/31/69");
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.Object obj5 = fastDateFormat2.clone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.Locale locale37 = fastDateFormat35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone32, locale37);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter39 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone26, locale37);
        java.util.Locale locale40 = fastDatePrinter39.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone20, locale40);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter42 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone13, locale40);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.TimeZone timeZone54 = fastDateFormat52.getTimeZone();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.Locale locale59 = fastDateFormat57.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone54, locale59);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter61 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone48, locale59);
        java.util.Locale locale62 = fastDatePrinter61.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter63 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone13, locale62);
        java.lang.String str65 = fastDatePrinter63.format((-1L));
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date69 = fastDateFormat67.parse("4:00:02 PM");
        java.lang.String str70 = fastDatePrinter63.format(date69);
        java.lang.String str71 = fastDateFormat2.format(date69);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str3, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Wednesday, December 31, 1969" + "'", str65, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Thursday, January 1, 1970" + "'", str70, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1/1/70" + "'", str71, "1/1/70");
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone15, locale32);
        java.util.Calendar calendar35 = null;
        java.lang.StringBuffer stringBuffer36 = null;
        java.lang.StringBuffer stringBuffer37 = fastDatePrinter34.applyRules(calendar35, stringBuffer36);
        java.util.TimeZone timeZone38 = fastDatePrinter34.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone38);
        java.util.Locale locale40 = fastDateFormat39.getLocale();
        boolean boolean41 = fastDateFormat2.equals((java.lang.Object) fastDateFormat39);
        java.util.Locale locale42 = fastDateFormat39.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = fastDateFormat39.parseObject("12/31/69");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNull(stringBuffer37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone56, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter75 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone56, locale73);
        int int76 = fastDatePrinter75.getMaxLengthEstimate();
        boolean boolean77 = fastDateParser46.equals((java.lang.Object) fastDatePrinter75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date79 = fastDateParser46.parse("Wednesday, December 31, 1969 4:00:00 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"Wednesday, December 31, 1969 4:00:00 PM PST\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str5 = fastDateFormat3.format(1L);
        java.lang.String str6 = fastDateFormat3.getPattern();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        java.lang.String str9 = fastDateFormat3.format((long) 100);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.Locale locale22 = fastDateFormat20.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone17, locale22);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone17, locale34);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        org.apache.commons.lang3.time.FastDateParser fastDateParser56 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone17, locale53);
        boolean boolean58 = fastDateParser56.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern59 = fastDateParser56.getParsePattern();
        int int61 = fastDateParser56.adjustYear(2000);
        java.util.Locale locale62 = fastDateParser56.getLocale();
        boolean boolean63 = fastDateFormat3.equals((java.lang.Object) fastDateParser56);
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str5, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str6, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str9, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pattern59);
        org.junit.Assert.assertEquals(pattern59.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3900 + "'", int61 == 3900);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str5 = fastDateFormat3.format(1L);
        java.lang.Object obj6 = fastDateFormat3.clone();
        java.lang.String str7 = fastDateFormat3.toString();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = fastDateFormat3.format(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str5, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone5, locale10);
        java.util.Locale locale12 = fastDateFormat11.getLocale();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.TimeZone timeZone31 = fastDateFormat29.getTimeZone();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone31, locale36);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter38 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone19, locale36);
        java.util.Calendar calendar39 = null;
        java.lang.StringBuffer stringBuffer40 = null;
        java.lang.StringBuffer stringBuffer41 = fastDatePrinter38.applyRules(calendar39, stringBuffer40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date45 = fastDateFormat43.parse("4:00:02 PM");
        java.lang.String str46 = fastDatePrinter38.format(date45);
        java.util.TimeZone timeZone47 = fastDatePrinter38.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = fastDateFormat11.format((java.lang.Object) fastDatePrinter38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: org.apache.commons.lang3.time.FastDatePrinter");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNull(stringBuffer41);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone11, locale16);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter18 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone5, locale16);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone26, locale43);
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.TimeZone timeZone57 = fastDateFormat55.getTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.Locale locale62 = fastDateFormat60.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone57, locale62);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter64 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone51, locale62);
        org.apache.commons.lang3.time.FastDateParser fastDateParser65 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone26, locale62);
        boolean boolean67 = fastDateParser65.equals((java.lang.Object) 'a');
        java.util.Locale locale68 = fastDateParser65.getLocale();
        boolean boolean69 = fastDatePrinter18.equals((java.lang.Object) fastDateParser65);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = fastDateParser65.getFieldWidth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        int int52 = fastDateParser46.adjustYear(31);
        java.lang.String str53 = fastDateParser46.getPattern();
        int int55 = fastDateParser46.adjustYear(3902);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2031 + "'", int52 == 2031);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "12/31/69" + "'", str53, "12/31/69");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5802 + "'", int55 == 5802);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.lang.String str3 = fastDateFormat1.format(0L);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = fastDateFormat1.parseObject("M/d/yy h:mm a", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4:00:00 PM PST" + "'", str3, "4:00:00 PM PST");
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone5, locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = fastDateFormat11.parse("4:00:03 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"4:00:03 PM PST\" does not match (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat11);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.lang.String str10 = fastDateFormat8.toString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale16);
        java.lang.String str18 = fastDateFormat17.toString();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale24);
        java.lang.String str26 = fastDateFormat25.toString();
        boolean boolean27 = fastDateFormat17.equals((java.lang.Object) fastDateFormat25);
        java.util.Date date29 = fastDateFormat25.parse("4:00:00 PM PST");
        java.lang.String str30 = fastDateFormat8.format(date29);
        java.lang.String str31 = fastDateFormat1.format(date29);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.Locale locale37 = fastDateFormat35.getLocale();
        java.lang.String str39 = fastDateFormat35.format(1L);
        java.util.TimeZone timeZone40 = fastDateFormat35.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 2, timeZone47);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        java.lang.String str56 = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone47, false, (int) (short) 1, locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone40, locale55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.FieldPosition fieldPosition60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = fastDateFormat1.format((java.lang.Object) locale58, stringBuffer59, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str9, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str10, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str18, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str26, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Thursday, January 1, 1970" + "'", str30, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "4:00:00 PM PST" + "'", str31, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "12/31/69" + "'", str39, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Pacific Standard Time" + "'", str56, "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        int[] intArray33 = new int[] { (byte) 10, (short) 100, 2, (byte) 10, (byte) 100 };
        java.lang.String str34 = fastDatePrinter25.parseToken("FastDateParser[12/31/69,en_US,America/Los_Angeles]", intArray33);
        boolean boolean36 = fastDatePrinter25.equals((java.lang.Object) "Wednesday, December 31, 1969 3:59:59 PM PST");
        java.util.Calendar calendar37 = null;
        java.lang.StringBuffer stringBuffer38 = null;
        java.lang.StringBuffer stringBuffer39 = fastDatePrinter25.applyRules(calendar37, stringBuffer38);
        java.util.Calendar calendar40 = null;
        java.lang.StringBuffer stringBuffer41 = null;
        java.lang.StringBuffer stringBuffer42 = fastDatePrinter25.format(calendar40, stringBuffer41);
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.TimeZone timeZone62 = fastDateFormat60.getTimeZone();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.Locale locale67 = fastDateFormat65.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone62, locale67);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter69 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone50, locale67);
        java.util.Calendar calendar70 = null;
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDatePrinter69.applyRules(calendar70, stringBuffer71);
        java.util.TimeZone timeZone73 = fastDatePrinter69.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone73);
        java.util.Locale locale75 = fastDateFormat74.getLocale();
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.lang.String str81 = fastDateFormat78.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date85 = fastDateFormat83.parse("4:00:02 PM");
        java.lang.String str86 = fastDateFormat78.format(date85);
        java.lang.String str87 = fastDateFormat74.format(date85);
        java.lang.StringBuffer stringBuffer88 = null;
        java.lang.StringBuffer stringBuffer89 = fastDatePrinter25.format(date85, stringBuffer88);
        java.lang.String str90 = fastDatePrinter25.getPattern();
        java.util.Date date91 = null;
        java.lang.StringBuffer stringBuffer92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = fastDatePrinter25.format(date91, stringBuffer92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 100, 2, 10, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "r" + "'", str34, "r");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(stringBuffer39);
        org.junit.Assert.assertNull(stringBuffer42);
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertNull(stringBuffer72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "12/31/69" + "'", str81, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat83);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1/1/70" + "'", str86, "1/1/70");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Thursday, January 1, 1970" + "'", str87, "Thursday, January 1, 1970");
        org.junit.Assert.assertNull(stringBuffer89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        int int50 = fastDateParser46.adjustYear((int) (short) -1);
        boolean boolean51 = fastDateParser46.isNextNumber();
        int int53 = fastDateParser46.adjustYear((int) (short) 0);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1999 + "'", int50 == 1999);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.Locale locale15 = fastDateFormat13.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone10, locale15);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Locale locale27 = fastDateFormat25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone10, locale27);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.Locale locale46 = fastDateFormat44.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone41, locale46);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter48 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone35, locale46);
        org.apache.commons.lang3.time.FastDateParser fastDateParser49 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone10, locale46);
        boolean boolean51 = fastDateParser49.equals((java.lang.Object) 'a');
        java.util.Locale locale52 = fastDateParser49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale52);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.lang.String str55 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 0, (java.lang.Integer) 0, locale54);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str55, "EEEE, MMMM d, yyyy h:mm:ss a z");
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.TimeZone timeZone31 = fastDateFormat29.getTimeZone();
        java.lang.String str32 = fastDateFormat29.getPattern();
        java.lang.String str34 = fastDateFormat29.format((long) 0);
        java.lang.String str35 = fastDateFormat29.getPattern();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone41);
        java.lang.String str44 = fastDateFormat42.format((long) '4');
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat61.getTimeZone();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.Locale locale68 = fastDateFormat66.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone63, locale68);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter70 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone51, locale68);
        java.util.Calendar calendar71 = null;
        java.lang.StringBuffer stringBuffer72 = null;
        java.lang.StringBuffer stringBuffer73 = fastDatePrinter70.applyRules(calendar71, stringBuffer72);
        java.util.TimeZone timeZone74 = fastDatePrinter70.getTimeZone();
        java.lang.StringBuffer stringBuffer76 = null;
        java.lang.StringBuffer stringBuffer77 = fastDatePrinter70.format((long) 3, stringBuffer76);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.lang.String str83 = fastDateFormat80.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date87 = fastDateFormat85.parse("4:00:02 PM");
        java.lang.String str88 = fastDateFormat80.format(date87);
        java.lang.StringBuffer stringBuffer89 = null;
        java.lang.StringBuffer stringBuffer90 = fastDatePrinter70.format(date87, stringBuffer89);
        java.lang.String str91 = fastDateFormat42.format(date87);
        java.lang.String str92 = fastDateFormat29.format(date87);
        java.lang.StringBuffer stringBuffer93 = null;
        java.lang.StringBuffer stringBuffer94 = fastDatePrinter25.format(date87, stringBuffer93);
        java.util.TimeZone timeZone95 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer97 = null;
        java.lang.StringBuffer stringBuffer98 = fastDatePrinter25.format((long) 3, stringBuffer97);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "12/31/69" + "'", str34, "12/31/69");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Wednesday, December 31, 1969" + "'", str44, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertNull(stringBuffer73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer77);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "12/31/69" + "'", str83, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1/1/70" + "'", str88, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Thursday, January 1, 1970" + "'", str91, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1/1/70" + "'", str92, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer94);
        org.junit.Assert.assertNotNull(timeZone95);
        org.junit.Assert.assertEquals(timeZone95.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer98);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.util.TimeZone timeZone52 = fastDateParser46.getTimeZone();
        java.text.ParsePosition parsePosition54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = fastDateParser46.parseObject("", parsePosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        org.apache.commons.lang3.time.FastDateParser fastDateParser53 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone14, locale50);
        boolean boolean54 = fastDateFormat6.equals((java.lang.Object) fastDateParser53);
        java.lang.String str55 = fastDateParser53.getPattern();
        java.util.regex.Pattern pattern56 = fastDateParser53.getParsePattern();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = fastDateParser53.parse("FastDatePrinter[,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"FastDatePrinter[,en_US,America/Los_Angeles]\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "12/31/69" + "'", str55, "12/31/69");
        org.junit.Assert.assertNotNull(pattern56);
        org.junit.Assert.assertEquals(pattern56.toString(), "12/31/69");
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.Object obj6 = null;
        boolean boolean7 = fastDateFormat2.equals(obj6);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone14, locale31);
        java.util.Calendar calendar34 = null;
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDatePrinter33.applyRules(calendar34, stringBuffer35);
        java.util.TimeZone timeZone37 = fastDatePrinter33.getTimeZone();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDatePrinter33.format((long) 3, stringBuffer39);
        boolean boolean41 = fastDateFormat2.equals((java.lang.Object) fastDatePrinter33);
        java.lang.String str43 = fastDateFormat2.format((long) (byte) 10);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.lang.String str52 = fastDateFormat50.toString();
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.Locale locale58 = fastDateFormat56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        boolean boolean69 = fastDateFormat59.equals((java.lang.Object) fastDateFormat67);
        java.util.Date date71 = fastDateFormat67.parse("4:00:00 PM PST");
        java.lang.String str72 = fastDateFormat50.format(date71);
        java.lang.String str73 = fastDateFormat2.format(date71);
        java.lang.String str74 = fastDateFormat2.toString();
        java.lang.StringBuffer stringBuffer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fastDateFormat2.format((long) 2, stringBuffer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "12/31/69" + "'", str43, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str51, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str52, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str60, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Thursday, January 1, 1970" + "'", str72, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1/1/70" + "'", str73, "1/1/70");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str74, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        org.apache.commons.lang3.time.FastDateParser fastDateParser53 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone14, locale50);
        boolean boolean54 = fastDateFormat6.equals((java.lang.Object) fastDateParser53);
        java.lang.String str55 = fastDateParser53.getPattern();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = fastDateParser53.parseObject("FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "12/31/69" + "'", str55, "12/31/69");
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.Locale locale33 = fastDatePrinter25.getLocale();
        java.lang.String str35 = fastDatePrinter25.format((long) 1);
        java.util.Calendar calendar36 = null;
        java.lang.StringBuffer stringBuffer37 = null;
        java.lang.StringBuffer stringBuffer38 = fastDatePrinter25.format(calendar36, stringBuffer37);
        java.lang.String str39 = fastDatePrinter25.toString();
        java.lang.String str40 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(stringBuffer38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str39, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str40, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.util.TimeZone timeZone49 = fastDateParser46.getTimeZone();
        java.lang.Object obj50 = null;
        boolean boolean51 = fastDateParser46.equals(obj50);
        java.lang.String str52 = fastDateParser46.getPattern();
        java.util.TimeZone timeZone53 = fastDateParser46.getTimeZone();
        java.text.ParsePosition parsePosition55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = fastDateParser46.parseObject("FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]", parsePosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str5 = fastDateFormat3.format(1L);
        java.lang.Object obj6 = fastDateFormat3.clone();
        java.lang.String str7 = fastDateFormat3.toString();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fastDateFormat3.parseObject("", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str5, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str5 = fastDateFormat3.format(1L);
        java.lang.String str6 = fastDateFormat3.getPattern();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        java.lang.String str8 = fastDateFormat3.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = fastDateFormat3.parse("FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"FastDateFormat[M/d/yy,en_US,America/Los_Angeles]\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday), (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++) (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str5, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str6, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str8, "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.Locale locale18 = fastDateFormat16.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone13, locale18);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter20 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone7, locale18);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone29);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone36, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone29, locale56);
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.util.TimeZone timeZone64 = fastDateFormat62.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter77 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone64, locale75);
        java.util.Locale locale78 = fastDatePrinter77.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter79 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone29, locale78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale78);
        org.apache.commons.lang3.time.FastDateParser fastDateParser81 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone7, locale78);
        java.util.Locale locale82 = fastDateParser81.getLocale();
        java.util.TimeZone timeZone83 = fastDateParser81.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2031, timeZone83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 2031");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "M/d/yy" + "'", str63, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone20 = fastDatePrinter19.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.Class<?> wildcardClass23 = fastDateFormat21.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str22, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat1);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.lang.String str26 = fastDatePrinter25.toString();
        java.lang.String str27 = fastDatePrinter25.toString();
        java.util.TimeZone timeZone28 = fastDatePrinter25.getTimeZone();
        java.lang.String str29 = fastDatePrinter25.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str26, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str27, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.lang.String str26 = fastDatePrinter25.toString();
        java.lang.String str27 = fastDatePrinter25.toString();
        java.lang.String str28 = fastDatePrinter25.toString();
        java.lang.String str30 = fastDatePrinter25.format((long) ' ');
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.TimeZone timeZone37 = fastDateFormat35.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.Locale locale42 = fastDateFormat40.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone37, locale42);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone37, locale54);
        java.util.Calendar calendar57 = null;
        java.lang.StringBuffer stringBuffer58 = null;
        java.lang.StringBuffer stringBuffer59 = fastDatePrinter56.applyRules(calendar57, stringBuffer58);
        java.util.TimeZone timeZone60 = fastDatePrinter56.getTimeZone();
        java.lang.StringBuffer stringBuffer62 = null;
        java.lang.StringBuffer stringBuffer63 = fastDatePrinter56.format((long) 3, stringBuffer62);
        java.util.Locale locale64 = fastDatePrinter56.getLocale();
        java.lang.String str66 = fastDatePrinter56.format((long) 1);
        java.util.Calendar calendar67 = null;
        java.lang.StringBuffer stringBuffer68 = null;
        java.lang.StringBuffer stringBuffer69 = fastDatePrinter56.format(calendar67, stringBuffer68);
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.TimeZone timeZone74 = fastDateFormat72.getTimeZone();
        java.lang.String str75 = fastDateFormat72.getPattern();
        java.lang.String str77 = fastDateFormat72.format((long) 0);
        java.lang.String str78 = fastDateFormat72.getPattern();
        java.lang.String str79 = fastDateFormat72.getPattern();
        java.util.Date date81 = fastDateFormat72.parse("12/31/69");
        java.lang.StringBuffer stringBuffer82 = null;
        java.lang.StringBuffer stringBuffer83 = fastDatePrinter56.format(date81, stringBuffer82);
        java.lang.StringBuffer stringBuffer84 = null;
        java.lang.StringBuffer stringBuffer85 = fastDatePrinter25.format(date81, stringBuffer84);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str26, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str27, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str28, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNull(stringBuffer59);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(stringBuffer69);
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "12/31/69" + "'", str77, "12/31/69");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "M/d/yy" + "'", str78, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertNull(stringBuffer83);
        org.junit.Assert.assertNull(stringBuffer85);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = fastDateFormat2.parse("12/31/69");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"12/31/69\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday), (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Wednesday, December 31, 1969" + "'", str4, "Wednesday, December 31, 1969");
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.util.TimeZone timeZone52 = fastDateParser46.getTimeZone();
        java.util.TimeZone timeZone53 = fastDateParser46.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = fastDateFormat2.parse("Wednesday, December 31, 1969");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"Wednesday, December 31, 1969\" does not match (\\p{IsNd}++)/(\\p{IsNd}++)/(\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone8, locale25);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.Locale locale40 = fastDateFormat38.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone35, locale40);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone35, locale52);
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.util.TimeZone timeZone60 = fastDateFormat58.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.TimeZone timeZone66 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.Locale locale71 = fastDateFormat69.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone66, locale71);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter73 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone60, locale71);
        org.apache.commons.lang3.time.FastDateParser fastDateParser74 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone35, locale71);
        java.lang.Class<?> wildcardClass75 = fastDateParser74.getClass();
        boolean boolean76 = fastDatePrinter27.equals((java.lang.Object) fastDateParser74);
        java.util.Locale locale77 = fastDatePrinter27.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) '#', 0, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "M/d/yy" + "'", str59, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone10);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone23, locale34);
        java.util.Locale locale37 = fastDatePrinter36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone17, locale37);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter39 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone10, locale37);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone45, locale56);
        java.util.Locale locale59 = fastDatePrinter58.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter60 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone10, locale59);
        java.lang.String str62 = fastDatePrinter60.format((long) (byte) 10);
        java.util.TimeZone timeZone63 = fastDatePrinter60.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone63);
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.Locale locale70 = fastDateFormat68.getLocale();
        java.lang.String str72 = fastDateFormat68.format(1L);
        java.util.TimeZone timeZone73 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.util.TimeZone timeZone80 = fastDateFormat78.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 2, timeZone80);
        java.util.TimeZone timeZone85 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone85);
        java.lang.String str87 = fastDateFormat86.getPattern();
        java.util.Locale locale88 = fastDateFormat86.getLocale();
        java.lang.String str89 = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone80, false, (int) (short) 1, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone73, locale88);
        org.apache.commons.lang3.time.FastDateParser fastDateParser91 = new org.apache.commons.lang3.time.FastDateParser("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone63, locale88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat92 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 10, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Wednesday, December 31, 1969" + "'", str62, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "12/31/69" + "'", str72, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat81);
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "M/d/yy" + "'", str87, "M/d/yy");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Pacific Standard Time" + "'", str89, "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat90);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.lang.String str49 = fastDateParser46.getPattern();
        java.util.TimeZone timeZone50 = fastDateParser46.getTimeZone();
        java.lang.Class<?> wildcardClass51 = timeZone50.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "12/31/69" + "'", str49, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone11, locale16);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter18 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone5, locale16);
        java.util.Locale locale19 = fastDatePrinter18.getLocale();
        java.util.Locale locale20 = fastDatePrinter18.getLocale();
        java.util.TimeZone timeZone21 = fastDatePrinter18.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone13, locale24);
        java.util.Locale locale27 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone7, locale27);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.Locale locale40 = fastDateFormat38.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone35, locale40);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter54 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone35, locale52);
        java.lang.String str55 = fastDatePrinter54.getPattern();
        java.util.Locale locale56 = fastDatePrinter54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = new org.apache.commons.lang3.time.FastDateFormat("MMMM d, yyyy", timeZone7, locale56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone14, locale25);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.Locale locale40 = fastDateFormat38.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone35, locale40);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone35, locale52);
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.util.TimeZone timeZone60 = fastDateFormat58.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.TimeZone timeZone66 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.Locale locale71 = fastDateFormat69.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone66, locale71);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter73 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone60, locale71);
        org.apache.commons.lang3.time.FastDateParser fastDateParser74 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone35, locale71);
        boolean boolean76 = fastDateParser74.equals((java.lang.Object) 'a');
        java.util.Locale locale77 = fastDateParser74.getLocale();
        boolean boolean78 = fastDatePrinter27.equals((java.lang.Object) fastDateParser74);
        java.util.Locale locale79 = fastDatePrinter27.getLocale();
        boolean boolean80 = fastDateFormat2.equals((java.lang.Object) locale79);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "M/d/yy" + "'", str59, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone15, locale32);
        java.util.Calendar calendar35 = null;
        java.lang.StringBuffer stringBuffer36 = null;
        java.lang.StringBuffer stringBuffer37 = fastDatePrinter34.applyRules(calendar35, stringBuffer36);
        java.util.TimeZone timeZone38 = fastDatePrinter34.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone38);
        java.util.Locale locale40 = fastDateFormat39.getLocale();
        boolean boolean41 = fastDateFormat2.equals((java.lang.Object) fastDateFormat39);
        java.util.Locale locale42 = fastDateFormat39.getLocale();
        java.text.ParsePosition parsePosition44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = fastDateFormat39.parseObject("EEEE, MMMM d, yyyy", parsePosition44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNull(stringBuffer37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.lang.String str49 = fastDateParser46.getPattern();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = fastDateParser46.parseObject("M/d/yy h:mm:ss a z");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"M/d/yy h:mm:ss a z\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "12/31/69" + "'", str49, "12/31/69");
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.lang.String str50 = fastDateParser46.toString();
        java.lang.String str51 = fastDateParser46.toString();
        java.util.TimeZone timeZone52 = fastDateParser46.getTimeZone();
        java.util.Locale locale53 = fastDateParser46.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str50, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.Locale locale33 = fastDatePrinter25.getLocale();
        java.lang.String str35 = fastDatePrinter25.format((long) 1);
        java.util.Calendar calendar36 = null;
        java.lang.StringBuffer stringBuffer37 = null;
        java.lang.StringBuffer stringBuffer38 = fastDatePrinter25.format(calendar36, stringBuffer37);
        java.lang.String str39 = fastDatePrinter25.getPattern();
        int int40 = fastDatePrinter25.getMaxLengthEstimate();
        java.lang.String str41 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(stringBuffer38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str41, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        java.util.TimeZone timeZone30 = fastDatePrinter26.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone30);
        java.util.Locale locale32 = fastDateFormat31.getLocale();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.lang.String str38 = fastDateFormat35.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date42 = fastDateFormat40.parse("4:00:02 PM");
        java.lang.String str43 = fastDateFormat35.format(date42);
        java.lang.String str44 = fastDateFormat31.format(date42);
        java.lang.StringBuffer stringBuffer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer47 = fastDateFormat31.format((long) 2031, stringBuffer46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12/31/69" + "'", str38, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1/1/70" + "'", str43, "1/1/70");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Thursday, January 1, 1970" + "'", str44, "Thursday, January 1, 1970");
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '4');
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.Locale locale18 = fastDateFormat16.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone13, locale18);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.TimeZone timeZone25 = fastDateFormat23.getTimeZone();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.Locale locale30 = fastDateFormat28.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone25, locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone13, locale30);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.Locale locale49 = fastDateFormat47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone44, locale49);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter51 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone38, locale49);
        org.apache.commons.lang3.time.FastDateParser fastDateParser52 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone13, locale49);
        boolean boolean54 = fastDateParser52.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern55 = fastDateParser52.getParsePattern();
        int int57 = fastDateParser52.adjustYear(2000);
        java.util.Locale locale58 = fastDateParser52.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator59 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) fastDateParser52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: org.apache.commons.lang3.time.FastDateParser");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12/31/69" + "'", str5, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pattern55);
        org.junit.Assert.assertEquals(pattern55.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3900 + "'", int57 == 3900);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMM d, yyyy");
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.TimeZone timeZone24 = fastDateFormat22.getTimeZone();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.TimeZone timeZone30 = fastDateFormat28.getTimeZone();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.Locale locale35 = fastDateFormat33.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone30, locale35);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter37 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone24, locale35);
        java.util.Locale locale38 = fastDatePrinter37.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone18, locale38);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter40 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone11, locale38);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.TimeZone timeZone52 = fastDateFormat50.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone52, locale57);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone46, locale57);
        java.util.Locale locale60 = fastDatePrinter59.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter61 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone11, locale60);
        java.lang.String str62 = fastDatePrinter61.toString();
        int int63 = fastDatePrinter61.getMaxLengthEstimate();
        int int64 = fastDatePrinter61.getMaxLengthEstimate();
        java.util.Locale locale65 = fastDatePrinter61.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = new org.apache.commons.lang3.time.FastDateFormat("12/31/69 4:00:00 PM PST", timeZone3, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDatePrinter[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str62, "FastDatePrinter[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str5 = fastDateFormat3.toString();
        java.text.ParsePosition parsePosition7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = fastDateFormat3.parseObject("", parsePosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str4, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str5, "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 0);
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.lang.String str9 = fastDateFormat2.getPattern();
        java.util.Date date11 = fastDateFormat2.parse("12/31/69");
        java.util.TimeZone timeZone12 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = fastDateFormat2.format(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        boolean boolean50 = fastDateParser46.isNextNumber();
        java.lang.String str51 = fastDateParser46.toString();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = fastDateFormat6.parseObject("FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.util.TimeZone timeZone49 = fastDateParser46.getTimeZone();
        java.lang.Object obj50 = null;
        boolean boolean51 = fastDateParser46.equals(obj50);
        java.util.Locale locale52 = fastDateParser46.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        java.util.TimeZone timeZone1 = null;
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.Locale locale15 = fastDateFormat13.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone10, locale15);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Locale locale27 = fastDateFormat25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone10, locale27);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.Locale locale46 = fastDateFormat44.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone41, locale46);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter48 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone35, locale46);
        org.apache.commons.lang3.time.FastDateParser fastDateParser49 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone10, locale46);
        boolean boolean51 = fastDateParser49.equals((java.lang.Object) 'a');
        java.util.Locale locale52 = fastDateParser49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1/1/70", timeZone1, locale52);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat54);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean49 = fastDateParser47.equals((java.lang.Object) 'a');
        java.util.TimeZone timeZone50 = fastDateParser47.getTimeZone();
        java.util.TimeZone timeZone51 = fastDateParser47.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm:ss a z", timeZone51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateFormat52.parseObject("' ");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.Locale locale51 = fastDateParser46.getLocale();
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date54 = fastDateParser46.parse("h:mm:ss a", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.lang.String str7 = fastDateFormat2.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = fastDateFormat2.parseObject("FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        boolean boolean50 = fastDateParser46.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean53 = fastDateParser46.equals((java.lang.Object) 1);
        java.lang.Object obj55 = fastDateParser46.parseObject("12/31/69");
        java.text.ParsePosition parsePosition57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = fastDateParser46.parse("Thursday, January 1, 1970 4:00:00 PM", parsePosition57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        int int49 = fastDateParser47.adjustYear(31);
        java.util.regex.Pattern pattern50 = fastDateParser47.getParsePattern();
        boolean boolean51 = fastDateParser47.isNextNumber();
        java.util.TimeZone timeZone52 = fastDateParser47.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        java.lang.String str59 = fastDateFormat55.format(1L);
        java.util.TimeZone timeZone60 = fastDateFormat55.getTimeZone();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.util.TimeZone timeZone80 = fastDateFormat78.getTimeZone();
        java.util.TimeZone timeZone82 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone82);
        java.lang.String str84 = fastDateFormat83.getPattern();
        java.util.Locale locale85 = fastDateFormat83.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone80, locale85);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter87 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone68, locale85);
        java.util.Calendar calendar88 = null;
        java.lang.StringBuffer stringBuffer89 = null;
        java.lang.StringBuffer stringBuffer90 = fastDatePrinter87.applyRules(calendar88, stringBuffer89);
        java.util.TimeZone timeZone91 = fastDatePrinter87.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat92 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone91);
        java.util.Locale locale93 = fastDateFormat92.getLocale();
        boolean boolean94 = fastDateFormat55.equals((java.lang.Object) fastDateFormat92);
        java.util.Locale locale95 = fastDateFormat92.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat96 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone52, locale95);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2031 + "'", int49 == 2031);
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "12/31/69" + "'", str59, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "M/d/yy" + "'", str84, "M/d/yy");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertNull(stringBuffer90);
        org.junit.Assert.assertNotNull(timeZone91);
        org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat96);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        boolean boolean50 = fastDateParser46.isNextNumber();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.TimeZone timeZone62 = fastDateFormat60.getTimeZone();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.Locale locale67 = fastDateFormat65.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone62, locale67);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter69 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone56, locale67);
        java.util.Locale locale70 = fastDatePrinter69.getLocale();
        java.lang.String str71 = fastDatePrinter69.toString();
        boolean boolean72 = fastDateParser46.equals((java.lang.Object) fastDatePrinter69);
        java.text.ParsePosition parsePosition74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date75 = fastDateParser46.parse("r", parsePosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "FastDatePrinter[M/d/yy,en_US,America/Los_Angeles]" + "'", str71, "FastDatePrinter[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone5);
        java.lang.String str8 = fastDateFormat6.format((long) '4');
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.lang.String str17 = fastDateFormat14.format((long) 0);
        java.util.Locale locale18 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale18);
        java.util.TimeZone timeZone20 = fastDateFormat19.getTimeZone();
        java.util.Locale locale21 = fastDateFormat19.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        java.util.Date date25 = fastDateFormat23.parse("12/31/69 4:00:00 PM PST");
        java.lang.String str26 = fastDateFormat19.format(date25);
        boolean boolean27 = fastDateFormat6.equals((java.lang.Object) fastDateFormat19);
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Wednesday, December 31, 1969" + "'", str8, "Wednesday, December 31, 1969");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str9, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "12/31/69" + "'", str17, "12/31/69");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "12:00:00 AM PST" + "'", str26, "12:00:00 AM PST");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.Locale locale51 = fastDateParser46.getLocale();
        java.lang.String str52 = fastDateParser46.getPattern();
        java.util.Locale locale53 = fastDateParser46.getLocale();
        java.util.Locale locale54 = fastDateParser46.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        java.util.Date date14 = fastDateFormat12.parse("12/31/69 4:00:00 PM PST");
        java.lang.String str15 = fastDateFormat8.format(date14);
        java.lang.String str17 = fastDateFormat8.format(10L);
        java.util.TimeZone timeZone18 = fastDateFormat8.getTimeZone();
        java.lang.StringBuffer stringBuffer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = fastDateFormat8.format((long) (short) -1, stringBuffer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "12:00:00 AM PST" + "'", str15, "12:00:00 AM PST");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4:00:00 PM PST" + "'", str17, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone28);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter54 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone41, locale52);
        java.util.Locale locale55 = fastDatePrinter54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone35, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone28, locale55);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat61.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone69, locale74);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter76 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone63, locale74);
        java.util.Locale locale77 = fastDatePrinter76.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter78 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone28, locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale77);
        org.apache.commons.lang3.time.FastDateParser fastDateParser80 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone6, locale77);
        boolean boolean81 = fastDateParser80.isNextNumber();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone11, locale16);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter18 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone5, locale16);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone26, locale43);
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.TimeZone timeZone57 = fastDateFormat55.getTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.Locale locale62 = fastDateFormat60.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone57, locale62);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter64 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone51, locale62);
        org.apache.commons.lang3.time.FastDateParser fastDateParser65 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone26, locale62);
        boolean boolean67 = fastDateParser65.equals((java.lang.Object) 'a');
        java.util.Locale locale68 = fastDateParser65.getLocale();
        boolean boolean69 = fastDatePrinter18.equals((java.lang.Object) fastDateParser65);
        java.lang.Object obj71 = fastDateParser65.parseObject("12/31/69");
        // The following exception was thrown during execution in test generation
        try {
            int int72 = fastDateParser65.getFieldWidth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMM d, yyyy");
        java.text.ParsePosition parsePosition3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = fastDateFormat1.parseObject("h:mm:ss a", parsePosition3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        boolean boolean49 = fastDateParser47.isNextNumber();
        java.util.Locale locale50 = fastDateParser47.getLocale();
        boolean boolean51 = fastDateParser47.isNextNumber();
        boolean boolean53 = fastDateParser47.equals((java.lang.Object) (-1.0f));
        java.util.TimeZone timeZone54 = fastDateParser47.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3900, timeZone54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 3900");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone20, locale31);
        java.util.Locale locale34 = fastDatePrinter33.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone14, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone7, locale34);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone7, locale56);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.lang.String str64 = fastDateFormat61.format((long) 0);
        java.util.Locale locale65 = fastDateFormat61.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale65);
        java.util.TimeZone timeZone67 = fastDateFormat66.getTimeZone();
        java.util.Locale locale68 = fastDateFormat66.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        java.util.Date date72 = fastDateFormat70.parse("12/31/69 4:00:00 PM PST");
        java.lang.String str73 = fastDateFormat66.format(date72);
        java.lang.String str74 = fastDatePrinter57.format(date72);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "12/31/69" + "'", str64, "12/31/69");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "12:00:00 AM PST" + "'", str73, "12:00:00 AM PST");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Wednesday, December 31, 1969" + "'", str74, "Wednesday, December 31, 1969");
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(3, 0, timeZone6);
        java.lang.String str9 = fastDateFormat7.format((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = fastDateFormat7.parse("' ");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"' \" does not match (\\p{IsNd}++)/(\\p{IsNd}++)/(\\p{IsNd}++) (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12/31/69 4:00:00 PM PST" + "'", str9, "12/31/69 4:00:00 PM PST");
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date3 = fastDateFormat1.parse("4:00:02 PM");
        java.lang.String str4 = fastDateFormat1.toString();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a,en_US,America/Los_Angeles]" + "'", str4, "FastDateFormat[h:mm:ss a,en_US,America/Los_Angeles]");
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean49 = fastDateParser48.isNextNumber();
        java.util.regex.Pattern pattern50 = fastDateParser48.getParsePattern();
        java.util.Locale locale51 = fastDateParser48.getLocale();
        java.util.Locale locale52 = fastDateParser48.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 49, (java.lang.Integer) 1, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 49");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.Locale locale33 = fastDatePrinter25.getLocale();
        java.lang.String str35 = fastDatePrinter25.format((long) 1);
        java.util.Calendar calendar36 = null;
        java.lang.StringBuffer stringBuffer37 = null;
        java.lang.StringBuffer stringBuffer38 = fastDatePrinter25.format(calendar36, stringBuffer37);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.lang.String str44 = fastDateFormat41.getPattern();
        java.lang.String str46 = fastDateFormat41.format((long) 0);
        java.lang.String str47 = fastDateFormat41.getPattern();
        java.lang.String str48 = fastDateFormat41.getPattern();
        java.util.Date date50 = fastDateFormat41.parse("12/31/69");
        java.lang.StringBuffer stringBuffer51 = null;
        java.lang.StringBuffer stringBuffer52 = fastDatePrinter25.format(date50, stringBuffer51);
        java.lang.String str53 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(stringBuffer38);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "12/31/69" + "'", str46, "12/31/69");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertNull(stringBuffer52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str53, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.String str8 = fastDateFormat6.getPattern();
        int int9 = fastDateFormat6.getMaxLengthEstimate();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = fastDateFormat6.parse("Wednesday, December 31, 1969 3:59:59 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"Wednesday, December 31, 1969 3:59:59 PM PST\" does not match (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "h:mm:ss a z" + "'", str8, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 17 + "'", int9 == 17);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone8);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone21, locale32);
        java.util.Locale locale35 = fastDatePrinter34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone15, locale35);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter37 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone8, locale35);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone8, locale57);
        java.lang.String str60 = fastDatePrinter58.format((long) (byte) 10);
        java.util.TimeZone timeZone61 = fastDatePrinter58.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone70, locale87);
        java.lang.String str90 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale87);
        org.apache.commons.lang3.time.FastDateParser fastDateParser91 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone61, locale87);
        java.util.Locale locale92 = fastDateParser91.getLocale();
        java.lang.String str93 = fastDateParser91.toString();
        java.lang.Object obj94 = null;
        boolean boolean95 = fastDateParser91.equals(obj94);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Wednesday, December 31, 1969" + "'", str60, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str90, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str93, "FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.lang.String str29 = fastDatePrinter25.toString();
        java.util.TimeZone timeZone30 = fastDatePrinter25.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str29, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern50 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = fastDateParser46.parse("EEEE, MMMM d, yyyy h:mm:ss a z");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"EEEE, MMMM d, yyyy h:mm:ss a z\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone8, locale25);
        java.util.Calendar calendar28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDatePrinter27.applyRules(calendar28, stringBuffer29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date34 = fastDateFormat32.parse("4:00:02 PM");
        java.lang.String str35 = fastDatePrinter27.format(date34);
        java.util.TimeZone timeZone36 = fastDatePrinter27.getTimeZone();
        java.util.Locale locale39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale39);
        java.lang.String str42 = fastDateFormat40.format(1L);
        java.lang.String str43 = fastDateFormat40.getPattern();
        java.util.Locale locale44 = fastDateFormat40.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("1/1/70", timeZone36, locale44);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale52);
        java.util.Locale locale55 = fastDateFormat54.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateParser fastDateParser56 = new org.apache.commons.lang3.time.FastDateParser("r", timeZone36, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(stringBuffer30);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str42, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str43, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone20 = fastDatePrinter19.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.StringBuffer stringBuffer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = fastDateFormat21.format((long) (byte) 1, stringBuffer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str22, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.Locale locale51 = fastDateParser46.getLocale();
        int int53 = fastDateParser46.adjustYear((int) (byte) 0);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.Locale locale8 = fastDateFormat6.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale8);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 8, (java.lang.Integer) 3, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat10);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        int int48 = fastDateParser46.adjustYear(31);
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = fastDateParser46.getFieldWidth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2031 + "'", int48 == 2031);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        java.util.TimeZone timeZone1 = null;
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone8, locale25);
        java.util.Calendar calendar28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDatePrinter27.format(calendar28, stringBuffer29);
        java.lang.String str32 = fastDatePrinter27.format((long) (short) 1);
        java.util.TimeZone timeZone33 = fastDatePrinter27.getTimeZone();
        java.util.Calendar calendar34 = null;
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDatePrinter27.applyRules(calendar34, stringBuffer35);
        java.util.Locale locale37 = fastDatePrinter27.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateParser fastDateParser38 = new org.apache.commons.lang3.time.FastDateParser("r", timeZone1, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(stringBuffer30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.lang.String str10 = fastDateFormat8.toString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale16);
        java.lang.String str18 = fastDateFormat17.toString();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale24);
        java.lang.String str26 = fastDateFormat25.toString();
        boolean boolean27 = fastDateFormat17.equals((java.lang.Object) fastDateFormat25);
        java.util.Date date29 = fastDateFormat25.parse("4:00:00 PM PST");
        java.lang.String str30 = fastDateFormat8.format(date29);
        java.lang.String str31 = fastDateFormat1.format(date29);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.lang.Object obj37 = fastDateFormat34.clone();
        java.util.TimeZone timeZone38 = fastDateFormat34.getTimeZone();
        java.lang.String str39 = fastDateFormat34.toString();
        java.util.Locale locale40 = fastDateFormat34.getLocale();
        boolean boolean41 = fastDateFormat1.equals((java.lang.Object) fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str9, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str10, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str18, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str26, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Thursday, January 1, 1970" + "'", str30, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "4:00:00 PM PST" + "'", str31, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str39, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.TimeZone timeZone24 = fastDateFormat22.getTimeZone();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.Locale locale29 = fastDateFormat27.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone24, locale29);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter31 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone12, locale29);
        java.util.Calendar calendar32 = null;
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDatePrinter31.applyRules(calendar32, stringBuffer33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date38 = fastDateFormat36.parse("4:00:02 PM");
        java.lang.String str39 = fastDatePrinter31.format(date38);
        java.lang.String str40 = fastDateFormat2.format(date38);
        java.text.ParsePosition parsePosition42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = fastDateFormat2.parse("Wednesday, December 31, 1969 4:00:00 PM PST", parsePosition42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNull(stringBuffer34);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1/1/70" + "'", str40, "1/1/70");
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.lang.String str29 = fastDatePrinter25.toString();
        java.util.Calendar calendar30 = null;
        java.lang.String str31 = fastDatePrinter25.format(calendar30);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.lang.String str38 = fastDateFormat35.format((long) 0);
        java.util.Locale locale39 = fastDateFormat35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale39);
        java.util.Locale locale41 = fastDateFormat40.getLocale();
        boolean boolean42 = fastDatePrinter25.equals((java.lang.Object) fastDateFormat40);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.Locale locale49 = fastDateFormat47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale49);
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale57);
        java.lang.String str59 = fastDateFormat58.toString();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.Locale locale65 = fastDateFormat63.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale65);
        java.lang.String str67 = fastDateFormat66.toString();
        boolean boolean68 = fastDateFormat58.equals((java.lang.Object) fastDateFormat66);
        java.util.Date date70 = fastDateFormat66.parse("4:00:00 PM PST");
        java.lang.String str71 = fastDateFormat51.format(date70);
        java.lang.StringBuffer stringBuffer72 = null;
        java.lang.StringBuffer stringBuffer73 = fastDatePrinter25.format(date70, stringBuffer72);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str29, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12/31/69" + "'", str38, "12/31/69");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str59, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str67, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "4:00:00 PM PST" + "'", str71, "4:00:00 PM PST");
        org.junit.Assert.assertNull(stringBuffer73);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.Object obj6 = null;
        boolean boolean7 = fastDateFormat2.equals(obj6);
        java.lang.String str8 = fastDateFormat2.toString();
        java.lang.String str9 = fastDateFormat2.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str8, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone8);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone21, locale32);
        java.util.Locale locale35 = fastDatePrinter34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone15, locale35);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter37 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone8, locale35);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone8, locale57);
        java.lang.String str60 = fastDatePrinter58.format((long) (byte) 10);
        java.util.TimeZone timeZone61 = fastDatePrinter58.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone70, locale87);
        java.lang.String str90 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale87);
        org.apache.commons.lang3.time.FastDateParser fastDateParser91 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone61, locale87);
        java.util.Locale locale92 = fastDateParser91.getLocale();
        java.lang.String str93 = fastDateParser91.toString();
        int int95 = fastDateParser91.adjustYear((int) '#');
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Wednesday, December 31, 1969" + "'", str60, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str90, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str93, "FastDateParser[MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2035 + "'", int95 == 2035);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.Locale locale7 = fastDateFormat5.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale7);
        java.lang.String str9 = fastDateFormat8.toString();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Locale locale27 = fastDateFormat25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter29 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone16, locale27);
        java.util.Locale locale30 = fastDatePrinter29.getLocale();
        org.apache.commons.lang3.time.FastDateParser fastDateParser31 = new org.apache.commons.lang3.time.FastDateParser("h:mm:ss a", timeZone10, locale30);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale38);
        java.util.Locale locale41 = fastDateFormat40.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = new org.apache.commons.lang3.time.FastDateFormat("MMM d, yyyy", timeZone10, locale41);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone61, locale66);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter68 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone49, locale66);
        java.lang.String str69 = fastDatePrinter68.toString();
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDatePrinter68.format((long) 1, stringBuffer71);
        boolean boolean73 = fastDateFormat42.equals((java.lang.Object) fastDatePrinter68);
        java.lang.String str75 = fastDatePrinter68.format(0L);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str9, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str69, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNull(stringBuffer72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1/1/70", locale6);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern50 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateParser46.parseObject("MMM d, yyyy", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.lang.Object obj7 = fastDateFormat4.clone();
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.Locale locale21 = fastDateFormat19.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone16, locale21);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale33);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter54 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone41, locale52);
        org.apache.commons.lang3.time.FastDateParser fastDateParser55 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone16, locale52);
        boolean boolean57 = fastDateParser55.equals((java.lang.Object) (byte) 1);
        int int59 = fastDateParser55.adjustYear((int) (short) -1);
        java.lang.String str60 = fastDateParser55.getPattern();
        java.util.Locale locale61 = fastDateParser55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = new org.apache.commons.lang3.time.FastDateFormat("EEEE, MMMM d, yyyy", timeZone8, locale61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale61);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.lang.StringBuffer stringBuffer66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer67 = fastDateFormat63.format((long) (short) 1, stringBuffer66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1999 + "'", int59 == 1999);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "12/31/69" + "'", str60, "12/31/69");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "h:mm:ss a z" + "'", str64, "h:mm:ss a z");
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.lang.String str26 = fastDatePrinter25.toString();
        java.lang.String str27 = fastDatePrinter25.toString();
        java.util.TimeZone timeZone28 = fastDatePrinter25.getTimeZone();
        java.lang.String str29 = fastDatePrinter25.toString();
        java.util.Calendar calendar30 = null;
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format(calendar30, stringBuffer31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone39, locale56);
        java.lang.String str59 = fastDatePrinter58.getPattern();
        java.util.Locale locale60 = fastDatePrinter58.getLocale();
        java.lang.String str61 = fastDatePrinter58.getPattern();
        java.util.Calendar calendar62 = null;
        java.lang.String str63 = fastDatePrinter58.format(calendar62);
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.lang.String str72 = fastDateFormat70.toString();
        java.util.TimeZone timeZone75 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone75);
        java.lang.String str77 = fastDateFormat76.getPattern();
        java.util.Locale locale78 = fastDateFormat76.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale78);
        java.lang.String str80 = fastDateFormat79.toString();
        java.util.TimeZone timeZone83 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone83);
        java.lang.String str85 = fastDateFormat84.getPattern();
        java.util.Locale locale86 = fastDateFormat84.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale86);
        java.lang.String str88 = fastDateFormat87.toString();
        boolean boolean89 = fastDateFormat79.equals((java.lang.Object) fastDateFormat87);
        java.util.Date date91 = fastDateFormat87.parse("4:00:00 PM PST");
        java.lang.String str92 = fastDateFormat70.format(date91);
        java.lang.String str93 = fastDatePrinter58.format(date91);
        java.lang.StringBuffer stringBuffer94 = null;
        java.lang.StringBuffer stringBuffer95 = fastDatePrinter25.format(date91, stringBuffer94);
        java.util.Calendar calendar96 = null;
        java.lang.String str97 = fastDatePrinter25.format(calendar96);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str26, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str27, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str29, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str71, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str72, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "M/d/yy" + "'", str77, "M/d/yy");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str80, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "M/d/yy" + "'", str85, "M/d/yy");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str88, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Thursday, January 1, 1970" + "'", str92, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNull(stringBuffer95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.lang.Object obj15 = fastDateFormat13.clone();
        java.lang.String str16 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone22);
        java.lang.String str25 = fastDateFormat23.format((long) '4');
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.Locale locale37 = fastDateFormat35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone32, locale37);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.Locale locale49 = fastDateFormat47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone44, locale49);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter51 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone32, locale49);
        java.util.Calendar calendar52 = null;
        java.lang.StringBuffer stringBuffer53 = null;
        java.lang.StringBuffer stringBuffer54 = fastDatePrinter51.applyRules(calendar52, stringBuffer53);
        java.util.TimeZone timeZone55 = fastDatePrinter51.getTimeZone();
        java.lang.StringBuffer stringBuffer57 = null;
        java.lang.StringBuffer stringBuffer58 = fastDatePrinter51.format((long) 3, stringBuffer57);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.lang.String str64 = fastDateFormat61.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date68 = fastDateFormat66.parse("4:00:02 PM");
        java.lang.String str69 = fastDateFormat61.format(date68);
        java.lang.StringBuffer stringBuffer70 = null;
        java.lang.StringBuffer stringBuffer71 = fastDatePrinter51.format(date68, stringBuffer70);
        java.lang.String str72 = fastDateFormat23.format(date68);
        java.lang.String str73 = fastDateFormat13.format(date68);
        java.lang.String str74 = fastDateFormat8.format(date68);
        java.util.Locale locale75 = fastDateFormat8.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 17, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 17");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str9, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Wednesday, December 31, 1969" + "'", str25, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertNull(stringBuffer54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer58);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "12/31/69" + "'", str64, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1/1/70" + "'", str69, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Thursday, January 1, 1970" + "'", str72, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1/1/70" + "'", str73, "1/1/70");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Thursday, January 1, 1970" + "'", str74, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format(10L);
        java.util.Locale locale8 = fastDateFormat2.getLocale();
        java.lang.String str9 = fastDateFormat2.toString();
        java.util.Calendar calendar10 = null;
        java.lang.StringBuffer stringBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format(calendar10, stringBuffer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str9, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        java.text.ParsePosition parsePosition48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = fastDateParser46.parseObject("December 31, 1969", parsePosition48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.Object obj5 = fastDateFormat2.clone();
        java.util.TimeZone timeZone6 = fastDateFormat2.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = fastDateFormat2.parseObject("h:mm:ss a");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        int int27 = fastDatePrinter26.getMaxLengthEstimate();
        java.util.Calendar calendar28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDatePrinter26.applyRules(calendar28, stringBuffer29);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.lang.String str39 = fastDateFormat37.toString();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale45);
        java.lang.String str47 = fastDateFormat46.toString();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale53);
        java.lang.String str55 = fastDateFormat54.toString();
        boolean boolean56 = fastDateFormat46.equals((java.lang.Object) fastDateFormat54);
        java.util.Date date58 = fastDateFormat54.parse("4:00:00 PM PST");
        java.lang.String str59 = fastDateFormat37.format(date58);
        java.lang.String str60 = fastDatePrinter26.format(date58);
        java.util.Locale locale61 = fastDatePrinter26.getLocale();
        java.util.TimeZone timeZone62 = fastDatePrinter26.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter89 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone70, locale87);
        java.util.Calendar calendar90 = null;
        java.lang.StringBuffer stringBuffer91 = null;
        java.lang.StringBuffer stringBuffer92 = fastDatePrinter89.applyRules(calendar90, stringBuffer91);
        java.util.TimeZone timeZone93 = fastDatePrinter89.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone93);
        java.util.Locale locale95 = fastDateFormat94.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateParser fastDateParser96 = new org.apache.commons.lang3.time.FastDateParser("FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]", timeZone62, locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Failed to parse \"FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]\" ; gave up at index 3");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(stringBuffer30);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str38, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str39, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str47, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str55, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Thursday, January 1, 1970" + "'", str59, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNull(stringBuffer92);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en_US");
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) 0);
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.lang.String str7 = fastDateFormat2.toString();
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.lang.String str9 = fastDateFormat2.getPattern();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fastDateFormat2.parseObject("4:00:05 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12/31/69" + "'", str5, "12/31/69");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale6);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone15, locale32);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter53 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone40, locale51);
        org.apache.commons.lang3.time.FastDateParser fastDateParser54 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone15, locale51);
        boolean boolean55 = fastDateFormat7.equals((java.lang.Object) fastDateParser54);
        java.lang.String str56 = fastDateParser54.getPattern();
        java.util.regex.Pattern pattern57 = fastDateParser54.getParsePattern();
        java.util.Locale locale58 = fastDateParser54.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 10, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "12/31/69" + "'", str56, "12/31/69");
        org.junit.Assert.assertNotNull(pattern57);
        org.junit.Assert.assertEquals(pattern57.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone8);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone21, locale32);
        java.util.Locale locale35 = fastDatePrinter34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone15, locale35);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter37 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone8, locale35);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone8, locale57);
        java.lang.String str60 = fastDatePrinter58.format((long) (byte) 10);
        java.util.TimeZone timeZone61 = fastDatePrinter58.getTimeZone();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.util.TimeZone timeZone80 = fastDateFormat78.getTimeZone();
        java.util.TimeZone timeZone82 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone82);
        java.lang.String str84 = fastDateFormat83.getPattern();
        java.util.Locale locale85 = fastDateFormat83.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone80, locale85);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone68, locale85);
        org.apache.commons.lang3.time.FastDateParser fastDateParser88 = new org.apache.commons.lang3.time.FastDateParser("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone61, locale85);
        java.text.ParsePosition parsePosition90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date91 = fastDateParser88.parse("FastDatePrinter[,en_US,America/Los_Angeles]", parsePosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Wednesday, December 31, 1969" + "'", str60, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "M/d/yy" + "'", str84, "M/d/yy");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertNotNull(fastDateFormat87);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.util.TimeZone timeZone49 = fastDateParser46.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone56, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter75 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone56, locale73);
        java.util.Calendar calendar76 = null;
        java.lang.StringBuffer stringBuffer77 = null;
        java.lang.StringBuffer stringBuffer78 = fastDatePrinter75.applyRules(calendar76, stringBuffer77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date82 = fastDateFormat80.parse("4:00:02 PM");
        java.lang.String str83 = fastDatePrinter75.format(date82);
        java.util.TimeZone timeZone84 = fastDatePrinter75.getTimeZone();
        boolean boolean85 = fastDateParser46.equals((java.lang.Object) timeZone84);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNull(stringBuffer78);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.lang.Object obj50 = fastDateParser46.parseObject("12/31/69");
        java.lang.String str51 = fastDateParser46.toString();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 49");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.lang.Object obj7 = fastDateFormat4.clone();
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.Locale locale21 = fastDateFormat19.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone16, locale21);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale33);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter54 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone41, locale52);
        org.apache.commons.lang3.time.FastDateParser fastDateParser55 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone16, locale52);
        boolean boolean57 = fastDateParser55.equals((java.lang.Object) (byte) 1);
        int int59 = fastDateParser55.adjustYear((int) (short) -1);
        java.lang.String str60 = fastDateParser55.getPattern();
        java.util.Locale locale61 = fastDateParser55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = new org.apache.commons.lang3.time.FastDateFormat("EEEE, MMMM d, yyyy", timeZone8, locale61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale61);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1999 + "'", int59 == 1999);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "12/31/69" + "'", str60, "12/31/69");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean49 = fastDateParser46.equals((java.lang.Object) 1L);
        int int51 = fastDateParser46.adjustYear(100);
        int int53 = fastDateParser46.adjustYear(2002);
        java.util.TimeZone timeZone54 = fastDateParser46.getTimeZone();
        java.util.Locale locale55 = fastDateParser46.getLocale();
        java.lang.String str56 = fastDateParser46.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3902 + "'", int53 == 3902);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "12/31/69" + "'", str56, "12/31/69");
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone20 = fastDatePrinter19.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone20);
        java.util.TimeZone timeZone22 = fastDateFormat21.getTimeZone();
        java.lang.String str23 = fastDateFormat21.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str23, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0);
        java.util.Locale locale3 = fastDateFormat2.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale3);
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date7 = fastDateFormat4.parse("M/d/yy", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat4);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.text.ParsePosition parsePosition52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = fastDateParser46.parse("", parsePosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.lang.String str51 = fastDateParser46.toString();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(3, 0, timeZone6);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.Locale locale22 = fastDateFormat20.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.Locale locale30 = fastDateFormat28.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale30);
        java.lang.String str32 = fastDateFormat31.toString();
        boolean boolean33 = fastDateFormat23.equals((java.lang.Object) fastDateFormat31);
        java.util.Date date35 = fastDateFormat31.parse("4:00:00 PM PST");
        java.lang.String str36 = fastDateFormat14.format(date35);
        java.lang.String str37 = fastDateFormat7.format(date35);
        java.lang.String str39 = fastDateFormat7.format((long) (short) 1);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str15, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str16, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str24, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str32, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Thursday, January 1, 1970" + "'", str36, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1/1/70 4:00:00 PM PST" + "'", str37, "1/1/70 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "12/31/69 4:00:00 PM PST" + "'", str39, "12/31/69 4:00:00 PM PST");
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.regex.Pattern pattern48 = fastDateParser46.getParsePattern();
        java.lang.String str49 = fastDateParser46.getPattern();
        int int51 = fastDateParser46.adjustYear(2);
        java.lang.String str52 = fastDateParser46.toString();
        int int54 = fastDateParser46.adjustYear(5802);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "12/31/69" + "'", str49, "12/31/69");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2002 + "'", int51 == 2002);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str52, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7702 + "'", int54 == 7702);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(49, timeZone6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 49");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        java.util.TimeZone timeZone30 = fastDatePrinter26.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone30);
        java.util.Locale locale32 = fastDateFormat31.getLocale();
        java.text.ParsePosition parsePosition34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = fastDateFormat31.parseObject("4:00:05 PM PST", parsePosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        int int50 = fastDateParser46.adjustYear((int) (short) -1);
        java.lang.String str51 = fastDateParser46.getPattern();
        java.util.Locale locale52 = fastDateParser46.getLocale();
        java.text.ParsePosition parsePosition54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = fastDateParser46.parseObject("4:00:00 PM PST", parsePosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1999 + "'", int50 == 1999);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "12/31/69" + "'", str51, "12/31/69");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter28 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone9, locale26);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.Locale locale41 = fastDateFormat39.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone36, locale41);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone36, locale53);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.TimeZone timeZone67 = fastDateFormat65.getTimeZone();
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.util.Locale locale72 = fastDateFormat70.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone67, locale72);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter74 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone61, locale72);
        org.apache.commons.lang3.time.FastDateParser fastDateParser75 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone36, locale72);
        java.lang.Class<?> wildcardClass76 = fastDateParser75.getClass();
        boolean boolean77 = fastDatePrinter28.equals((java.lang.Object) fastDateParser75);
        java.util.Locale locale78 = fastDatePrinter28.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 7702, (java.lang.Integer) 3900, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 3900");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "M/d/yy" + "'", str71, "M/d/yy");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat79);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        int int51 = fastDateParser46.adjustYear(2000);
        java.util.Locale locale52 = fastDateParser46.getLocale();
        java.lang.Object obj54 = fastDateParser46.parseObject("12/31/69 4:00:00 PM PST");
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.util.Locale locale60 = fastDateFormat58.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale60);
        java.lang.String str62 = fastDateFormat61.toString();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.Locale locale68 = fastDateFormat66.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale68);
        java.lang.String str70 = fastDateFormat69.toString();
        boolean boolean71 = fastDateFormat61.equals((java.lang.Object) fastDateFormat69);
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.lang.String str77 = fastDateFormat74.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date81 = fastDateFormat79.parse("4:00:02 PM");
        java.lang.String str82 = fastDateFormat74.format(date81);
        java.lang.String str83 = fastDateFormat61.format(date81);
        boolean boolean84 = fastDateParser46.equals((java.lang.Object) str83);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3900 + "'", int51 == 3900);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "M/d/yy" + "'", str59, "M/d/yy");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str62, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str70, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "12/31/69" + "'", str77, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1/1/70" + "'", str82, "1/1/70");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "4:00:02 PM PST" + "'", str83, "4:00:02 PM PST");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.lang.String str26 = fastDatePrinter25.getPattern();
        java.util.Locale locale27 = fastDatePrinter25.getLocale();
        java.lang.String str28 = fastDatePrinter25.getPattern();
        java.util.Calendar calendar29 = null;
        java.lang.String str30 = fastDatePrinter25.format(calendar29);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.lang.String str39 = fastDateFormat37.toString();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale45);
        java.lang.String str47 = fastDateFormat46.toString();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale53);
        java.lang.String str55 = fastDateFormat54.toString();
        boolean boolean56 = fastDateFormat46.equals((java.lang.Object) fastDateFormat54);
        java.util.Date date58 = fastDateFormat54.parse("4:00:00 PM PST");
        java.lang.String str59 = fastDateFormat37.format(date58);
        java.lang.String str60 = fastDatePrinter25.format(date58);
        java.lang.Class<?> wildcardClass61 = date58.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str38, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str39, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str47, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str55, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Thursday, January 1, 1970" + "'", str59, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date33 = fastDateFormat31.parse("4:00:02 PM");
        java.lang.String str34 = fastDatePrinter26.format(date33);
        java.util.TimeZone timeZone35 = fastDatePrinter26.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.Locale locale41 = fastDateFormat39.getLocale();
        java.lang.String str43 = fastDateFormat39.format(1L);
        java.util.Locale locale44 = fastDateFormat39.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", locale44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone35, locale44);
        java.lang.String str48 = fastDateFormat46.format(0L);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "12/31/69" + "'", str43, "12/31/69");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "4:00:00 PM PST" + "'", str48, "4:00:00 PM PST");
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        java.util.Locale locale3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale3);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.Locale locale10 = fastDateFormat8.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone5, locale10);
        java.util.TimeZone timeZone12 = fastDateFormat11.getTimeZone();
        java.text.ParsePosition parsePosition14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = fastDateFormat11.parseObject("", parsePosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date33 = fastDateFormat31.parse("4:00:02 PM");
        java.lang.String str34 = fastDatePrinter26.format(date33);
        java.util.TimeZone timeZone35 = fastDatePrinter26.getTimeZone();
        java.util.Locale locale38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale38);
        java.lang.String str41 = fastDateFormat39.format(1L);
        java.lang.String str42 = fastDateFormat39.getPattern();
        java.util.Locale locale43 = fastDateFormat39.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter44 = new org.apache.commons.lang3.time.FastDatePrinter("1/1/70", timeZone35, locale43);
        java.util.TimeZone timeZone45 = fastDatePrinter44.getTimeZone();
        int int46 = fastDatePrinter44.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str41, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str42, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone33, locale50);
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.TimeZone timeZone58 = fastDateFormat56.getTimeZone();
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.util.TimeZone timeZone64 = fastDateFormat62.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.Locale locale69 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone64, locale69);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter71 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone58, locale69);
        org.apache.commons.lang3.time.FastDateParser fastDateParser72 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone33, locale69);
        java.lang.Class<?> wildcardClass73 = fastDateParser72.getClass();
        boolean boolean74 = fastDatePrinter25.equals((java.lang.Object) fastDateParser72);
        java.lang.Object obj75 = null;
        boolean boolean76 = fastDatePrinter25.equals(obj75);
        int int77 = fastDatePrinter25.getMaxLengthEstimate();
        java.lang.String str78 = fastDatePrinter25.getPattern();
        java.lang.String str80 = fastDatePrinter25.format((long) 21);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "M/d/yy" + "'", str63, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.Date date7 = fastDateFormat2.parse("12/31/69 3:59 PM");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 00:00:00 PST 1969");
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.Locale locale8 = fastDateFormat6.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale8);
        java.util.TimeZone timeZone10 = fastDateFormat9.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone10);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.TimeZone timeZone31 = fastDateFormat29.getTimeZone();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone31, locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone19, locale36);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        org.apache.commons.lang3.time.FastDateParser fastDateParser58 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone19, locale55);
        boolean boolean59 = fastDateParser58.isNextNumber();
        java.util.regex.Pattern pattern60 = fastDateParser58.getParsePattern();
        java.lang.String str61 = fastDateParser58.toString();
        java.util.Locale locale62 = fastDateParser58.getLocale();
        int int64 = fastDateParser58.adjustYear(17);
        java.util.Locale locale65 = fastDateParser58.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, (int) (short) 0, timeZone10, locale65);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pattern60);
        org.junit.Assert.assertEquals(pattern60.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str61, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2017 + "'", int64 == 2017);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat66);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        java.lang.String str7 = fastDateFormat4.getPattern();
        java.util.Locale locale8 = fastDateFormat4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3902, (java.lang.Integer) 31, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 31");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.Locale locale39 = fastDateFormat37.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone34, locale39);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone34, locale51);
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.TimeZone timeZone59 = fastDateFormat57.getTimeZone();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.Locale locale70 = fastDateFormat68.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone65, locale70);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter72 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone59, locale70);
        org.apache.commons.lang3.time.FastDateParser fastDateParser73 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone34, locale70);
        java.lang.Class<?> wildcardClass74 = fastDateParser73.getClass();
        boolean boolean75 = fastDatePrinter26.equals((java.lang.Object) fastDateParser73);
        java.util.Locale locale76 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale76);
        java.util.TimeZone timeZone78 = fastDateFormat77.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date80 = fastDateFormat77.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"\" does not match (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        org.apache.commons.lang3.time.FastDateParser fastDateParser53 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone14, locale50);
        boolean boolean54 = fastDateFormat6.equals((java.lang.Object) fastDateParser53);
        java.lang.String str55 = fastDateParser53.getPattern();
        java.text.ParsePosition parsePosition57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = fastDateParser53.parse("FastDatePrinter[,en_US,America/Los_Angeles]", parsePosition57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "12/31/69" + "'", str55, "12/31/69");
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean49 = fastDateParser48.isNextNumber();
        boolean boolean50 = fastDateParser48.isNextNumber();
        java.util.Locale locale51 = fastDateParser48.getLocale();
        boolean boolean52 = fastDateParser48.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean55 = fastDateParser48.equals((java.lang.Object) 1);
        java.lang.Object obj57 = fastDateParser48.parseObject("12/31/69");
        java.util.TimeZone timeZone58 = fastDateParser48.getTimeZone();
        java.util.Locale locale59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone58, locale59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) 'a', timeZone58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Locale locale27 = fastDateFormat25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter29 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone16, locale27);
        java.util.Locale locale30 = fastDatePrinter29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone10, locale30);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone45, locale56);
        java.util.Locale locale59 = fastDatePrinter58.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone39, locale59);
        java.lang.String str61 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale59);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone10, locale59);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone10);
        java.util.Locale locale66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale66);
        java.lang.String str69 = fastDateFormat67.format(1L);
        java.lang.String str70 = fastDateFormat67.getPattern();
        java.util.Locale locale71 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = new org.apache.commons.lang3.time.FastDateFormat("M/d/yy", timeZone10, locale71);
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone74);
        java.lang.String str76 = fastDateFormat75.toString();
        java.lang.String str77 = fastDateFormat75.toString();
        java.util.Locale locale78 = fastDateFormat75.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter79 = new org.apache.commons.lang3.time.FastDatePrinter("1/1/70", timeZone10, locale78);
        java.util.TimeZone timeZone81 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone81);
        java.lang.String str83 = fastDateFormat82.getPattern();
        java.lang.String str85 = fastDateFormat82.format((long) 0);
        java.util.Locale locale86 = fastDateFormat82.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = new org.apache.commons.lang3.time.FastDateFormat("Pacific Standard Time", timeZone10, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str61, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str69, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str70, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str76, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str77, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "M/d/yy" + "'", str83, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "12/31/69" + "'", str85, "12/31/69");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_US");
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.String str8 = fastDateFormat2.getPattern();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = fastDateFormat2.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        java.util.Locale locale2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str5 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone12, locale23);
        java.util.TimeZone timeZone26 = fastDatePrinter25.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone26);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone33);
        java.lang.String str36 = fastDateFormat34.format((long) '4');
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.Locale locale48 = fastDateFormat46.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone43, locale48);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.TimeZone timeZone55 = fastDateFormat53.getTimeZone();
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.util.Locale locale60 = fastDateFormat58.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone55, locale60);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter62 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone43, locale60);
        java.util.Calendar calendar63 = null;
        java.lang.StringBuffer stringBuffer64 = null;
        java.lang.StringBuffer stringBuffer65 = fastDatePrinter62.applyRules(calendar63, stringBuffer64);
        java.util.TimeZone timeZone66 = fastDatePrinter62.getTimeZone();
        java.lang.StringBuffer stringBuffer68 = null;
        java.lang.StringBuffer stringBuffer69 = fastDatePrinter62.format((long) 3, stringBuffer68);
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.lang.String str75 = fastDateFormat72.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date79 = fastDateFormat77.parse("4:00:02 PM");
        java.lang.String str80 = fastDateFormat72.format(date79);
        java.lang.StringBuffer stringBuffer81 = null;
        java.lang.StringBuffer stringBuffer82 = fastDatePrinter62.format(date79, stringBuffer81);
        java.lang.String str83 = fastDateFormat34.format(date79);
        java.lang.String str84 = fastDateFormat27.format(date79);
        java.lang.String str85 = fastDateFormat3.format(date79);
        java.lang.String str86 = fastDateFormat3.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str4, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str5, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Wednesday, December 31, 1969" + "'", str36, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "M/d/yy" + "'", str59, "M/d/yy");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertNull(stringBuffer65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer69);
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "12/31/69" + "'", str75, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1/1/70" + "'", str80, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Thursday, January 1, 1970" + "'", str83, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "4:00:02 PM PST" + "'", str84, "4:00:02 PM PST");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Thursday, January 1, 1970 4:00:02 PM PST" + "'", str85, "Thursday, January 1, 1970 4:00:02 PM PST");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str86, "EEEE, MMMM d, yyyy h:mm:ss a z");
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        java.util.regex.Pattern pattern49 = fastDateParser47.getParsePattern();
        java.util.Locale locale50 = fastDateParser47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale50);
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateFormat51.parseObject("Wednesday, December 31, 1969", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        int int51 = fastDateParser46.adjustYear(2035);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = fastDateParser46.parseObject("MMM d, yyyy");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"MMM d, yyyy\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3935 + "'", int51 == 3935);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.Object obj6 = null;
        boolean boolean7 = fastDateFormat2.equals(obj6);
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = fastDateFormat2.parseObject("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        org.apache.commons.lang3.time.FastDateParser fastDateParser37 = new org.apache.commons.lang3.time.FastDateParser("MMM d, yyyy h:mm:ss a z", timeZone8, locale36);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.lang.String str44 = fastDateFormat41.format((long) 0);
        java.util.Locale locale45 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale45);
        java.util.TimeZone timeZone47 = fastDateFormat46.getTimeZone();
        java.util.Locale locale48 = fastDateFormat46.getLocale();
        java.util.Locale locale49 = fastDateFormat46.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = new org.apache.commons.lang3.time.FastDateFormat("':00:02 ", timeZone8, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str35, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "12/31/69" + "'", str44, "12/31/69");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.lang.String str11 = fastDateFormat8.format((long) (short) 1);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.lang.String str20 = fastDateFormat18.toString();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale26);
        java.lang.String str28 = fastDateFormat27.toString();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale34);
        java.lang.String str36 = fastDateFormat35.toString();
        boolean boolean37 = fastDateFormat27.equals((java.lang.Object) fastDateFormat35);
        java.util.Date date39 = fastDateFormat35.parse("4:00:00 PM PST");
        java.lang.String str40 = fastDateFormat18.format(date39);
        java.lang.String str41 = fastDateFormat8.format(date39);
        java.util.Calendar calendar42 = null;
        java.lang.StringBuffer stringBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = fastDateFormat8.applyRules(calendar42, stringBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4:00:00 PM PST" + "'", str11, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str19, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str20, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str28, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str36, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Thursday, January 1, 1970" + "'", str40, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "4:00:00 PM PST" + "'", str41, "4:00:00 PM PST");
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean50 = fastDateParser48.equals((java.lang.Object) 'a');
        java.util.Locale locale51 = fastDateParser48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(49, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 49");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.regex.Pattern pattern48 = fastDateParser46.getParsePattern();
        java.lang.String str49 = fastDateParser46.getPattern();
        java.util.Date date51 = fastDateParser46.parse("12/31/69 3:59 PM");
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "12/31/69" + "'", str49, "12/31/69");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone20 = fastDatePrinter19.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.lang.String str28 = fastDateFormat25.getPattern();
        java.lang.String str30 = fastDateFormat25.format((long) 0);
        java.lang.Object obj31 = fastDateFormat25.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator32 = fastDateFormat21.formatToCharacterIterator(obj31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: org.apache.commons.lang3.time.FastDateFormat");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str22, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "12/31/69" + "'", str30, "12/31/69");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 0);
        java.lang.Object obj9 = fastDateFormat2.parseObject("12/31/69");
        java.lang.String str11 = fastDateFormat2.format(0L);
        java.text.ParsePosition parsePosition13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = fastDateFormat2.parse("Thursday, January 1, 1970", parsePosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "12/31/69" + "'", str11, "12/31/69");
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone9);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter35 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone22, locale33);
        java.util.Locale locale36 = fastDatePrinter35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone16, locale36);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter38 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone9, locale36);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        java.util.Locale locale58 = fastDatePrinter57.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone9, locale58);
        java.lang.String str61 = fastDatePrinter59.format((long) (byte) 10);
        java.util.TimeZone timeZone62 = fastDatePrinter59.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.TimeZone timeZone71 = fastDateFormat69.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.util.Locale locale76 = fastDateFormat74.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone71, locale76);
        java.util.TimeZone timeZone80 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone80);
        java.lang.String str82 = fastDateFormat81.getPattern();
        java.util.TimeZone timeZone83 = fastDateFormat81.getTimeZone();
        java.util.TimeZone timeZone85 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone85);
        java.lang.String str87 = fastDateFormat86.getPattern();
        java.util.Locale locale88 = fastDateFormat86.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone83, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone71, locale88);
        java.lang.String str91 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale88);
        org.apache.commons.lang3.time.FastDateParser fastDateParser92 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone62, locale88);
        java.util.Locale locale93 = fastDateParser92.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale93);
        java.text.ParsePosition parsePosition96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date97 = fastDateFormat94.parse("FastDateParser[12/31/69,en_US,America/Los_Angeles]", parsePosition96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Wednesday, December 31, 1969" + "'", str61, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(fastDateFormat81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "M/d/yy" + "'", str82, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "M/d/yy" + "'", str87, "M/d/yy");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str91, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat94);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.util.Locale locale9 = fastDateFormat8.getLocale();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = fastDateFormat8.parse("", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone20, locale31);
        java.util.Locale locale34 = fastDatePrinter33.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone14, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone7, locale34);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone7, locale56);
        java.lang.String str59 = fastDatePrinter57.format((long) (byte) 10);
        java.util.TimeZone timeZone60 = fastDatePrinter57.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale74);
        java.lang.String str76 = fastDateFormat75.toString();
        boolean boolean77 = fastDateFormat67.equals((java.lang.Object) fastDateFormat75);
        boolean boolean78 = fastDatePrinter57.equals((java.lang.Object) fastDateFormat67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = fastDateFormat67.parseObject("h:mm:ss a");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Wednesday, December 31, 1969" + "'", str59, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str76, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean49 = fastDateParser47.equals((java.lang.Object) (byte) 1);
        int int51 = fastDateParser47.adjustYear((int) (short) -1);
        java.lang.String str52 = fastDateParser47.getPattern();
        java.util.Locale locale53 = fastDateParser47.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 100, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999 + "'", int51 == 1999);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.Date date49 = fastDateParser46.parse("12/31/69");
        java.text.ParsePosition parsePosition51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = fastDateParser46.parseObject("Wednesday, December 31, 1969 3:59:59 PM PST", parsePosition51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.lang.String str50 = fastDateParser46.toString();
        java.lang.String str51 = fastDateParser46.toString();
        java.lang.String str52 = fastDateParser46.getPattern();
        java.lang.String str53 = fastDateParser46.toString();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str50, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str53, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        java.util.Locale locale3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale3);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 21");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone12, locale17);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter19 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone6, locale17);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone28);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.Locale locale52 = fastDateFormat50.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale52);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter54 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone41, locale52);
        java.util.Locale locale55 = fastDatePrinter54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone35, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone28, locale55);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat61.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone69, locale74);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter76 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone63, locale74);
        java.util.Locale locale77 = fastDatePrinter76.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter78 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone28, locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale77);
        org.apache.commons.lang3.time.FastDateParser fastDateParser80 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone6, locale77);
        java.util.Locale locale81 = fastDateParser80.getLocale();
        java.util.TimeZone timeZone82 = fastDateParser80.getTimeZone();
        java.util.regex.Pattern pattern83 = fastDateParser80.getParsePattern();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(pattern83);
        org.junit.Assert.assertEquals(pattern83.toString(), "(Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.lang.String str26 = fastDatePrinter25.toString();
        java.lang.String str27 = fastDatePrinter25.toString();
        java.util.TimeZone timeZone28 = fastDatePrinter25.getTimeZone();
        java.util.Locale locale29 = fastDatePrinter25.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str26, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str27, "FastDatePrinter[,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.Locale locale22 = fastDateFormat20.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone17, locale22);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter24 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone11, locale22);
        java.util.Locale locale25 = fastDatePrinter24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone5, locale25);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.Locale locale39 = fastDateFormat37.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone34, locale39);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone34, locale51);
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.TimeZone timeZone59 = fastDateFormat57.getTimeZone();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.Locale locale70 = fastDateFormat68.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone65, locale70);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter72 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone59, locale70);
        org.apache.commons.lang3.time.FastDateParser fastDateParser73 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone34, locale70);
        boolean boolean74 = fastDateParser73.isNextNumber();
        java.util.regex.Pattern pattern75 = fastDateParser73.getParsePattern();
        java.lang.String str76 = fastDateParser73.getPattern();
        java.util.Locale locale77 = fastDateParser73.getLocale();
        java.util.Locale locale78 = fastDateParser73.getLocale();
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.FieldPosition fieldPosition80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = fastDateFormat26.format((java.lang.Object) locale78, stringBuffer79, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(pattern75);
        org.junit.Assert.assertEquals(pattern75.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "12/31/69" + "'", str76, "12/31/69");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern50 = fastDateParser46.getParsePattern();
        java.lang.String str51 = fastDateParser46.getPattern();
        java.util.regex.Pattern pattern52 = fastDateParser46.getParsePattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "12/31/69" + "'", str51, "12/31/69");
        org.junit.Assert.assertNotNull(pattern52);
        org.junit.Assert.assertEquals(pattern52.toString(), "12/31/69");
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a");
        java.lang.String str2 = fastDateFormat1.getPattern();
        int int3 = fastDateFormat1.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h:mm:ss a" + "'", str2, "h:mm:ss a");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13 + "'", int3 == 13);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 0);
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = fastDateFormat2.parseObject("MMM d, yyyy", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        boolean boolean49 = fastDateParser47.isNextNumber();
        java.util.Locale locale50 = fastDateParser47.getLocale();
        boolean boolean51 = fastDateParser47.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean54 = fastDateParser47.equals((java.lang.Object) 1);
        java.lang.Object obj56 = fastDateParser47.parseObject("12/31/69");
        java.util.TimeZone timeZone57 = fastDateParser47.getTimeZone();
        java.util.Locale locale58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone57, locale58);
        java.util.Calendar calendar60 = null;
        java.lang.StringBuffer stringBuffer61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer62 = fastDateFormat59.format(calendar60, stringBuffer61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0);
        java.util.Locale locale2 = fastDateFormat1.getLocale();
        java.util.TimeZone timeZone3 = fastDateFormat1.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.Locale locale9 = fastDateFormat7.getLocale();
        java.lang.String str11 = fastDateFormat7.format(1L);
        java.util.TimeZone timeZone12 = fastDateFormat7.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone12);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.Locale locale37 = fastDateFormat35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone32, locale37);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter39 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone20, locale37);
        int int40 = fastDatePrinter39.getMaxLengthEstimate();
        java.util.Calendar calendar41 = null;
        java.lang.StringBuffer stringBuffer42 = null;
        java.lang.StringBuffer stringBuffer43 = fastDatePrinter39.applyRules(calendar41, stringBuffer42);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.lang.String str52 = fastDateFormat50.toString();
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.Locale locale58 = fastDateFormat56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        boolean boolean69 = fastDateFormat59.equals((java.lang.Object) fastDateFormat67);
        java.util.Date date71 = fastDateFormat67.parse("4:00:00 PM PST");
        java.lang.String str72 = fastDateFormat50.format(date71);
        java.lang.String str73 = fastDatePrinter39.format(date71);
        java.lang.String str74 = fastDateFormat13.format(date71);
        java.lang.StringBuffer stringBuffer75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = fastDateFormat1.format(date71, stringBuffer75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "12/31/69" + "'", str11, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(stringBuffer43);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str51, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str52, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str60, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Thursday, January 1, 1970" + "'", str72, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Jan 1, 1970" + "'", str74, "Jan 1, 1970");
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone56, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter75 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone56, locale73);
        int int76 = fastDatePrinter75.getMaxLengthEstimate();
        boolean boolean77 = fastDateParser46.equals((java.lang.Object) fastDatePrinter75);
        boolean boolean78 = fastDateParser46.isNextNumber();
        java.lang.Class<?> wildcardClass79 = fastDateParser46.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.Locale locale21 = fastDateFormat19.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale21);
        java.lang.String str23 = fastDateFormat22.toString();
        boolean boolean24 = fastDateFormat14.equals((java.lang.Object) fastDateFormat22);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.lang.String str30 = fastDateFormat27.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date34 = fastDateFormat32.parse("4:00:02 PM");
        java.lang.String str35 = fastDateFormat27.format(date34);
        java.lang.String str36 = fastDateFormat14.format(date34);
        java.lang.String str37 = fastDateFormat2.format(date34);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str15, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str23, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "12/31/69" + "'", str30, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1/1/70" + "'", str35, "1/1/70");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4:00:02 PM PST" + "'", str36, "4:00:02 PM PST");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1/1/70" + "'", str37, "1/1/70");
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone6);
        java.lang.Object obj8 = fastDateFormat7.clone();
        java.lang.Object obj9 = fastDateFormat7.clone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.lang.String str16 = fastDateFormat13.format((long) 0);
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale17);
        java.util.TimeZone timeZone19 = fastDateFormat18.getTimeZone();
        java.lang.String str21 = fastDateFormat18.format((long) (short) 1);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale36);
        java.lang.String str38 = fastDateFormat37.toString();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale44);
        java.lang.String str46 = fastDateFormat45.toString();
        boolean boolean47 = fastDateFormat37.equals((java.lang.Object) fastDateFormat45);
        java.util.Date date49 = fastDateFormat45.parse("4:00:00 PM PST");
        java.lang.String str50 = fastDateFormat28.format(date49);
        java.lang.String str51 = fastDateFormat18.format(date49);
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.TimeZone timeZone57 = fastDateFormat55.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.lang.String str60 = fastDateFormat58.toString();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale74);
        java.lang.String str76 = fastDateFormat75.toString();
        boolean boolean77 = fastDateFormat67.equals((java.lang.Object) fastDateFormat75);
        java.util.Date date79 = fastDateFormat75.parse("4:00:00 PM PST");
        java.lang.String str80 = fastDateFormat58.format(date79);
        java.lang.String str81 = fastDateFormat18.format(date79);
        java.lang.StringBuffer stringBuffer82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = fastDateFormat7.format(date79, stringBuffer82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "12/31/69" + "'", str16, "12/31/69");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "4:00:00 PM PST" + "'", str21, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str29, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str30, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str38, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str46, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Thursday, January 1, 1970" + "'", str50, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "4:00:00 PM PST" + "'", str51, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str59, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str60, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str76, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Thursday, January 1, 1970" + "'", str80, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "4:00:00 PM PST" + "'", str81, "4:00:00 PM PST");
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.lang.Object obj6 = fastDateFormat4.clone();
        java.lang.String str7 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone13);
        java.lang.String str16 = fastDateFormat14.format((long) '4');
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.Locale locale28 = fastDateFormat26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone23, locale28);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.Locale locale40 = fastDateFormat38.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone35, locale40);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter42 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone23, locale40);
        java.util.Calendar calendar43 = null;
        java.lang.StringBuffer stringBuffer44 = null;
        java.lang.StringBuffer stringBuffer45 = fastDatePrinter42.applyRules(calendar43, stringBuffer44);
        java.util.TimeZone timeZone46 = fastDatePrinter42.getTimeZone();
        java.lang.StringBuffer stringBuffer48 = null;
        java.lang.StringBuffer stringBuffer49 = fastDatePrinter42.format((long) 3, stringBuffer48);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.lang.String str55 = fastDateFormat52.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date59 = fastDateFormat57.parse("4:00:02 PM");
        java.lang.String str60 = fastDateFormat52.format(date59);
        java.lang.StringBuffer stringBuffer61 = null;
        java.lang.StringBuffer stringBuffer62 = fastDatePrinter42.format(date59, stringBuffer61);
        java.lang.String str63 = fastDateFormat14.format(date59);
        java.lang.String str64 = fastDateFormat4.format(date59);
        java.lang.String str66 = fastDateFormat4.format((long) (-1));
        java.util.Locale locale67 = fastDateFormat4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, (-1), locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Wednesday, December 31, 1969" + "'", str16, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNull(stringBuffer45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer49);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "12/31/69" + "'", str55, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1/1/70" + "'", str60, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Thursday, January 1, 1970" + "'", str63, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1/1/70" + "'", str64, "1/1/70");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "12/31/69" + "'", str66, "12/31/69");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean49 = fastDateParser47.equals((java.lang.Object) 'a');
        java.util.TimeZone timeZone50 = fastDateParser47.getTimeZone();
        java.util.TimeZone timeZone51 = fastDateParser47.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm:ss a z", timeZone51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateFormat52.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.Locale locale33 = fastDatePrinter25.getLocale();
        boolean boolean35 = fastDatePrinter25.equals((java.lang.Object) "EEE");
        java.util.Calendar calendar36 = null;
        java.lang.StringBuffer stringBuffer37 = null;
        java.lang.StringBuffer stringBuffer38 = fastDatePrinter25.format(calendar36, stringBuffer37);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(stringBuffer38);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.lang.String str49 = fastDateParser46.toString();
        java.util.TimeZone timeZone50 = fastDateParser46.getTimeZone();
        java.util.Locale locale51 = fastDateParser46.getLocale();
        java.util.Locale locale52 = fastDateParser46.getLocale();
        java.text.ParsePosition parsePosition54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date55 = fastDateParser46.parse("M/d/yy h:mm a", parsePosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str49, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy");
        java.util.Locale locale2 = fastDateFormat1.getLocale();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.lang.String str8 = fastDateFormat5.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date12 = fastDateFormat10.parse("4:00:02 PM");
        java.lang.String str13 = fastDateFormat5.format(date12);
        java.lang.String str14 = fastDateFormat1.format(date12);
        java.util.TimeZone timeZone15 = fastDateFormat1.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12/31/69" + "'", str8, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1/1/70" + "'", str13, "1/1/70");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Thursday, January 1, 1970" + "'", str14, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str6 = fastDateFormat2.format(1L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone15, locale32);
        java.util.Calendar calendar35 = null;
        java.lang.StringBuffer stringBuffer36 = null;
        java.lang.StringBuffer stringBuffer37 = fastDatePrinter34.applyRules(calendar35, stringBuffer36);
        java.util.TimeZone timeZone38 = fastDatePrinter34.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone38);
        java.util.Locale locale40 = fastDateFormat39.getLocale();
        boolean boolean41 = fastDateFormat2.equals((java.lang.Object) fastDateFormat39);
        java.util.Locale locale42 = fastDateFormat39.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = fastDateFormat39.parse("FastDatePrinter[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"FastDatePrinter[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday), (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNull(stringBuffer37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.util.Locale locale3 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.Locale locale9 = fastDateFormat7.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.Locale locale17 = fastDateFormat15.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale17);
        java.lang.String str19 = fastDateFormat18.toString();
        boolean boolean20 = fastDateFormat10.equals((java.lang.Object) fastDateFormat18);
        java.util.Date date22 = fastDateFormat18.parse("4:00:00 PM PST");
        java.lang.String str23 = fastDateFormat2.format(date22);
        java.lang.StringBuffer stringBuffer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = fastDateFormat2.format((long) (short) 0, stringBuffer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str11, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str19, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1/1/70" + "'", str23, "1/1/70");
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.Locale locale39 = fastDateFormat37.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone34, locale39);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone34, locale51);
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.TimeZone timeZone59 = fastDateFormat57.getTimeZone();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.Locale locale70 = fastDateFormat68.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone65, locale70);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter72 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone59, locale70);
        org.apache.commons.lang3.time.FastDateParser fastDateParser73 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone34, locale70);
        java.lang.Class<?> wildcardClass74 = fastDateParser73.getClass();
        boolean boolean75 = fastDatePrinter26.equals((java.lang.Object) fastDateParser73);
        java.util.Locale locale76 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale76);
        java.util.TimeZone timeZone78 = fastDateFormat77.getTimeZone();
        java.util.TimeZone timeZone79 = fastDateFormat77.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.lang.String str9 = fastDateFormat8.toString();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = fastDateFormat8.parseObject("1/1/70", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str9, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        int int51 = fastDateParser46.adjustYear(2000);
        java.util.Locale locale52 = fastDateParser46.getLocale();
        java.lang.Object obj54 = fastDateParser46.parseObject("12/31/69 4:00:00 PM PST");
        java.text.ParsePosition parsePosition56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date57 = fastDateParser46.parse("Pacific Standard Time", parsePosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3900 + "'", int51 == 3900);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        int[] intArray33 = new int[] { (byte) 10, (short) 100, 2, (byte) 10, (byte) 100 };
        java.lang.String str34 = fastDatePrinter25.parseToken("FastDateParser[12/31/69,en_US,America/Los_Angeles]", intArray33);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.lang.Object obj39 = fastDateFormat37.clone();
        java.lang.String str40 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone46);
        java.lang.String str49 = fastDateFormat47.format((long) '4');
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone56, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter75 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone56, locale73);
        java.util.Calendar calendar76 = null;
        java.lang.StringBuffer stringBuffer77 = null;
        java.lang.StringBuffer stringBuffer78 = fastDatePrinter75.applyRules(calendar76, stringBuffer77);
        java.util.TimeZone timeZone79 = fastDatePrinter75.getTimeZone();
        java.lang.StringBuffer stringBuffer81 = null;
        java.lang.StringBuffer stringBuffer82 = fastDatePrinter75.format((long) 3, stringBuffer81);
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.lang.String str88 = fastDateFormat85.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date92 = fastDateFormat90.parse("4:00:02 PM");
        java.lang.String str93 = fastDateFormat85.format(date92);
        java.lang.StringBuffer stringBuffer94 = null;
        java.lang.StringBuffer stringBuffer95 = fastDatePrinter75.format(date92, stringBuffer94);
        java.lang.String str96 = fastDateFormat47.format(date92);
        java.lang.String str97 = fastDateFormat37.format(date92);
        java.lang.String str98 = fastDatePrinter25.format(date92);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 100, 2, 10, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "r" + "'", str34, "r");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Wednesday, December 31, 1969" + "'", str49, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNull(stringBuffer78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer82);
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "12/31/69" + "'", str88, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1/1/70" + "'", str93, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Thursday, January 1, 1970" + "'", str96, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "1/1/70" + "'", str97, "1/1/70");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str8 = fastDateFormat6.toString();
        int int9 = fastDateFormat6.getMaxLengthEstimate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fastDateFormat6.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str7, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str8, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        int int48 = fastDateParser46.adjustYear(31);
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        boolean boolean50 = fastDateParser46.isNextNumber();
        java.util.TimeZone timeZone51 = fastDateParser46.getTimeZone();
        java.util.Locale locale52 = fastDateParser46.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2031 + "'", int48 == 2031);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        java.lang.String str8 = fastDateFormat4.format(1L);
        java.util.TimeZone timeZone9 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone9);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.Locale locale22 = fastDateFormat20.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone17, locale22);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone17, locale34);
        int int37 = fastDatePrinter36.getMaxLengthEstimate();
        java.util.Calendar calendar38 = null;
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDatePrinter36.applyRules(calendar38, stringBuffer39);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale55);
        java.lang.String str57 = fastDateFormat56.toString();
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.Locale locale63 = fastDateFormat61.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale63);
        java.lang.String str65 = fastDateFormat64.toString();
        boolean boolean66 = fastDateFormat56.equals((java.lang.Object) fastDateFormat64);
        java.util.Date date68 = fastDateFormat64.parse("4:00:00 PM PST");
        java.lang.String str69 = fastDateFormat47.format(date68);
        java.lang.String str70 = fastDatePrinter36.format(date68);
        java.lang.String str71 = fastDateFormat10.format(date68);
        java.util.Locale locale72 = fastDateFormat10.getLocale();
        java.util.Locale locale73 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = fastDateFormat74.parseObject("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12/31/69" + "'", str8, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(stringBuffer40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str48, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str49, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str57, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str65, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Thursday, January 1, 1970" + "'", str69, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Jan 1, 1970" + "'", str71, "Jan 1, 1970");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean49 = fastDateParser48.isNextNumber();
        boolean boolean50 = fastDateParser48.isNextNumber();
        java.util.Locale locale51 = fastDateParser48.getLocale();
        boolean boolean52 = fastDateParser48.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean55 = fastDateParser48.equals((java.lang.Object) 1);
        java.lang.Object obj57 = fastDateParser48.parseObject("12/31/69");
        java.util.TimeZone timeZone58 = fastDateParser48.getTimeZone();
        java.util.Locale locale59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone58, locale59);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.util.Locale locale68 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", timeZone58, locale68);
        java.text.ParsePosition parsePosition71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date72 = fastDateFormat69.parse("FastDateParser[12/31/69,en_US,America/Los_Angeles]", parsePosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone20, locale31);
        java.util.Locale locale34 = fastDatePrinter33.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone14, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone7, locale34);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone7, locale56);
        java.lang.String str59 = fastDatePrinter57.format((long) (byte) 10);
        java.util.TimeZone timeZone60 = fastDatePrinter57.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale74);
        java.lang.String str76 = fastDateFormat75.toString();
        boolean boolean77 = fastDateFormat67.equals((java.lang.Object) fastDateFormat75);
        boolean boolean78 = fastDatePrinter57.equals((java.lang.Object) fastDateFormat67);
        java.lang.String str79 = fastDateFormat67.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = fastDateFormat67.parseObject("1/1/70 4:00:00 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Wednesday, December 31, 1969" + "'", str59, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str76, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str79, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone11, locale16);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter18 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone5, locale16);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone26, locale43);
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.TimeZone timeZone57 = fastDateFormat55.getTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.Locale locale62 = fastDateFormat60.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone57, locale62);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter64 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone51, locale62);
        org.apache.commons.lang3.time.FastDateParser fastDateParser65 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone26, locale62);
        boolean boolean67 = fastDateParser65.equals((java.lang.Object) 'a');
        java.util.Locale locale68 = fastDateParser65.getLocale();
        boolean boolean69 = fastDatePrinter18.equals((java.lang.Object) fastDateParser65);
        java.lang.String str71 = fastDatePrinter18.format(1L);
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.lang.String str78 = fastDateFormat75.format((long) 0);
        java.util.Locale locale79 = fastDateFormat75.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale79);
        java.util.TimeZone timeZone81 = fastDateFormat80.getTimeZone();
        java.util.Locale locale82 = fastDateFormat80.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        java.util.Date date86 = fastDateFormat84.parse("12/31/69 4:00:00 PM PST");
        java.lang.String str87 = fastDateFormat80.format(date86);
        java.lang.StringBuffer stringBuffer88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = fastDatePrinter18.format(date86, stringBuffer88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "12/31/69" + "'", str71, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "M/d/yy" + "'", str76, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "12/31/69" + "'", str78, "12/31/69");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat84);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "12:00:00 AM PST" + "'", str87, "12:00:00 AM PST");
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.lang.String str6 = fastDateFormat3.format((long) 0);
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.lang.String str11 = fastDateFormat8.format((long) (short) 1);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.lang.String str20 = fastDateFormat18.toString();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale26);
        java.lang.String str28 = fastDateFormat27.toString();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale34);
        java.lang.String str36 = fastDateFormat35.toString();
        boolean boolean37 = fastDateFormat27.equals((java.lang.Object) fastDateFormat35);
        java.util.Date date39 = fastDateFormat35.parse("4:00:00 PM PST");
        java.lang.String str40 = fastDateFormat18.format(date39);
        java.lang.String str41 = fastDateFormat8.format(date39);
        java.text.ParsePosition parsePosition43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = fastDateFormat8.parseObject("FastDatePrinter[M/d/yy,en_US,America/Los_Angeles]", parsePosition43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12/31/69" + "'", str6, "12/31/69");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4:00:00 PM PST" + "'", str11, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str19, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str20, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str28, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str36, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Thursday, January 1, 1970" + "'", str40, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "4:00:00 PM PST" + "'", str41, "4:00:00 PM PST");
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.Locale locale33 = fastDatePrinter25.getLocale();
        java.util.TimeZone timeZone34 = fastDatePrinter25.getTimeZone();
        java.lang.String str35 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str35, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter21 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone8, locale19);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.TimeZone timeZone30 = fastDateFormat28.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone30);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.TimeZone timeZone37 = fastDateFormat35.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone37, locale57);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone30, locale57);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.TimeZone timeZone71 = fastDateFormat69.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.util.Locale locale76 = fastDateFormat74.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone71, locale76);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter78 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone65, locale76);
        java.util.Locale locale79 = fastDatePrinter78.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter80 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone30, locale79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale79);
        org.apache.commons.lang3.time.FastDateParser fastDateParser82 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone8, locale79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(49, 13, timeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 13");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat81);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        int int48 = fastDateParser46.adjustYear(31);
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        int int51 = fastDateParser46.adjustYear(2);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2031 + "'", int48 == 2031);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2002 + "'", int51 == 2002);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone56, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone70);
        java.lang.String str72 = fastDateFormat71.getPattern();
        java.util.Locale locale73 = fastDateFormat71.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone68, locale73);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter75 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone56, locale73);
        int int76 = fastDatePrinter75.getMaxLengthEstimate();
        boolean boolean77 = fastDateParser46.equals((java.lang.Object) fastDatePrinter75);
        int int79 = fastDateParser46.adjustYear(31);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "M/d/yy" + "'", str72, "M/d/yy");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2031 + "'", int79 == 2031);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.lang.String str50 = fastDateParser46.toString();
        java.lang.String str51 = fastDateParser46.toString();
        boolean boolean52 = fastDateParser46.isNextNumber();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str50, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone14, locale25);
        java.util.Locale locale28 = fastDatePrinter27.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone8, locale28);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.TimeZone timeZone37 = fastDateFormat35.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone37, locale57);
        java.lang.String str59 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone8, locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone8);
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone70, locale87);
        java.lang.String str90 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale87);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone8, locale87);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str59, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str90, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat91);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        boolean boolean49 = fastDateParser47.isNextNumber();
        java.util.Locale locale50 = fastDateParser47.getLocale();
        boolean boolean51 = fastDateParser47.isNextNumber();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.TimeZone timeZone57 = fastDateFormat55.getTimeZone();
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat61.getTimeZone();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.Locale locale68 = fastDateFormat66.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone63, locale68);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter70 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone57, locale68);
        java.util.Locale locale71 = fastDatePrinter70.getLocale();
        java.lang.String str72 = fastDatePrinter70.toString();
        boolean boolean73 = fastDateParser47.equals((java.lang.Object) fastDatePrinter70);
        java.util.Locale locale74 = fastDateParser47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a", locale74);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "FastDatePrinter[M/d/yy,en_US,America/Los_Angeles]" + "'", str72, "FastDatePrinter[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone13, locale24);
        java.util.Locale locale27 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone7, locale27);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone36, locale56);
        java.lang.String str58 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone7, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale56);
        java.util.Calendar calendar61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = fastDateFormat60.format(calendar61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str58, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat60);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.lang.String str38 = fastDateFormat35.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date42 = fastDateFormat40.parse("4:00:02 PM");
        java.lang.String str43 = fastDateFormat35.format(date42);
        java.lang.StringBuffer stringBuffer44 = null;
        java.lang.StringBuffer stringBuffer45 = fastDatePrinter25.format(date42, stringBuffer44);
        java.lang.String str46 = fastDatePrinter25.getPattern();
        java.util.Calendar calendar47 = null;
        java.lang.StringBuffer stringBuffer48 = null;
        java.lang.StringBuffer stringBuffer49 = fastDatePrinter25.format(calendar47, stringBuffer48);
        java.util.Calendar calendar50 = null;
        java.lang.StringBuffer stringBuffer51 = null;
        java.lang.StringBuffer stringBuffer52 = fastDatePrinter25.format(calendar50, stringBuffer51);
        java.util.Calendar calendar53 = null;
        java.lang.String str54 = fastDatePrinter25.format(calendar53);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "M/d/yy" + "'", str36, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12/31/69" + "'", str38, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1/1/70" + "'", str43, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(stringBuffer49);
        org.junit.Assert.assertNull(stringBuffer52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy");
        int int3 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.lang.String str6 = fastDateFormat2.format(0L);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone15, locale32);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter53 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone40, locale51);
        org.apache.commons.lang3.time.FastDateParser fastDateParser54 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone15, locale51);
        boolean boolean55 = fastDateParser54.isNextNumber();
        boolean boolean57 = fastDateParser54.equals((java.lang.Object) 1L);
        int int59 = fastDateParser54.adjustYear(100);
        int int61 = fastDateParser54.adjustYear(2002);
        java.util.TimeZone timeZone62 = fastDateParser54.getTimeZone();
        java.util.Locale locale63 = fastDateParser54.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]", timeZone7, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Wednesday, December 31, 1969" + "'", str6, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2000 + "'", int59 == 2000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3902 + "'", int61 == 3902);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean49 = fastDateParser46.equals((java.lang.Object) 1L);
        int int51 = fastDateParser46.adjustYear(100);
        int int53 = fastDateParser46.adjustYear(2002);
        java.util.TimeZone timeZone54 = fastDateParser46.getTimeZone();
        java.util.TimeZone timeZone55 = fastDateParser46.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3902 + "'", int53 == 3902);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone7);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone20, locale31);
        java.util.Locale locale34 = fastDatePrinter33.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone14, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone7, locale34);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone7, locale56);
        java.lang.String str58 = fastDatePrinter57.toString();
        int int59 = fastDatePrinter57.getMaxLengthEstimate();
        int int60 = fastDatePrinter57.getMaxLengthEstimate();
        java.lang.String str62 = fastDatePrinter57.format((long) (short) 10);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FastDatePrinter[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str58, "FastDatePrinter[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 31 + "'", int59 == 31);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 31 + "'", int60 == 31);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Wednesday, December 31, 1969" + "'", str62, "Wednesday, December 31, 1969");
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(3, 0, timeZone6);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.Locale locale22 = fastDateFormat20.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.Locale locale30 = fastDateFormat28.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale30);
        java.lang.String str32 = fastDateFormat31.toString();
        boolean boolean33 = fastDateFormat23.equals((java.lang.Object) fastDateFormat31);
        java.util.Date date35 = fastDateFormat31.parse("4:00:00 PM PST");
        java.lang.String str36 = fastDateFormat14.format(date35);
        java.lang.String str37 = fastDateFormat7.format(date35);
        java.lang.String str38 = fastDateFormat7.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str15, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str16, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str24, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str32, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Thursday, January 1, 1970" + "'", str36, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1/1/70 4:00:00 PM PST" + "'", str37, "1/1/70 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str38, "M/d/yy h:mm:ss a z");
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        org.apache.commons.lang3.time.FastDateParser fastDateParser53 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone14, locale50);
        boolean boolean54 = fastDateFormat6.equals((java.lang.Object) fastDateParser53);
        java.lang.String str55 = fastDateParser53.getPattern();
        java.util.regex.Pattern pattern56 = fastDateParser53.getParsePattern();
        java.util.TimeZone timeZone57 = fastDateParser53.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "12/31/69" + "'", str55, "12/31/69");
        org.junit.Assert.assertNotNull(pattern56);
        org.junit.Assert.assertEquals(pattern56.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        java.util.Calendar calendar27 = null;
        java.lang.String str28 = fastDatePrinter25.format(calendar27);
        java.lang.String str29 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str29, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone9);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter35 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone22, locale33);
        java.util.Locale locale36 = fastDatePrinter35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone16, locale36);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter38 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone9, locale36);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        java.util.Locale locale58 = fastDatePrinter57.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone9, locale58);
        java.lang.String str61 = fastDatePrinter59.format((long) (byte) 10);
        java.util.TimeZone timeZone62 = fastDatePrinter59.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.util.TimeZone timeZone76 = fastDateFormat74.getTimeZone();
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter89 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone76, locale87);
        java.util.Locale locale90 = fastDatePrinter89.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone70, locale90);
        java.lang.String str92 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale90);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = new org.apache.commons.lang3.time.FastDateFormat("1/1/70", timeZone62, locale90);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", locale90);
        java.util.TimeZone timeZone95 = fastDateFormat94.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Wednesday, December 31, 1969" + "'", str61, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str92, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat94);
        org.junit.Assert.assertNotNull(timeZone95);
        org.junit.Assert.assertEquals(timeZone95.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        int int51 = fastDateParser46.adjustYear(0);
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateParser46.parseObject("Thursday, January 1, 1970 4:00:02 PM PST", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.regex.Pattern pattern48 = fastDateParser46.getParsePattern();
        java.util.regex.Pattern pattern49 = fastDateParser46.getParsePattern();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.Locale locale58 = fastDateFormat56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale58);
        boolean boolean61 = fastDateParser46.equals((java.lang.Object) locale58);
        java.text.ParsePosition parsePosition63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = fastDateParser46.parse("FastDateFormat[M/d/yy,en_US,America/Los_Angeles]", parsePosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.Locale locale7 = fastDateFormat5.getLocale();
        java.lang.String str9 = fastDateFormat5.format(1L);
        java.util.TimeZone timeZone10 = fastDateFormat5.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone10);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.Locale locale18 = fastDateFormat16.getLocale();
        java.lang.String str20 = fastDateFormat16.format(1L);
        java.util.TimeZone timeZone21 = fastDateFormat16.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone21);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.Locale locale46 = fastDateFormat44.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone41, locale46);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter48 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone29, locale46);
        int int49 = fastDatePrinter48.getMaxLengthEstimate();
        java.util.Calendar calendar50 = null;
        java.lang.StringBuffer stringBuffer51 = null;
        java.lang.StringBuffer stringBuffer52 = fastDatePrinter48.applyRules(calendar50, stringBuffer51);
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.TimeZone timeZone58 = fastDateFormat56.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.lang.String str61 = fastDateFormat59.toString();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.Locale locale67 = fastDateFormat65.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale67);
        java.lang.String str69 = fastDateFormat68.toString();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale75);
        java.lang.String str77 = fastDateFormat76.toString();
        boolean boolean78 = fastDateFormat68.equals((java.lang.Object) fastDateFormat76);
        java.util.Date date80 = fastDateFormat76.parse("4:00:00 PM PST");
        java.lang.String str81 = fastDateFormat59.format(date80);
        java.lang.String str82 = fastDatePrinter48.format(date80);
        java.lang.String str83 = fastDateFormat22.format(date80);
        java.util.Locale locale84 = fastDateFormat22.getLocale();
        java.util.Locale locale85 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale85);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = new org.apache.commons.lang3.time.FastDateFormat("MMM d, yyyy h:mm:ss a z", timeZone10, locale85);
        java.util.Calendar calendar88 = null;
        java.lang.StringBuffer stringBuffer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer90 = fastDateFormat87.format(calendar88, stringBuffer89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12/31/69" + "'", str9, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "12/31/69" + "'", str20, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "M/d/yy" + "'", str40, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(stringBuffer52);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str60, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str61, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str69, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str77, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Thursday, January 1, 1970" + "'", str81, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Jan 1, 1970" + "'", str83, "Jan 1, 1970");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat86);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        java.util.TimeZone timeZone29 = fastDatePrinter25.getTimeZone();
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDatePrinter25.format((long) 3, stringBuffer31);
        java.lang.StringBuffer stringBuffer34 = null;
        java.lang.StringBuffer stringBuffer35 = fastDatePrinter25.format((long) (short) 0, stringBuffer34);
        int int36 = fastDatePrinter25.getMaxLengthEstimate();
        java.lang.StringBuffer stringBuffer38 = null;
        java.lang.StringBuffer stringBuffer39 = fastDatePrinter25.format((long) (short) 1, stringBuffer38);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.util.Locale locale43 = fastDateFormat42.getLocale();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.Locale locale49 = fastDateFormat47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale49);
        java.lang.String str51 = fastDateFormat50.toString();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale57);
        java.lang.String str59 = fastDateFormat58.toString();
        boolean boolean60 = fastDateFormat50.equals((java.lang.Object) fastDateFormat58);
        java.util.Date date62 = fastDateFormat58.parse("4:00:00 PM PST");
        java.lang.String str63 = fastDateFormat42.format(date62);
        java.lang.StringBuffer stringBuffer64 = null;
        java.lang.StringBuffer stringBuffer65 = fastDatePrinter25.format(date62, stringBuffer64);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer32);
        org.junit.Assert.assertNull(stringBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(stringBuffer39);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str51, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str59, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1/1/70" + "'", str63, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer65);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone9);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter35 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone22, locale33);
        java.util.Locale locale36 = fastDatePrinter35.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone16, locale36);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter38 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone9, locale36);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        java.util.Locale locale58 = fastDatePrinter57.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone9, locale58);
        java.lang.String str61 = fastDatePrinter59.format((long) (byte) 10);
        java.util.TimeZone timeZone62 = fastDatePrinter59.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone69, locale74);
        java.util.TimeZone timeZone78 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone78);
        java.lang.String str80 = fastDateFormat79.getPattern();
        java.util.TimeZone timeZone81 = fastDateFormat79.getTimeZone();
        java.util.TimeZone timeZone83 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone83);
        java.lang.String str85 = fastDateFormat84.getPattern();
        java.util.Locale locale86 = fastDateFormat84.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone81, locale86);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69, locale86);
        org.apache.commons.lang3.time.FastDateParser fastDateParser89 = new org.apache.commons.lang3.time.FastDateParser("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone62, locale86);
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter91 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone62, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Wednesday, December 31, 1969" + "'", str61, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "M/d/yy" + "'", str80, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "M/d/yy" + "'", str85, "M/d/yy");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertNotNull(fastDateFormat88);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone8, locale25);
        java.util.Calendar calendar28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDatePrinter27.applyRules(calendar28, stringBuffer29);
        java.util.TimeZone timeZone31 = fastDatePrinter27.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone31);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.TimeZone timeZone52 = fastDateFormat50.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone52, locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone40, locale57);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.TimeZone timeZone71 = fastDateFormat69.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone73);
        java.lang.String str75 = fastDateFormat74.getPattern();
        java.util.Locale locale76 = fastDateFormat74.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone71, locale76);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter78 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone65, locale76);
        org.apache.commons.lang3.time.FastDateParser fastDateParser79 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone40, locale76);
        boolean boolean80 = fastDateParser79.isNextNumber();
        boolean boolean81 = fastDateParser79.isNextNumber();
        java.util.Locale locale82 = fastDateParser79.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:02 PM PST", timeZone31, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(stringBuffer30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "M/d/yy" + "'", str64, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "M/d/yy" + "'", str75, "M/d/yy");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        java.lang.String str49 = fastDateParser46.toString();
        java.util.TimeZone timeZone50 = fastDateParser46.getTimeZone();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.lang.String str52 = fastDateParser46.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str49, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        java.util.Date date3 = fastDateFormat1.parse("12/31/69 4:00:00 PM PST");
        java.lang.StringBuffer stringBuffer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer6 = fastDateFormat1.format((long) (byte) 1, stringBuffer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 00:00:00 PST 1969");
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.lang.String str3 = fastDateFormat1.format((long) 2000);
        java.lang.Object obj5 = fastDateFormat1.parseObject("4:00:02 PM PST");
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4:00:02 PM" + "'", str3, "4:00:02 PM");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "Thu Jan 01 16:00:02 PST 1970");
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.regex.Pattern pattern48 = fastDateParser46.getParsePattern();
        java.lang.String str49 = fastDateParser46.toString();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        int int52 = fastDateParser46.adjustYear(17);
        java.text.ParsePosition parsePosition54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = fastDateParser46.parseObject("Wednesday, December 31, 1969 3:59:59 PM PST", parsePosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str49, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2017 + "'", int52 == 2017);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone21, locale38);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.TimeZone timeZone52 = fastDateFormat50.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone52, locale57);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone46, locale57);
        org.apache.commons.lang3.time.FastDateParser fastDateParser60 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone21, locale57);
        boolean boolean62 = fastDateParser60.equals((java.lang.Object) 'a');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.lang.String str66 = fastDateFormat64.format(0L);
        java.util.Locale locale67 = fastDateFormat64.getLocale();
        boolean boolean68 = fastDateParser60.equals((java.lang.Object) locale67);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = new org.apache.commons.lang3.time.FastDateFormat("M/d/yy h:mm a", timeZone7, locale67);
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.lang.String str78 = fastDateFormat75.format((long) 0);
        java.util.Locale locale79 = fastDateFormat75.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale79);
        java.util.Locale locale81 = fastDateFormat80.getLocale();
        java.lang.String str82 = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone7, true, 0, locale81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2002, timeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 2002");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "4:00:00 PM PST" + "'", str66, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "M/d/yy" + "'", str76, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "12/31/69" + "'", str78, "12/31/69");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PDT" + "'", str82, "PDT");
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean49 = fastDateParser48.isNextNumber();
        boolean boolean50 = fastDateParser48.isNextNumber();
        java.util.Locale locale51 = fastDateParser48.getLocale();
        boolean boolean52 = fastDateParser48.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean55 = fastDateParser48.equals((java.lang.Object) 1);
        java.lang.Object obj57 = fastDateParser48.parseObject("12/31/69");
        java.util.TimeZone timeZone58 = fastDateParser48.getTimeZone();
        java.util.Locale locale59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone58, locale59);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.util.Locale locale68 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", timeZone58, locale68);
        int int70 = fastDateFormat69.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.Locale locale14 = fastDateFormat12.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9, locale14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone34, locale45);
        org.apache.commons.lang3.time.FastDateParser fastDateParser48 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone9, locale45);
        boolean boolean50 = fastDateParser48.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern51 = fastDateParser48.getParsePattern();
        int int53 = fastDateParser48.adjustYear(2000);
        java.util.Locale locale54 = fastDateParser48.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(13, 6, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 6");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3900 + "'", int53 == 3900);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.lang.String str3 = fastDateFormat1.format(0L);
        java.util.Locale locale4 = fastDateFormat1.getLocale();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.lang.String str10 = fastDateFormat7.getPattern();
        java.lang.Object obj11 = null;
        boolean boolean12 = fastDateFormat7.equals(obj11);
        java.util.TimeZone timeZone13 = fastDateFormat7.getTimeZone();
        java.lang.String str15 = fastDateFormat7.format(100L);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        java.lang.String str21 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.Locale locale33 = fastDateFormat31.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone28, locale33);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.Locale locale45 = fastDateFormat43.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone40, locale45);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter47 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone28, locale45);
        java.util.Calendar calendar48 = null;
        java.lang.StringBuffer stringBuffer49 = null;
        java.lang.StringBuffer stringBuffer50 = fastDatePrinter47.applyRules(calendar48, stringBuffer49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date54 = fastDateFormat52.parse("4:00:02 PM");
        java.lang.String str55 = fastDatePrinter47.format(date54);
        java.lang.String str56 = fastDateFormat18.format(date54);
        java.lang.String str57 = fastDateFormat7.format(date54);
        java.lang.String str58 = fastDateFormat1.format(date54);
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4:00:00 PM PST" + "'", str3, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "12/31/69" + "'", str15, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNull(stringBuffer50);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1/1/70" + "'", str56, "1/1/70");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1/1/70" + "'", str57, "1/1/70");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "4:00:02 PM PST" + "'", str58, "4:00:02 PM PST");
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale31);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        org.apache.commons.lang3.time.FastDateParser fastDateParser53 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone14, locale50);
        boolean boolean54 = fastDateFormat6.equals((java.lang.Object) fastDateParser53);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.lang.String str62 = fastDateFormat59.format((long) 0);
        java.util.Locale locale63 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale63);
        java.lang.String str65 = fastDateFormat64.toString();
        java.lang.String str66 = fastDateFormat64.toString();
        java.util.TimeZone timeZone67 = fastDateFormat64.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", timeZone67);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator69 = fastDateFormat6.formatToCharacterIterator((java.lang.Object) "12/31/69");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.String");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "12/31/69" + "'", str62, "12/31/69");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str65, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str66, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.text.ParsePosition parsePosition4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = fastDateFormat2.parse("4:00:03 PM PST", parsePosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone39, locale50);
        java.util.Locale locale53 = fastDatePrinter52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone33, locale53);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (byte) 0, 0, timeZone8, locale53);
        java.text.ParsePosition parsePosition57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = fastDateFormat55.parseObject("3:59:59 PM PST", parsePosition57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(fastDateFormat55);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.format(calendar26, stringBuffer27);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.TimeZone timeZone35 = fastDateFormat33.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(3, 0, timeZone35);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.lang.String str45 = fastDateFormat43.toString();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale51);
        java.lang.String str53 = fastDateFormat52.toString();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.Locale locale59 = fastDateFormat57.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale59);
        java.lang.String str61 = fastDateFormat60.toString();
        boolean boolean62 = fastDateFormat52.equals((java.lang.Object) fastDateFormat60);
        java.util.Date date64 = fastDateFormat60.parse("4:00:00 PM PST");
        java.lang.String str65 = fastDateFormat43.format(date64);
        java.lang.String str66 = fastDateFormat36.format(date64);
        java.lang.StringBuffer stringBuffer67 = null;
        java.lang.StringBuffer stringBuffer68 = fastDatePrinter25.format(date64, stringBuffer67);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "M/d/yy" + "'", str34, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str44, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str45, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str53, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str61, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Thursday, January 1, 1970" + "'", str65, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1/1/70 4:00:00 PM PST" + "'", str66, "1/1/70 4:00:00 PM PST");
        org.junit.Assert.assertNull(stringBuffer68);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        java.util.TimeZone timeZone1 = null;
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.Locale locale16 = fastDateFormat14.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone11, locale16);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.Locale locale28 = fastDateFormat26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone23, locale28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone11, locale28);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.Locale locale47 = fastDateFormat45.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone42, locale47);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter49 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone36, locale47);
        org.apache.commons.lang3.time.FastDateParser fastDateParser50 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone11, locale47);
        boolean boolean51 = fastDateParser50.isNextNumber();
        boolean boolean52 = fastDateParser50.isNextNumber();
        java.util.Locale locale53 = fastDateParser50.getLocale();
        boolean boolean54 = fastDateParser50.isNextNumber();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        boolean boolean57 = fastDateParser50.equals((java.lang.Object) 1);
        java.lang.Object obj59 = fastDateParser50.parseObject("12/31/69");
        java.util.TimeZone timeZone60 = fastDateParser50.getTimeZone();
        java.util.Locale locale61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone60, locale61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.Locale locale68 = fastDateFormat66.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale68);
        java.util.Locale locale70 = fastDateFormat69.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", timeZone60, locale70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) '4', timeZone1, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "M/d/yy" + "'", str27, "M/d/yy");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.lang.String str52 = fastDateParser46.getPattern();
        java.lang.String str53 = fastDateParser46.toString();
        java.util.regex.Pattern pattern54 = fastDateParser46.getParsePattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12/31/69" + "'", str52, "12/31/69");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str53, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(pattern54);
        org.junit.Assert.assertEquals(pattern54.toString(), "12/31/69");
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        boolean boolean50 = fastDateParser46.isNextNumber();
        boolean boolean52 = fastDateParser46.equals((java.lang.Object) (-1.0f));
        java.util.TimeZone timeZone53 = fastDateParser46.getTimeZone();
        java.lang.String str54 = fastDateParser46.toString();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str54, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.util.Locale locale3 = fastDateFormat2.getLocale();
        java.lang.String str4 = fastDateFormat2.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str4, "EEEE, MMMM d, yyyy");
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone12, locale23);
        java.util.Locale locale26 = fastDatePrinter25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone6, locale26);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone34 = fastDateFormat32.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.Locale locale39 = fastDateFormat37.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone34, locale39);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter53 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone34, locale51);
        java.lang.String str54 = fastDatePrinter53.getPattern();
        java.util.Locale locale55 = fastDatePrinter53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = new org.apache.commons.lang3.time.FastDateFormat("MMMM d, yyyy", timeZone6, locale55);
        java.lang.String str58 = fastDateFormat56.format(0L);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "December 31, 1969" + "'", str58, "December 31, 1969");
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date9 = fastDateFormat7.parse("4:00:02 PM");
        java.lang.String str10 = fastDateFormat2.format(date9);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.lang.String str16 = fastDateFormat13.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date20 = fastDateFormat18.parse("4:00:02 PM");
        java.lang.String str21 = fastDateFormat13.format(date20);
        java.lang.String str22 = fastDateFormat2.format(date20);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12/31/69" + "'", str5, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1/1/70" + "'", str10, "1/1/70");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "12/31/69" + "'", str16, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1/1/70" + "'", str21, "1/1/70");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1/1/70" + "'", str22, "1/1/70");
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date33 = fastDateFormat31.parse("4:00:02 PM");
        java.lang.String str34 = fastDatePrinter26.format(date33);
        java.util.TimeZone timeZone35 = fastDatePrinter26.getTimeZone();
        java.util.Locale locale38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale38);
        java.lang.String str41 = fastDateFormat39.format(1L);
        java.lang.String str42 = fastDateFormat39.getPattern();
        java.util.Locale locale43 = fastDateFormat39.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter44 = new org.apache.commons.lang3.time.FastDatePrinter("1/1/70", timeZone35, locale43);
        java.lang.String str45 = fastDatePrinter44.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str41, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str42, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1/1/70" + "'", str45, "1/1/70");
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = fastDateFormat2.parse("4:00:02 PM");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"4:00:02 PM\" does not match (\\p{IsNd}++)/(\\p{IsNd}++)/(\\p{IsNd}++)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12/31/69" + "'", str7, "12/31/69");
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.Object obj6 = null;
        boolean boolean7 = fastDateFormat2.equals(obj6);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone14 = fastDateFormat12.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone14, locale19);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone26 = fastDateFormat24.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.Locale locale31 = fastDateFormat29.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone26, locale31);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter33 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone14, locale31);
        java.util.Calendar calendar34 = null;
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDatePrinter33.applyRules(calendar34, stringBuffer35);
        java.util.TimeZone timeZone37 = fastDatePrinter33.getTimeZone();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDatePrinter33.format((long) 3, stringBuffer39);
        boolean boolean41 = fastDateFormat2.equals((java.lang.Object) fastDatePrinter33);
        java.lang.String str43 = fastDateFormat2.format((long) (byte) 10);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.lang.String str52 = fastDateFormat50.toString();
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        java.util.Locale locale58 = fastDateFormat56.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale66);
        java.lang.String str68 = fastDateFormat67.toString();
        boolean boolean69 = fastDateFormat59.equals((java.lang.Object) fastDateFormat67);
        java.util.Date date71 = fastDateFormat67.parse("4:00:00 PM PST");
        java.lang.String str72 = fastDateFormat50.format(date71);
        java.lang.String str73 = fastDateFormat2.format(date71);
        java.lang.String str74 = fastDateFormat2.toString();
        java.util.Calendar calendar75 = null;
        java.lang.StringBuffer stringBuffer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fastDateFormat2.applyRules(calendar75, stringBuffer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "M/d/yy" + "'", str13, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "12/31/69" + "'", str43, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str51, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str52, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "M/d/yy" + "'", str57, "M/d/yy");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str60, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str68, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Thursday, January 1, 1970" + "'", str72, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1/1/70" + "'", str73, "1/1/70");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]" + "'", str74, "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        boolean boolean50 = fastDateParser46.isNextNumber();
        boolean boolean52 = fastDateParser46.equals((java.lang.Object) (-1.0f));
        java.util.regex.Pattern pattern53 = fastDateParser46.getParsePattern();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date55 = fastDateParser46.parse("1/1/70 4:00:00 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"1/1/70 4:00:00 PM PST\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pattern53);
        org.junit.Assert.assertEquals(pattern53.toString(), "12/31/69");
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date32 = fastDateFormat30.parse("4:00:02 PM");
        java.lang.String str33 = fastDatePrinter25.format(date32);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDatePrinter25.format((long) (short) -1, stringBuffer35);
        java.util.Calendar calendar37 = null;
        java.lang.String str38 = fastDatePrinter25.format(calendar37);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        java.util.Calendar calendar26 = null;
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDatePrinter25.applyRules(calendar26, stringBuffer27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date32 = fastDateFormat30.parse("4:00:02 PM");
        java.lang.String str33 = fastDatePrinter25.format(date32);
        java.util.TimeZone timeZone34 = fastDatePrinter25.getTimeZone();
        java.util.Calendar calendar35 = null;
        java.lang.String str36 = fastDatePrinter25.format(calendar35);
        java.util.Calendar calendar37 = null;
        java.lang.StringBuffer stringBuffer38 = null;
        java.lang.StringBuffer stringBuffer39 = fastDatePrinter25.applyRules(calendar37, stringBuffer38);
        java.util.TimeZone timeZone40 = fastDatePrinter25.getTimeZone();
        java.lang.String str41 = fastDatePrinter25.toString();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(stringBuffer39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "FastDatePrinter[,en_US,America/Los_Angeles]" + "'", str41, "FastDatePrinter[,en_US,America/Los_Angeles]");
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone5);
        java.util.Locale locale7 = fastDateFormat6.getLocale();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.lang.Object obj17 = fastDateFormat14.parseObject("12:00:00 AM PST");
        java.lang.String str18 = fastDateFormat6.format(obj17);
        java.util.TimeZone timeZone19 = fastDateFormat6.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str15, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Thursday, January 1, 1970" + "'", str18, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone8);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter34 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone21, locale32);
        java.util.Locale locale35 = fastDatePrinter34.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone15, locale35);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter37 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone8, locale35);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter56 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone43, locale54);
        java.util.Locale locale57 = fastDatePrinter56.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone8, locale57);
        java.lang.String str60 = fastDatePrinter58.format((long) (byte) 10);
        java.util.TimeZone timeZone61 = fastDatePrinter58.getTimeZone();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.TimeZone timeZone70 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.Locale locale75 = fastDateFormat73.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone70, locale75);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone82 = fastDateFormat80.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone84);
        java.lang.String str86 = fastDateFormat85.getPattern();
        java.util.Locale locale87 = fastDateFormat85.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone82, locale87);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone70, locale87);
        java.lang.String str90 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale87);
        org.apache.commons.lang3.time.FastDateParser fastDateParser91 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone61, locale87);
        java.util.TimeZone timeZone92 = fastDateParser91.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Wednesday, December 31, 1969" + "'", str60, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "M/d/yy" + "'", str74, "M/d/yy");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat76);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "M/d/yy" + "'", str81, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "M/d/yy" + "'", str86, "M/d/yy");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat88);
        org.junit.Assert.assertNotNull(fastDateFormat89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str90, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale13);
        java.lang.String str15 = fastDateFormat14.toString();
        boolean boolean16 = fastDateFormat6.equals((java.lang.Object) fastDateFormat14);
        java.lang.String str18 = fastDateFormat14.format((long) 3935);
        java.lang.String str19 = fastDateFormat14.toString();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str15, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "4:00:03 PM PST" + "'", str18, "4:00:03 PM PST");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str19, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.util.Locale locale49 = fastDateParser46.getLocale();
        java.lang.String str50 = fastDateParser46.toString();
        java.lang.String str51 = fastDateParser46.toString();
        java.lang.String str52 = fastDateParser46.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = fastDateParser46.getFieldWidth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str50, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str51, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateParser[12/31/69,en_US,America/Los_Angeles]" + "'", str52, "FastDateParser[12/31/69,en_US,America/Los_Angeles]");
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone13, locale24);
        java.util.Locale locale27 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone7, locale27);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone36, locale56);
        java.lang.String str58 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone7, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = fastDateFormat60.parseObject("12/31/69 4:00:00 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str58, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat60);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        java.util.TimeZone timeZone2 = null;
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat7.getTimeZone();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter22 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone9, locale20);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.util.TimeZone timeZone31 = fastDateFormat29.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.Locale locale55 = fastDateFormat53.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone50, locale55);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter57 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone44, locale55);
        java.util.Locale locale58 = fastDatePrinter57.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone38, locale58);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter60 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone31, locale58);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.TimeZone timeZone66 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.util.TimeZone timeZone72 = fastDateFormat70.getTimeZone();
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.util.Locale locale77 = fastDateFormat75.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone72, locale77);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter79 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone66, locale77);
        java.util.Locale locale80 = fastDatePrinter79.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter81 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone31, locale80);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale80);
        org.apache.commons.lang3.time.FastDateParser fastDateParser83 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone9, locale80);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (byte) 0, 0, timeZone2, locale80);
        java.util.Calendar calendar85 = null;
        java.lang.StringBuffer stringBuffer86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer87 = fastDateFormat84.format(calendar85, stringBuffer86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "M/d/yy" + "'", str8, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "M/d/yy" + "'", str30, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "M/d/yy" + "'", str71, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "M/d/yy" + "'", str76, "M/d/yy");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat82);
        org.junit.Assert.assertNotNull(fastDateFormat84);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter27 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone8, locale25);
        java.util.Calendar calendar28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDatePrinter27.applyRules(calendar28, stringBuffer29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date34 = fastDateFormat32.parse("4:00:02 PM");
        java.lang.String str35 = fastDatePrinter27.format(date34);
        java.util.TimeZone timeZone36 = fastDatePrinter27.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.Locale locale42 = fastDateFormat40.getLocale();
        java.lang.String str44 = fastDateFormat40.format(1L);
        java.util.Locale locale45 = fastDateFormat40.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69", locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone36, locale45);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.TimeZone timeZone54 = fastDateFormat52.getTimeZone();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.Locale locale59 = fastDateFormat57.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone54, locale59);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.TimeZone timeZone66 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.Locale locale71 = fastDateFormat69.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone66, locale71);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter73 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone54, locale71);
        java.lang.String str74 = fastDatePrinter73.getPattern();
        java.util.Locale locale75 = fastDatePrinter73.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter76 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone36, locale75);
        java.util.Calendar calendar77 = null;
        java.lang.StringBuffer stringBuffer78 = null;
        java.lang.StringBuffer stringBuffer79 = fastDatePrinter76.format(calendar77, stringBuffer78);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(stringBuffer30);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "12/31/69" + "'", str44, "12/31/69");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "M/d/yy" + "'", str70, "M/d/yy");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNull(stringBuffer79);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.TimeZone timeZone5 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone5);
        java.lang.String str8 = fastDateFormat6.format((long) '4');
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter40 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone27, locale38);
        java.util.Locale locale41 = fastDatePrinter40.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone21, locale41);
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.TimeZone timeZone56 = fastDateFormat54.getTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.TimeZone timeZone62 = fastDateFormat60.getTimeZone();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone64);
        java.lang.String str66 = fastDateFormat65.getPattern();
        java.util.Locale locale67 = fastDateFormat65.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone62, locale67);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter69 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone56, locale67);
        java.util.Locale locale70 = fastDatePrinter69.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone50, locale70);
        java.lang.String str72 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale70);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone21, locale70);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone21);
        java.util.Locale locale77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 0, (int) (short) 0, locale77);
        java.lang.String str80 = fastDateFormat78.format(1L);
        java.lang.String str81 = fastDateFormat78.getPattern();
        java.util.Locale locale82 = fastDateFormat78.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = new org.apache.commons.lang3.time.FastDateFormat("M/d/yy", timeZone21, locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone10, false, (int) (byte) 100, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Wednesday, December 31, 1969" + "'", str8, "Wednesday, December 31, 1969");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str9, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "M/d/yy" + "'", str66, "M/d/yy");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str72, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Wednesday, December 31, 1969 4:00:00 PM PST" + "'", str80, "Wednesday, December 31, 1969 4:00:00 PM PST");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z" + "'", str81, "EEEE, MMMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) 'a');
        boolean boolean49 = fastDateParser46.isNextNumber();
        java.util.Locale locale50 = fastDateParser46.getLocale();
        java.util.regex.Pattern pattern51 = fastDateParser46.getParsePattern();
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = fastDateParser46.parseObject("EEEE, MMMM d, yyyy", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "12/31/69");
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.lang.String str4 = fastDateFormat3.getPattern();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.Object obj9 = fastDateFormat6.parseObject("12:00:00 AM PST");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = fastDateFormat6.parse("12/31/69 4:00:00 PM PST");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"12/31/69 4:00:00 PM PST\" does not match (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "M/d/yy" + "'", str4, "M/d/yy");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str7, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        java.util.Locale locale35 = fastDateFormat33.getLocale();
        org.apache.commons.lang3.time.FastDateParser fastDateParser36 = new org.apache.commons.lang3.time.FastDateParser("MMM d, yyyy h:mm:ss a z", timeZone7, locale35);
        java.util.regex.Pattern pattern37 = fastDateParser36.getParsePattern();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date39 = fastDateParser36.parse("Pacific Standard Time");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"Pacific Standard Time\" does not match (Apr|April|Aug|August|Dec|December|Feb|February|Jan|January|Jul|July|Jun|June|Mar|March|May|May|Nov|November|Oct|October|Sep|September) (\\p{IsNd}++), (\\p{IsNd}++) (\\p{IsNd}++):(\\p{IsNd}++):(\\p{IsNd}++) (AM|PM) (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str34, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(pattern37);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        boolean boolean50 = fastDateParser47.equals((java.lang.Object) 1L);
        int int52 = fastDateParser47.adjustYear(100);
        int int54 = fastDateParser47.adjustYear(2002);
        java.util.TimeZone timeZone55 = fastDateParser47.getTimeZone();
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat61.getTimeZone();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.Locale locale74 = fastDateFormat72.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone69, locale74);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter76 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone63, locale74);
        java.util.TimeZone timeZone77 = fastDatePrinter76.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone77);
        java.util.TimeZone timeZone79 = fastDateFormat78.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0);
        java.util.Locale locale82 = fastDateFormat81.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone79, locale82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 10, timeZone55, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2000 + "'", int52 == 2000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3902 + "'", int54 == 3902);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "M/d/yy" + "'", str62, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat83);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone13, locale24);
        java.util.Locale locale27 = fastDatePrinter26.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone7, locale27);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone50);
        java.lang.String str52 = fastDateFormat51.getPattern();
        java.util.Locale locale53 = fastDateFormat51.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone48, locale53);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter55 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone42, locale53);
        java.util.Locale locale56 = fastDatePrinter55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone36, locale56);
        java.lang.String str58 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 2, (java.lang.Integer) 1, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone7, locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone7);
        java.lang.Object obj62 = fastDateFormat60.parseObject("Wednesday, December 31, 1969");
        java.lang.String str63 = fastDateFormat60.toString();
        java.text.ParsePosition parsePosition65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = fastDateFormat60.parseObject("FastDatePrinter[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]", parsePosition65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "M/d/yy" + "'", str35, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "M/d/yy" + "'", str52, "M/d/yy");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MMM d, yyyy h:mm:ss a z" + "'", str58, "MMM d, yyyy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "Wed Dec 31 00:00:00 PST 1969");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str63, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        java.lang.String str47 = fastDateParser46.getPattern();
        java.util.Locale locale48 = fastDateParser46.getLocale();
        java.lang.Object obj50 = fastDateParser46.parseObject("12/31/69 3:59 PM");
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "12/31/69" + "'", str47, "12/31/69");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        int[] intArray33 = new int[] { (byte) 10, (short) 100, 2, (byte) 10, (byte) 100 };
        java.lang.String str34 = fastDatePrinter25.parseToken("FastDateParser[12/31/69,en_US,America/Los_Angeles]", intArray33);
        boolean boolean36 = fastDatePrinter25.equals((java.lang.Object) "Wednesday, December 31, 1969 3:59:59 PM PST");
        java.util.Calendar calendar37 = null;
        java.lang.StringBuffer stringBuffer38 = null;
        java.lang.StringBuffer stringBuffer39 = fastDatePrinter25.format(calendar37, stringBuffer38);
        java.util.TimeZone timeZone40 = fastDatePrinter25.getTimeZone();
        java.util.TimeZone timeZone41 = fastDatePrinter25.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 100, 2, 10, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "r" + "'", str34, "r");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(stringBuffer39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Locale locale13 = fastDateFormat11.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone8, locale13);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone20 = fastDateFormat18.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.Locale locale25 = fastDateFormat23.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone20, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8, locale25);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.Locale locale44 = fastDateFormat42.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone39, locale44);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter46 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone33, locale44);
        org.apache.commons.lang3.time.FastDateParser fastDateParser47 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone8, locale44);
        boolean boolean48 = fastDateParser47.isNextNumber();
        java.util.regex.Pattern pattern49 = fastDateParser47.getParsePattern();
        java.util.Locale locale50 = fastDateParser47.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale50);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Calendar calendar53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = fastDateFormat51.format(calendar53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "M/d/yy" + "'", str38, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "M/d/yy" + "'", str43, "M/d/yy");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "12/31/69");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", timeZone1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.lang.Object obj16 = fastDateFormat14.clone();
        java.lang.String str17 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone23);
        java.lang.String str26 = fastDateFormat24.format((long) '4');
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.Locale locale50 = fastDateFormat48.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone45, locale50);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter52 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone33, locale50);
        java.util.Calendar calendar53 = null;
        java.lang.StringBuffer stringBuffer54 = null;
        java.lang.StringBuffer stringBuffer55 = fastDatePrinter52.applyRules(calendar53, stringBuffer54);
        java.util.TimeZone timeZone56 = fastDatePrinter52.getTimeZone();
        java.lang.StringBuffer stringBuffer58 = null;
        java.lang.StringBuffer stringBuffer59 = fastDatePrinter52.format((long) 3, stringBuffer58);
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.lang.String str65 = fastDateFormat62.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date69 = fastDateFormat67.parse("4:00:02 PM");
        java.lang.String str70 = fastDateFormat62.format(date69);
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDatePrinter52.format(date69, stringBuffer71);
        java.lang.String str73 = fastDateFormat24.format(date69);
        java.lang.String str74 = fastDateFormat14.format(date69);
        java.lang.String str75 = fastDateFormat9.format(date69);
        java.lang.StringBuffer stringBuffer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fastDateFormat2.format(date69, stringBuffer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "M/d/yy" + "'", str7, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str10, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Wednesday, December 31, 1969" + "'", str26, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "M/d/yy" + "'", str49, "M/d/yy");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNull(stringBuffer55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer59);
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "M/d/yy" + "'", str63, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "12/31/69" + "'", str65, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1/1/70" + "'", str70, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Thursday, January 1, 1970" + "'", str73, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1/1/70" + "'", str74, "1/1/70");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Thursday, January 1, 1970" + "'", str75, "Thursday, January 1, 1970");
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.Locale locale6 = fastDateFormat4.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale6);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.Locale locale20 = fastDateFormat18.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone15, locale20);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.Locale locale32 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone27, locale32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone15, locale32);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.util.TimeZone timeZone40 = fastDateFormat38.getTimeZone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.Locale locale51 = fastDateFormat49.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone46, locale51);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter53 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone40, locale51);
        org.apache.commons.lang3.time.FastDateParser fastDateParser54 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone15, locale51);
        boolean boolean55 = fastDateFormat7.equals((java.lang.Object) fastDateParser54);
        java.util.TimeZone timeZone56 = fastDateParser54.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(100, timeZone56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "M/d/yy" + "'", str14, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "M/d/yy" + "'", str19, "M/d/yy");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "M/d/yy" + "'", str39, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Pacific Standard Time");
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.Locale locale11 = fastDateFormat9.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone6, locale11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        java.util.TimeZone timeZone18 = fastDateFormat16.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.Locale locale23 = fastDateFormat21.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale23);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter25 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone6, locale23);
        int int26 = fastDatePrinter25.getMaxLengthEstimate();
        int[] intArray33 = new int[] { (byte) 10, (short) 100, 2, (byte) 10, (byte) 100 };
        java.lang.String str34 = fastDatePrinter25.parseToken("FastDateParser[12/31/69,en_US,America/Los_Angeles]", intArray33);
        int int35 = fastDatePrinter25.getMaxLengthEstimate();
        java.util.Locale locale36 = fastDatePrinter25.getLocale();
        java.lang.String str38 = fastDatePrinter25.format((long) 20);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(3, 0, timeZone45);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.TimeZone timeZone52 = fastDateFormat50.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.lang.String str55 = fastDateFormat53.toString();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.Locale locale61 = fastDateFormat59.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale61);
        java.lang.String str63 = fastDateFormat62.toString();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.Locale locale69 = fastDateFormat67.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale69);
        java.lang.String str71 = fastDateFormat70.toString();
        boolean boolean72 = fastDateFormat62.equals((java.lang.Object) fastDateFormat70);
        java.util.Date date74 = fastDateFormat70.parse("4:00:00 PM PST");
        java.lang.String str75 = fastDateFormat53.format(date74);
        java.lang.String str76 = fastDateFormat46.format(date74);
        java.lang.StringBuffer stringBuffer77 = null;
        java.lang.StringBuffer stringBuffer78 = fastDatePrinter25.format(date74, stringBuffer77);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "M/d/yy" + "'", str17, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 100, 2, 10, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "r" + "'", str34, "r");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str54, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]" + "'", str55, "FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str63, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "M/d/yy" + "'", str68, "M/d/yy");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str71, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 16:00:00 PST 1970");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Thursday, January 1, 1970" + "'", str75, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1/1/70 4:00:00 PM PST" + "'", str76, "1/1/70 4:00:00 PM PST");
        org.junit.Assert.assertNull(stringBuffer78);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date48 = fastDateParser46.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone3);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat4.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone6);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone13 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.util.TimeZone timeZone25 = fastDateFormat23.getTimeZone();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.Locale locale30 = fastDateFormat28.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone25, locale30);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter32 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone19, locale30);
        java.util.Locale locale33 = fastDatePrinter32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone13, locale33);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter35 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone6, locale33);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone43 = fastDateFormat41.getTimeZone();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.Locale locale48 = fastDateFormat46.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone43, locale48);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.TimeZone timeZone55 = fastDateFormat53.getTimeZone();
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        java.util.Locale locale60 = fastDateFormat58.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone55, locale60);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone43, locale60);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.TimeZone timeZone74 = fastDateFormat72.getTimeZone();
        java.util.TimeZone timeZone76 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone76);
        java.lang.String str78 = fastDateFormat77.getPattern();
        java.util.Locale locale79 = fastDateFormat77.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone74, locale79);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter81 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone68, locale79);
        org.apache.commons.lang3.time.FastDateParser fastDateParser82 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone43, locale79);
        boolean boolean84 = fastDateParser82.equals((java.lang.Object) 'a');
        java.util.regex.Pattern pattern85 = fastDateParser82.getParsePattern();
        int int87 = fastDateParser82.adjustYear(2000);
        java.lang.String str88 = fastDateParser82.getPattern();
        java.lang.StringBuffer stringBuffer89 = null;
        java.text.FieldPosition fieldPosition90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer91 = fastDatePrinter35.format((java.lang.Object) str88, stringBuffer89, fieldPosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.String");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "M/d/yy" + "'", str12, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "M/d/yy" + "'", str24, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "M/d/yy" + "'", str29, "M/d/yy");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "M/d/yy" + "'", str47, "M/d/yy");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "M/d/yy" + "'", str54, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "M/d/yy" + "'", str59, "M/d/yy");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "M/d/yy" + "'", str67, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "M/d/yy" + "'", str78, "M/d/yy");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(pattern85);
        org.junit.Assert.assertEquals(pattern85.toString(), "12/31/69");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3900 + "'", int87 == 3900);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "12/31/69" + "'", str88, "12/31/69");
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        boolean boolean48 = fastDateParser46.isNextNumber();
        java.lang.Object obj50 = fastDateParser46.parseObject("12/31/69");
        java.text.ParsePosition parsePosition52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = fastDateParser46.parse("Pacific Daylight Time", parsePosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "Thu Jan 01 00:00:00 PST 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "Thu Jan 01 00:00:00 PST 1970");
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        int int27 = fastDatePrinter26.getMaxLengthEstimate();
        int[] intArray34 = new int[] { (byte) 10, (short) 100, 2, (byte) 10, (byte) 100 };
        java.lang.String str35 = fastDatePrinter26.parseToken("FastDateParser[12/31/69,en_US,America/Los_Angeles]", intArray34);
        boolean boolean37 = fastDatePrinter26.equals((java.lang.Object) "Wednesday, December 31, 1969 3:59:59 PM PST");
        java.util.Calendar calendar38 = null;
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDatePrinter26.format(calendar38, stringBuffer39);
        java.util.TimeZone timeZone41 = fastDatePrinter26.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone49, locale54);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.Locale locale66 = fastDateFormat64.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone61, locale66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49, locale66);
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone71);
        java.lang.String str73 = fastDateFormat72.getPattern();
        java.util.TimeZone timeZone74 = fastDateFormat72.getTimeZone();
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.util.TimeZone timeZone80 = fastDateFormat78.getTimeZone();
        java.util.TimeZone timeZone82 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone82);
        java.lang.String str84 = fastDateFormat83.getPattern();
        java.util.Locale locale85 = fastDateFormat83.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone80, locale85);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter87 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone74, locale85);
        org.apache.commons.lang3.time.FastDateParser fastDateParser88 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone49, locale85);
        boolean boolean90 = fastDateParser88.equals((java.lang.Object) 'a');
        boolean boolean91 = fastDateParser88.isNextNumber();
        java.util.Locale locale92 = fastDateParser88.getLocale();
        java.util.Locale locale93 = fastDateParser88.getLocale();
        java.lang.String str94 = fastDateParser88.getPattern();
        java.util.Locale locale95 = fastDateParser88.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter96 = new org.apache.commons.lang3.time.FastDatePrinter("MMM d, yyyy h:mm:ss a z", timeZone41, locale95);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 100, 2, 10, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "r" + "'", str35, "r");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(stringBuffer40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "M/d/yy" + "'", str48, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "M/d/yy" + "'", str60, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "M/d/yy" + "'", str65, "M/d/yy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat67);
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "M/d/yy" + "'", str73, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "M/d/yy" + "'", str84, "M/d/yy");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "12/31/69" + "'", str94, "12/31/69");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en_US");
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone10);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone23, locale34);
        java.util.Locale locale37 = fastDatePrinter36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone17, locale37);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter39 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone10, locale37);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone45, locale56);
        java.util.Locale locale59 = fastDatePrinter58.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter60 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone10, locale59);
        java.lang.String str62 = fastDatePrinter60.format((long) (byte) 10);
        java.util.TimeZone timeZone63 = fastDatePrinter60.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone63);
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.util.Locale locale70 = fastDateFormat68.getLocale();
        java.lang.String str72 = fastDateFormat68.format(1L);
        java.util.TimeZone timeZone73 = fastDateFormat68.getTimeZone();
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone77);
        java.lang.String str79 = fastDateFormat78.getPattern();
        java.util.TimeZone timeZone80 = fastDateFormat78.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 2, timeZone80);
        java.util.TimeZone timeZone85 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone85);
        java.lang.String str87 = fastDateFormat86.getPattern();
        java.util.Locale locale88 = fastDateFormat86.getLocale();
        java.lang.String str89 = org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(timeZone80, false, (int) (short) 1, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone73, locale88);
        org.apache.commons.lang3.time.FastDateParser fastDateParser91 = new org.apache.commons.lang3.time.FastDateParser("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone63, locale88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat92 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone63);
        java.util.Calendar calendar93 = null;
        java.lang.StringBuffer stringBuffer94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer95 = fastDateFormat92.format(calendar93, stringBuffer94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Wednesday, December 31, 1969" + "'", str62, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "12/31/69" + "'", str72, "12/31/69");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "M/d/yy" + "'", str79, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat81);
        org.junit.Assert.assertNotNull(fastDateFormat86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "M/d/yy" + "'", str87, "M/d/yy");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Pacific Standard Time" + "'", str89, "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertNotNull(fastDateFormat92);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean48 = fastDateParser46.equals((java.lang.Object) (byte) 1);
        int int50 = fastDateParser46.adjustYear((int) (short) -1);
        java.lang.String str51 = fastDateParser46.getPattern();
        java.util.Locale locale52 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone53 = fastDateParser46.getTimeZone();
        java.util.Locale locale54 = fastDateParser46.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = fastDateParser46.parseObject("FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"FastDateFormat[EEEE, MMMM d, yyyy,en_US,America/Los_Angeles]\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1999 + "'", int50 == 1999);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "12/31/69" + "'", str51, "12/31/69");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone11);
        java.lang.String str14 = fastDateFormat12.format((long) '4');
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter40 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone21, locale38);
        java.util.Calendar calendar41 = null;
        java.lang.StringBuffer stringBuffer42 = null;
        java.lang.StringBuffer stringBuffer43 = fastDatePrinter40.applyRules(calendar41, stringBuffer42);
        java.util.TimeZone timeZone44 = fastDatePrinter40.getTimeZone();
        java.lang.StringBuffer stringBuffer46 = null;
        java.lang.StringBuffer stringBuffer47 = fastDatePrinter40.format((long) 3, stringBuffer46);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.lang.String str53 = fastDateFormat50.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date57 = fastDateFormat55.parse("4:00:02 PM");
        java.lang.String str58 = fastDateFormat50.format(date57);
        java.lang.StringBuffer stringBuffer59 = null;
        java.lang.StringBuffer stringBuffer60 = fastDatePrinter40.format(date57, stringBuffer59);
        java.lang.String str61 = fastDateFormat12.format(date57);
        java.lang.String str62 = fastDateFormat2.format(date57);
        java.lang.String str64 = fastDateFormat2.format((long) (-1));
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy");
        java.util.Locale locale67 = fastDateFormat66.getLocale();
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.lang.String str73 = fastDateFormat70.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date77 = fastDateFormat75.parse("4:00:02 PM");
        java.lang.String str78 = fastDateFormat70.format(date77);
        java.lang.String str79 = fastDateFormat66.format(date77);
        java.lang.StringBuffer stringBuffer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = fastDateFormat2.format(date77, stringBuffer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[M/d/yy,en_US,America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "M/d/yy" + "'", str10, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Wednesday, December 31, 1969" + "'", str14, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNull(stringBuffer43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer47);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "12/31/69" + "'", str53, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1/1/70" + "'", str58, "1/1/70");
        org.junit.Assert.assertNull(stringBuffer60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Thursday, January 1, 1970" + "'", str61, "Thursday, January 1, 1970");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1/1/70" + "'", str62, "1/1/70");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "12/31/69" + "'", str64, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "M/d/yy" + "'", str71, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "12/31/69" + "'", str73, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1/1/70" + "'", str78, "1/1/70");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Thursday, January 1, 1970" + "'", str79, "Thursday, January 1, 1970");
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        java.util.TimeZone timeZone1 = null;
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone10);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone29 = fastDateFormat27.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.util.Locale locale34 = fastDateFormat32.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone29, locale34);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter36 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone23, locale34);
        java.util.Locale locale37 = fastDatePrinter36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone17, locale37);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter39 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy h:mm:ss a z", timeZone10, locale37);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        java.util.TimeZone timeZone45 = fastDateFormat43.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        java.util.TimeZone timeZone51 = fastDateFormat49.getTimeZone();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.util.Locale locale56 = fastDateFormat54.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone51, locale56);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter58 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone45, locale56);
        java.util.Locale locale59 = fastDatePrinter58.getLocale();
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter60 = new org.apache.commons.lang3.time.FastDatePrinter("EEEE, MMMM d, yyyy", timeZone10, locale59);
        java.lang.String str62 = fastDatePrinter60.format((long) (byte) 10);
        java.util.TimeZone timeZone63 = fastDatePrinter60.getTimeZone();
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.util.TimeZone timeZone72 = fastDateFormat70.getTimeZone();
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.util.Locale locale77 = fastDateFormat75.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone72, locale77);
        java.util.TimeZone timeZone81 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone81);
        java.lang.String str83 = fastDateFormat82.getPattern();
        java.util.TimeZone timeZone84 = fastDateFormat82.getTimeZone();
        java.util.TimeZone timeZone86 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone86);
        java.lang.String str88 = fastDateFormat87.getPattern();
        java.util.Locale locale89 = fastDateFormat87.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone84, locale89);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone72, locale89);
        java.lang.String str92 = org.apache.commons.lang3.time.FormatCache.getPatternForStyle((java.lang.Integer) 3, (java.lang.Integer) 0, locale89);
        org.apache.commons.lang3.time.FastDateParser fastDateParser93 = new org.apache.commons.lang3.time.FastDateParser("MMMM d, yyyy", timeZone63, locale89);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1/1/70", timeZone1, locale89);
        java.lang.String str95 = fastDateFormat94.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "M/d/yy" + "'", str9, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "M/d/yy" + "'", str16, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "M/d/yy" + "'", str22, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "M/d/yy" + "'", str28, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "M/d/yy" + "'", str33, "M/d/yy");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "M/d/yy" + "'", str44, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "M/d/yy" + "'", str50, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "M/d/yy" + "'", str55, "M/d/yy");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Wednesday, December 31, 1969" + "'", str62, "Wednesday, December 31, 1969");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "M/d/yy" + "'", str71, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "M/d/yy" + "'", str76, "M/d/yy");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat78);
        org.junit.Assert.assertNotNull(fastDateFormat82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "M/d/yy" + "'", str83, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "M/d/yy" + "'", str88, "M/d/yy");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertNotNull(fastDateFormat91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "M/d/yy h:mm:ss a z" + "'", str92, "M/d/yy h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1/1/70" + "'", str95, "1/1/70");
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.util.TimeZone timeZone21 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.Locale locale26 = fastDateFormat24.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone21, locale26);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone33, locale38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone21, locale38);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.util.TimeZone timeZone52 = fastDateFormat50.getTimeZone();
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone54);
        java.lang.String str56 = fastDateFormat55.getPattern();
        java.util.Locale locale57 = fastDateFormat55.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone52, locale57);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter59 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone46, locale57);
        org.apache.commons.lang3.time.FastDateParser fastDateParser60 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone21, locale57);
        boolean boolean62 = fastDateParser60.equals((java.lang.Object) 'a');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.lang.String str66 = fastDateFormat64.format(0L);
        java.util.Locale locale67 = fastDateFormat64.getLocale();
        boolean boolean68 = fastDateParser60.equals((java.lang.Object) locale67);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = new org.apache.commons.lang3.time.FastDateFormat("M/d/yy h:mm a", timeZone7, locale67);
        java.util.Locale locale70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm:ss a z", timeZone7, locale70);
        java.lang.StringBuffer stringBuffer73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = fastDateFormat71.format((long) 3, stringBuffer73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "M/d/yy" + "'", str20, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "M/d/yy" + "'", str25, "M/d/yy");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "M/d/yy" + "'", str32, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "M/d/yy" + "'", str45, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "M/d/yy" + "'", str51, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "M/d/yy" + "'", str56, "M/d/yy");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "4:00:00 PM PST" + "'", str66, "4:00:00 PM PST");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fastDateFormat71);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.Locale locale7 = fastDateFormat5.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale7);
        java.lang.String str9 = fastDateFormat8.toString();
        java.util.TimeZone timeZone10 = fastDateFormat8.getTimeZone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone22 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Locale locale27 = fastDateFormat25.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter29 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone16, locale27);
        java.util.Locale locale30 = fastDatePrinter29.getLocale();
        org.apache.commons.lang3.time.FastDateParser fastDateParser31 = new org.apache.commons.lang3.time.FastDateParser("h:mm:ss a", timeZone10, locale30);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.Locale locale38 = fastDateFormat36.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale38);
        java.util.Locale locale41 = fastDateFormat40.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = new org.apache.commons.lang3.time.FastDateFormat("MMM d, yyyy", timeZone10, locale41);
        java.lang.StringBuffer stringBuffer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer45 = fastDateFormat42.format((long) (-1), stringBuffer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str9, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "M/d/yy" + "'", str15, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "M/d/yy" + "'", str21, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "M/d/yy" + "'", str26, "M/d/yy");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter26 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone7, locale24);
        java.util.Calendar calendar27 = null;
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDatePrinter26.applyRules(calendar27, stringBuffer28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date33 = fastDateFormat31.parse("4:00:02 PM");
        java.lang.String str34 = fastDatePrinter26.format(date33);
        java.util.TimeZone timeZone35 = fastDatePrinter26.getTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        java.util.TimeZone timeZone42 = fastDateFormat40.getTimeZone();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.Locale locale47 = fastDateFormat45.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone42, locale47);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.TimeZone timeZone54 = fastDateFormat52.getTimeZone();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        java.util.Locale locale59 = fastDateFormat57.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone54, locale59);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter61 = new org.apache.commons.lang3.time.FastDatePrinter("", timeZone42, locale59);
        java.util.Calendar calendar62 = null;
        java.lang.StringBuffer stringBuffer63 = null;
        java.lang.StringBuffer stringBuffer64 = fastDatePrinter61.applyRules(calendar62, stringBuffer63);
        java.util.TimeZone timeZone65 = fastDatePrinter61.getTimeZone();
        java.lang.StringBuffer stringBuffer67 = null;
        java.lang.StringBuffer stringBuffer68 = fastDatePrinter61.format((long) 3, stringBuffer67);
        java.util.Locale locale69 = fastDatePrinter61.getLocale();
        java.util.Locale locale70 = fastDatePrinter61.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", timeZone35, locale70);
        java.util.Calendar calendar72 = null;
        java.lang.StringBuffer stringBuffer73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = fastDateFormat71.format(calendar72, stringBuffer73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "M/d/yy" + "'", str41, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "M/d/yy" + "'", str46, "M/d/yy");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "M/d/yy" + "'", str58, "M/d/yy");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNull(stringBuffer64);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNull(stringBuffer68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat71);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone7 = fastDateFormat5.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.Locale locale12 = fastDateFormat10.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone7, locale12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.TimeZone timeZone19 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.Locale locale24 = fastDateFormat22.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone19, locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale24);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.util.TimeZone timeZone38 = fastDateFormat36.getTimeZone();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.Locale locale43 = fastDateFormat41.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone38, locale43);
        org.apache.commons.lang3.time.FastDatePrinter fastDatePrinter45 = new org.apache.commons.lang3.time.FastDatePrinter("M/d/yy", timeZone32, locale43);
        org.apache.commons.lang3.time.FastDateParser fastDateParser46 = new org.apache.commons.lang3.time.FastDateParser("12/31/69", timeZone7, locale43);
        boolean boolean47 = fastDateParser46.isNextNumber();
        java.util.Locale locale48 = fastDateParser46.getLocale();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.Locale locale54 = fastDateFormat52.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale54);
        java.lang.String str56 = fastDateFormat55.toString();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.Locale locale62 = fastDateFormat60.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale62);
        java.lang.String str64 = fastDateFormat63.toString();
        boolean boolean65 = fastDateFormat55.equals((java.lang.Object) fastDateFormat63);
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.lang.String str71 = fastDateFormat68.format((long) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2);
        java.util.Date date75 = fastDateFormat73.parse("4:00:02 PM");
        java.lang.String str76 = fastDateFormat68.format(date75);
        java.lang.String str77 = fastDateFormat55.format(date75);
        java.lang.Class<?> wildcardClass78 = date75.getClass();
        boolean boolean79 = fastDateParser46.equals((java.lang.Object) date75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = fastDateParser46.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable date: \"\" does not match 12/31/69");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "M/d/yy" + "'", str6, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "M/d/yy" + "'", str11, "M/d/yy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "M/d/yy" + "'", str18, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "M/d/yy" + "'", str23, "M/d/yy");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "M/d/yy" + "'", str31, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "M/d/yy" + "'", str37, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "M/d/yy" + "'", str42, "M/d/yy");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "M/d/yy" + "'", str53, "M/d/yy");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str56, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "M/d/yy" + "'", str61, "M/d/yy");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]" + "'", str64, "FastDateFormat[h:mm:ss a z,en_US,America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(fastDateFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "M/d/yy" + "'", str69, "M/d/yy");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "12/31/69" + "'", str71, "12/31/69");
        org.junit.Assert.assertNotNull(fastDateFormat73);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 16:00:02 PST 1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1/1/70" + "'", str76, "1/1/70");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "4:00:02 PM PST" + "'", str77, "4:00:02 PM PST");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = fastDateFormat2.parse("M/d/yy", parsePosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "M/d/yy" + "'", str3, "M/d/yy");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Pacific Standard Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
    }
}

